<Block for 0x400000, 47 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x18
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x20]
0x400020:	lea	rsi, [rip + 0x186]
0x400027:	mov	rdi, rax
0x40002a:	call	0x400096
<Block for 0x40002f, 19 bytes>
0x40002f:	lea	rdx, [rbp - 0x20]
0x400033:	lea	rax, [rbp - 0x20]
0x400037:	mov	rsi, rdx
0x40003a:	mov	rdi, rax
0x40003d:	call	0x40013a
<Block for 0x400042, 12 bytes>
0x400042:	mov	rax, qword ptr [rbp - 0x20]
0x400046:	mov	rdi, rax
0x400049:	call	0x500000
<Block for 0x40004e, 12 bytes>
0x40004e:	lea	rax, [rbp - 0x20]
0x400052:	mov	rdi, rax
0x400055:	call	0x40010c
<Block for 0x40005a, 16 bytes>
0x40005a:	nop	
0x40005b:	mov	rax, qword ptr [rbp - 0x18]
0x40005f:	xor	rax, qword ptr fs:[0x28]
0x400068:	je	0x40008f
<Block for 0x40008f, 7 bytes>
0x40008f:	add	rsp, 0x18
0x400093:	pop	rbx
0x400094:	pop	rbp
0x400095:	ret	
<Block for 0x40006a, 2 bytes>
0x40006a:	jmp	0x40008a
<Block for 0x40008a, 5 bytes>
0x40008a:	call	0x500010
