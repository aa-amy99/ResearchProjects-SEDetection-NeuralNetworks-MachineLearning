<Block for 0x400111, 82 bytes>
0x400111:	endbr64	
0x400115:	push	rbp
0x400116:	mov	rbp, rsp
0x400119:	sub	rsp, 0x120
0x400120:	mov	rax, qword ptr fs:[0x28]
0x400129:	mov	qword ptr [rbp - 8], rax
0x40012d:	xor	eax, eax
0x40012f:	movabs	rax, 0x3d48544150
0x400139:	mov	edx, 0
0x40013e:	mov	qword ptr [rbp - 0x110], rax
0x400145:	mov	qword ptr [rbp - 0x108], rdx
0x40014c:	lea	rdx, [rbp - 0x100]
0x400153:	mov	eax, 0
0x400158:	mov	ecx, 0x1d
0x40015d:	mov	rdi, rdx
0x400160:	rep stosq	qword ptr [rdi], rax
<Block for 0x400163, 36 bytes>
0x400163:	mov	rdx, rdi
0x400166:	mov	word ptr [rdx], ax
0x400169:	add	rdx, 2
0x40016d:	lea	rax, [rbp - 0x110]
0x400174:	mov	qword ptr [rbp - 0x118], rax
0x40017b:	mov	dword ptr [rbp - 0x11c], 0
0x400185:	jmp	0x4001c7
<Block for 0x400160, 3 bytes>
0x400160:	rep stosq	qword ptr [rdi], rax
<Block for 0x4001c7, 9 bytes>
0x4001c7:	cmp	dword ptr [rbp - 0x11c], 0
0x4001ce:	jle	0x400187
<Block for 0x400187, 27 bytes>
0x400187:	mov	rax, qword ptr [rbp - 0x118]
0x40018e:	mov	rcx, -1
0x400195:	mov	rdx, rax
0x400198:	mov	eax, 0
0x40019d:	mov	rdi, rdx
0x4001a0:	repne scasb	al, byte ptr [rdi]
<Block for 0x4001d0, 15 bytes>
0x4001d0:	mov	rax, qword ptr [rbp - 0x118]
0x4001d7:	mov	rdi, rax
0x4001da:	call	0x500018
<Block for 0x4001a2, 46 bytes>
0x4001a2:	mov	rax, rcx
0x4001a5:	not	rax
0x4001a8:	lea	rdx, [rax - 1]
0x4001ac:	mov	rax, qword ptr [rbp - 0x118]
0x4001b3:	add	rax, rdx
0x4001b6:	mov	dword ptr [rax], 0x6e69622f
0x4001bc:	mov	byte ptr [rax + 4], 0
0x4001c0:	add	dword ptr [rbp - 0x11c], 1
0x4001c7:	cmp	dword ptr [rbp - 0x11c], 0
0x4001ce:	jle	0x400187
<Block for 0x4001a0, 2 bytes>
0x4001a0:	repne scasb	al, byte ptr [rdi]
<Block for 0x4001df, 16 bytes>
0x4001df:	nop	
0x4001e0:	mov	rax, qword ptr [rbp - 8]
0x4001e4:	xor	rax, qword ptr fs:[0x28]
0x4001ed:	je	0x4001f4
<Block for 0x4001f4, 2 bytes>
0x4001f4:	leave	
0x4001f5:	ret	
<Block for 0x4001ef, 5 bytes>
0x4001ef:	call	0x500020
