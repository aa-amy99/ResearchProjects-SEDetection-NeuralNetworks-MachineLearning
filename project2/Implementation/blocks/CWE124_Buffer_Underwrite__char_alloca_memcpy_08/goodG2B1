<Block for 0x4001ca, 85 bytes>
0x4001ca:	endbr64	
0x4001ce:	push	rbp
0x4001cf:	mov	rbp, rsp
0x4001d2:	push	rbx
0x4001d3:	sub	rsp, 0x88
0x4001da:	mov	rax, qword ptr fs:[0x28]
0x4001e3:	mov	qword ptr [rbp - 0x18], rax
0x4001e7:	xor	eax, eax
0x4001e9:	mov	eax, 0x10
0x4001ee:	sub	rax, 1
0x4001f2:	add	rax, 0x6c
0x4001f6:	mov	esi, 0x10
0x4001fb:	mov	edx, 0
0x400200:	div	rsi
0x400203:	imul	rax, rax, 0x10
0x400207:	mov	rdx, rax
0x40020a:	and	rdx, 0xfffffffffffff000
0x400211:	mov	rbx, rsp
0x400214:	sub	rbx, rdx
0x400217:	mov	rdx, rbx
0x40021a:	cmp	rsp, rdx
0x40021d:	je	0x400231
<Block for 0x400231, 26 bytes>
0x400231:	mov	rdx, rax
0x400234:	and	edx, 0xfff
0x40023a:	sub	rsp, rdx
0x40023d:	mov	rdx, rax
0x400240:	and	edx, 0xfff
0x400246:	test	rdx, rdx
0x400249:	je	0x40025b
<Block for 0x40021f, 18 bytes>
0x40021f:	sub	rsp, 0x1000
0x400226:	or	qword ptr [rsp + 0xff8], 0
0x40022f:	jmp	0x40021a
<Block for 0x40025b, 47 bytes>
0x40025b:	mov	rax, rsp
0x40025e:	add	rax, 0xf
0x400262:	shr	rax, 4
0x400266:	shl	rax, 4
0x40026a:	mov	qword ptr [rbp - 0x88], rax
0x400271:	mov	rax, qword ptr [rbp - 0x88]
0x400278:	mov	edx, 0x63
0x40027d:	mov	esi, 0x41
0x400282:	mov	rdi, rax
0x400285:	call	0x500000
<Block for 0x40024b, 63 bytes>
0x40024b:	and	eax, 0xfff
0x400250:	sub	rax, 8
0x400254:	add	rax, rsp
0x400257:	or	qword ptr [rax], 0
0x40025b:	mov	rax, rsp
0x40025e:	add	rax, 0xf
0x400262:	shr	rax, 4
0x400266:	shl	rax, 4
0x40026a:	mov	qword ptr [rbp - 0x88], rax
0x400271:	mov	rax, qword ptr [rbp - 0x88]
0x400278:	mov	edx, 0x63
0x40027d:	mov	esi, 0x41
0x400282:	mov	rdi, rax
0x400285:	call	0x500000
<Block for 0x40021a, 5 bytes>
0x40021a:	cmp	rsp, rdx
0x40021d:	je	0x400231
<Block for 0x40028a, 24 bytes>
0x40028a:	mov	rax, qword ptr [rbp - 0x88]
0x400291:	add	rax, 0x63
0x400295:	mov	byte ptr [rax], 0
0x400298:	mov	eax, 0
0x40029d:	call	0x40000f
<Block for 0x4002a2, 4 bytes>
0x4002a2:	test	eax, eax
0x4002a4:	je	0x4002b4
<Block for 0x4002b4, 36 bytes>
0x4002b4:	mov	rax, qword ptr [rbp - 0x88]
0x4002bb:	mov	qword ptr [rbp - 0x90], rax
0x4002c2:	lea	rax, [rbp - 0x80]
0x4002c6:	mov	edx, 0x63
0x4002cb:	mov	esi, 0x43
0x4002d0:	mov	rdi, rax
0x4002d3:	call	0x500000
<Block for 0x4002a6, 12 bytes>
0x4002a6:	lea	rdi, [rip + 0x29a]
0x4002ad:	call	0x500008
<Block for 0x4002d8, 141 bytes>
0x4002d8:	mov	byte ptr [rbp - 0x1d], 0
0x4002dc:	mov	rax, qword ptr [rbp - 0x90]
0x4002e3:	mov	rcx, qword ptr [rbp - 0x80]
0x4002e7:	mov	rbx, qword ptr [rbp - 0x78]
0x4002eb:	mov	qword ptr [rax], rcx
0x4002ee:	mov	qword ptr [rax + 8], rbx
0x4002f2:	mov	rcx, qword ptr [rbp - 0x70]
0x4002f6:	mov	rbx, qword ptr [rbp - 0x68]
0x4002fa:	mov	qword ptr [rax + 0x10], rcx
0x4002fe:	mov	qword ptr [rax + 0x18], rbx
0x400302:	mov	rcx, qword ptr [rbp - 0x60]
0x400306:	mov	rbx, qword ptr [rbp - 0x58]
0x40030a:	mov	qword ptr [rax + 0x20], rcx
0x40030e:	mov	qword ptr [rax + 0x28], rbx
0x400312:	mov	rcx, qword ptr [rbp - 0x50]
0x400316:	mov	rbx, qword ptr [rbp - 0x48]
0x40031a:	mov	qword ptr [rax + 0x30], rcx
0x40031e:	mov	qword ptr [rax + 0x38], rbx
0x400322:	mov	rcx, qword ptr [rbp - 0x40]
0x400326:	mov	rbx, qword ptr [rbp - 0x38]
0x40032a:	mov	qword ptr [rax + 0x40], rcx
0x40032e:	mov	qword ptr [rax + 0x48], rbx
0x400332:	mov	rcx, qword ptr [rbp - 0x30]
0x400336:	mov	rbx, qword ptr [rbp - 0x28]
0x40033a:	mov	qword ptr [rax + 0x50], rcx
0x40033e:	mov	qword ptr [rax + 0x58], rbx
0x400342:	mov	edx, dword ptr [rbp - 0x20]
0x400345:	mov	dword ptr [rax + 0x60], edx
0x400348:	mov	rax, qword ptr [rbp - 0x90]
0x40034f:	add	rax, 0x63
0x400353:	mov	byte ptr [rax], 0
0x400356:	mov	rax, qword ptr [rbp - 0x90]
0x40035d:	mov	rdi, rax
0x400360:	call	0x500008
<Block for 0x4002b2, 2 bytes>
0x4002b2:	jmp	0x4002c2
<Block for 0x400365, 16 bytes>
0x400365:	nop	
0x400366:	mov	rax, qword ptr [rbp - 0x18]
0x40036a:	xor	rax, qword ptr fs:[0x28]
0x400373:	je	0x40037a
<Block for 0x4002c2, 22 bytes>
0x4002c2:	lea	rax, [rbp - 0x80]
0x4002c6:	mov	edx, 0x63
0x4002cb:	mov	esi, 0x43
0x4002d0:	mov	rdi, rax
0x4002d3:	call	0x500000
<Block for 0x40037a, 6 bytes>
0x40037a:	mov	rbx, qword ptr [rbp - 8]
0x40037e:	leave	
0x40037f:	ret	
<Block for 0x400375, 5 bytes>
0x400375:	call	0x500010
