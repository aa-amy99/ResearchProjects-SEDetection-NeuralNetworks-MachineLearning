<Block for 0x400380, 85 bytes>
0x400380:	endbr64	
0x400384:	push	rbp
0x400385:	mov	rbp, rsp
0x400388:	push	rbx
0x400389:	sub	rsp, 0x88
0x400390:	mov	rax, qword ptr fs:[0x28]
0x400399:	mov	qword ptr [rbp - 0x18], rax
0x40039d:	xor	eax, eax
0x40039f:	mov	eax, 0x10
0x4003a4:	sub	rax, 1
0x4003a8:	add	rax, 0x6c
0x4003ac:	mov	esi, 0x10
0x4003b1:	mov	edx, 0
0x4003b6:	div	rsi
0x4003b9:	imul	rax, rax, 0x10
0x4003bd:	mov	rdx, rax
0x4003c0:	and	rdx, 0xfffffffffffff000
0x4003c7:	mov	rbx, rsp
0x4003ca:	sub	rbx, rdx
0x4003cd:	mov	rdx, rbx
0x4003d0:	cmp	rsp, rdx
0x4003d3:	je	0x4003e7
<Block for 0x4003e7, 26 bytes>
0x4003e7:	mov	rdx, rax
0x4003ea:	and	edx, 0xfff
0x4003f0:	sub	rsp, rdx
0x4003f3:	mov	rdx, rax
0x4003f6:	and	edx, 0xfff
0x4003fc:	test	rdx, rdx
0x4003ff:	je	0x400411
<Block for 0x4003d5, 18 bytes>
0x4003d5:	sub	rsp, 0x1000
0x4003dc:	or	qword ptr [rsp + 0xff8], 0
0x4003e5:	jmp	0x4003d0
<Block for 0x400411, 47 bytes>
0x400411:	mov	rax, rsp
0x400414:	add	rax, 0xf
0x400418:	shr	rax, 4
0x40041c:	shl	rax, 4
0x400420:	mov	qword ptr [rbp - 0x88], rax
0x400427:	mov	rax, qword ptr [rbp - 0x88]
0x40042e:	mov	edx, 0x63
0x400433:	mov	esi, 0x41
0x400438:	mov	rdi, rax
0x40043b:	call	0x500000
<Block for 0x400401, 63 bytes>
0x400401:	and	eax, 0xfff
0x400406:	sub	rax, 8
0x40040a:	add	rax, rsp
0x40040d:	or	qword ptr [rax], 0
0x400411:	mov	rax, rsp
0x400414:	add	rax, 0xf
0x400418:	shr	rax, 4
0x40041c:	shl	rax, 4
0x400420:	mov	qword ptr [rbp - 0x88], rax
0x400427:	mov	rax, qword ptr [rbp - 0x88]
0x40042e:	mov	edx, 0x63
0x400433:	mov	esi, 0x41
0x400438:	mov	rdi, rax
0x40043b:	call	0x500000
<Block for 0x4003d0, 5 bytes>
0x4003d0:	cmp	rsp, rdx
0x4003d3:	je	0x4003e7
<Block for 0x400440, 24 bytes>
0x400440:	mov	rax, qword ptr [rbp - 0x88]
0x400447:	add	rax, 0x63
0x40044b:	mov	byte ptr [rax], 0
0x40044e:	mov	eax, 0
0x400453:	call	0x400000
<Block for 0x400458, 4 bytes>
0x400458:	test	eax, eax
0x40045a:	je	0x40046a
<Block for 0x40046a, 22 bytes>
0x40046a:	lea	rax, [rbp - 0x80]
0x40046e:	mov	edx, 0x63
0x400473:	mov	esi, 0x43
0x400478:	mov	rdi, rax
0x40047b:	call	0x500000
<Block for 0x40045c, 36 bytes>
0x40045c:	mov	rax, qword ptr [rbp - 0x88]
0x400463:	mov	qword ptr [rbp - 0x90], rax
0x40046a:	lea	rax, [rbp - 0x80]
0x40046e:	mov	edx, 0x63
0x400473:	mov	esi, 0x43
0x400478:	mov	rdi, rax
0x40047b:	call	0x500000
<Block for 0x400480, 141 bytes>
0x400480:	mov	byte ptr [rbp - 0x1d], 0
0x400484:	mov	rax, qword ptr [rbp - 0x90]
0x40048b:	mov	rcx, qword ptr [rbp - 0x80]
0x40048f:	mov	rbx, qword ptr [rbp - 0x78]
0x400493:	mov	qword ptr [rax], rcx
0x400496:	mov	qword ptr [rax + 8], rbx
0x40049a:	mov	rcx, qword ptr [rbp - 0x70]
0x40049e:	mov	rbx, qword ptr [rbp - 0x68]
0x4004a2:	mov	qword ptr [rax + 0x10], rcx
0x4004a6:	mov	qword ptr [rax + 0x18], rbx
0x4004aa:	mov	rcx, qword ptr [rbp - 0x60]
0x4004ae:	mov	rbx, qword ptr [rbp - 0x58]
0x4004b2:	mov	qword ptr [rax + 0x20], rcx
0x4004b6:	mov	qword ptr [rax + 0x28], rbx
0x4004ba:	mov	rcx, qword ptr [rbp - 0x50]
0x4004be:	mov	rbx, qword ptr [rbp - 0x48]
0x4004c2:	mov	qword ptr [rax + 0x30], rcx
0x4004c6:	mov	qword ptr [rax + 0x38], rbx
0x4004ca:	mov	rcx, qword ptr [rbp - 0x40]
0x4004ce:	mov	rbx, qword ptr [rbp - 0x38]
0x4004d2:	mov	qword ptr [rax + 0x40], rcx
0x4004d6:	mov	qword ptr [rax + 0x48], rbx
0x4004da:	mov	rcx, qword ptr [rbp - 0x30]
0x4004de:	mov	rbx, qword ptr [rbp - 0x28]
0x4004e2:	mov	qword ptr [rax + 0x50], rcx
0x4004e6:	mov	qword ptr [rax + 0x58], rbx
0x4004ea:	mov	edx, dword ptr [rbp - 0x20]
0x4004ed:	mov	dword ptr [rax + 0x60], edx
0x4004f0:	mov	rax, qword ptr [rbp - 0x90]
0x4004f7:	add	rax, 0x63
0x4004fb:	mov	byte ptr [rax], 0
0x4004fe:	mov	rax, qword ptr [rbp - 0x90]
0x400505:	mov	rdi, rax
0x400508:	call	0x500008
<Block for 0x40050d, 16 bytes>
0x40050d:	nop	
0x40050e:	mov	rax, qword ptr [rbp - 0x18]
0x400512:	xor	rax, qword ptr fs:[0x28]
0x40051b:	je	0x400522
<Block for 0x400522, 6 bytes>
0x400522:	mov	rbx, qword ptr [rbp - 8]
0x400526:	leave	
0x400527:	ret	
<Block for 0x40051d, 5 bytes>
0x40051d:	call	0x500010
