<Block for 0x40012f, 81 bytes>
0x40012f:	endbr64	
0x400133:	push	rbp
0x400134:	mov	rbp, rsp
0x400137:	add	rsp, -0x80
0x40013b:	mov	rax, qword ptr fs:[0x28]
0x400144:	mov	qword ptr [rbp - 8], rax
0x400148:	xor	eax, eax
0x40014a:	mov	eax, 0x10
0x40014f:	sub	rax, 1
0x400153:	add	rax, 0x6c
0x400157:	mov	esi, 0x10
0x40015c:	mov	edx, 0
0x400161:	div	rsi
0x400164:	imul	rax, rax, 0x10
0x400168:	mov	rdx, rax
0x40016b:	and	rdx, 0xfffffffffffff000
0x400172:	mov	rcx, rsp
0x400175:	sub	rcx, rdx
0x400178:	mov	rdx, rcx
0x40017b:	cmp	rsp, rdx
0x40017e:	je	0x400192
<Block for 0x400192, 26 bytes>
0x400192:	mov	rdx, rax
0x400195:	and	edx, 0xfff
0x40019b:	sub	rsp, rdx
0x40019e:	mov	rdx, rax
0x4001a1:	and	edx, 0xfff
0x4001a7:	test	rdx, rdx
0x4001aa:	je	0x4001bc
<Block for 0x400180, 18 bytes>
0x400180:	sub	rsp, 0x1000
0x400187:	or	qword ptr [rsp + 0xff8], 0
0x400190:	jmp	0x40017b
<Block for 0x4001bc, 41 bytes>
0x4001bc:	mov	rax, rsp
0x4001bf:	add	rax, 0xf
0x4001c3:	shr	rax, 4
0x4001c7:	shl	rax, 4
0x4001cb:	mov	qword ptr [rbp - 0x78], rax
0x4001cf:	mov	rax, qword ptr [rbp - 0x78]
0x4001d3:	mov	edx, 0x63
0x4001d8:	mov	esi, 0x41
0x4001dd:	mov	rdi, rax
0x4001e0:	call	0x500000
<Block for 0x4001ac, 57 bytes>
0x4001ac:	and	eax, 0xfff
0x4001b1:	sub	rax, 8
0x4001b5:	add	rax, rsp
0x4001b8:	or	qword ptr [rax], 0
0x4001bc:	mov	rax, rsp
0x4001bf:	add	rax, 0xf
0x4001c3:	shr	rax, 4
0x4001c7:	shl	rax, 4
0x4001cb:	mov	qword ptr [rbp - 0x78], rax
0x4001cf:	mov	rax, qword ptr [rbp - 0x78]
0x4001d3:	mov	edx, 0x63
0x4001d8:	mov	esi, 0x41
0x4001dd:	mov	rdi, rax
0x4001e0:	call	0x500000
<Block for 0x40017b, 5 bytes>
0x40017b:	cmp	rsp, rdx
0x40017e:	je	0x400192
<Block for 0x4001e5, 20 bytes>
0x4001e5:	mov	rax, qword ptr [rbp - 0x78]
0x4001e9:	add	rax, 0x63
0x4001ed:	mov	byte ptr [rax], 0
0x4001f0:	mov	eax, 0
0x4001f5:	test	eax, eax
0x4001f7:	je	0x400207
<Block for 0x400207, 30 bytes>
0x400207:	mov	rax, qword ptr [rbp - 0x78]
0x40020b:	mov	qword ptr [rbp - 0x80], rax
0x40020f:	lea	rax, [rbp - 0x70]
0x400213:	mov	edx, 0x63
0x400218:	mov	esi, 0x43
0x40021d:	mov	rdi, rax
0x400220:	call	0x500000
<Block for 0x4001f9, 12 bytes>
0x4001f9:	lea	rdi, [rip + 0x1bc]
0x400200:	call	0x500010
<Block for 0x400225, 28 bytes>
0x400225:	mov	byte ptr [rbp - 0xd], 0
0x400229:	mov	rcx, qword ptr [rbp - 0x80]
0x40022d:	lea	rax, [rbp - 0x70]
0x400231:	mov	edx, 0x64
0x400236:	mov	rsi, rcx
0x400239:	mov	rdi, rax
0x40023c:	call	0x500008
<Block for 0x400205, 2 bytes>
0x400205:	jmp	0x40020f
<Block for 0x400241, 16 bytes>
0x400241:	mov	byte ptr [rbp - 0xd], 0
0x400245:	lea	rax, [rbp - 0x70]
0x400249:	mov	rdi, rax
0x40024c:	call	0x500010
<Block for 0x40020f, 22 bytes>
0x40020f:	lea	rax, [rbp - 0x70]
0x400213:	mov	edx, 0x63
0x400218:	mov	esi, 0x43
0x40021d:	mov	rdi, rax
0x400220:	call	0x500000
<Block for 0x400251, 16 bytes>
0x400251:	nop	
0x400252:	mov	rax, qword ptr [rbp - 8]
0x400256:	xor	rax, qword ptr fs:[0x28]
0x40025f:	je	0x400266
<Block for 0x400266, 2 bytes>
0x400266:	leave	
0x400267:	ret	
<Block for 0x400261, 5 bytes>
0x400261:	call	0x500018
