<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x68
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x50]
0x400020:	mov	rdi, rax
0x400023:	call	0x400392
<Block for 0x400028, 41 bytes>
0x400028:	mov	dword ptr [rbp - 0x6c], 0x64
0x40002f:	mov	dword ptr [rbp - 0x58], 0
0x400036:	mov	dword ptr [rbp - 0x54], 0
0x40003d:	lea	rax, [rbp - 0x6c]
0x400041:	mov	qword ptr [rbp - 0x68], rax
0x400045:	lea	rax, [rbp - 0x50]
0x400049:	mov	rdi, rax
0x40004c:	call	0x400526
<Block for 0x400051, 23 bytes>
0x400051:	mov	qword ptr [rbp - 0x60], rax
0x400055:	lea	rdx, [rbp - 0x60]
0x400059:	lea	rax, [rbp - 0x30]
0x40005d:	mov	rsi, rdx
0x400060:	mov	rdi, rax
0x400063:	call	0x400576
<Block for 0x400068, 28 bytes>
0x400068:	lea	rdx, [rbp - 0x68]
0x40006c:	mov	rsi, qword ptr [rbp - 0x30]
0x400070:	lea	rax, [rbp - 0x50]
0x400074:	mov	rcx, rdx
0x400077:	mov	edx, 1
0x40007c:	mov	rdi, rax
0x40007f:	call	0x4005a4
<Block for 0x400084, 12 bytes>
0x400084:	lea	rax, [rbp - 0x50]
0x400088:	mov	rdi, rax
0x40008b:	call	0x400526
<Block for 0x400090, 23 bytes>
0x400090:	mov	qword ptr [rbp - 0x60], rax
0x400094:	lea	rdx, [rbp - 0x60]
0x400098:	lea	rax, [rbp - 0x30]
0x40009c:	mov	rsi, rdx
0x40009f:	mov	rdi, rax
0x4000a2:	call	0x400576
<Block for 0x4000a7, 28 bytes>
0x4000a7:	lea	rdx, [rbp - 0x68]
0x4000ab:	mov	rsi, qword ptr [rbp - 0x30]
0x4000af:	lea	rax, [rbp - 0x50]
0x4000b3:	mov	rcx, rdx
0x4000b6:	mov	edx, 1
0x4000bb:	mov	rdi, rax
0x4000be:	call	0x4005a4
<Block for 0x4000c3, 12 bytes>
0x4000c3:	lea	rax, [rbp - 0x50]
0x4000c7:	mov	rdi, rax
0x4000ca:	call	0x400526
<Block for 0x4000cf, 23 bytes>
0x4000cf:	mov	qword ptr [rbp - 0x60], rax
0x4000d3:	lea	rdx, [rbp - 0x60]
0x4000d7:	lea	rax, [rbp - 0x30]
0x4000db:	mov	rsi, rdx
0x4000de:	mov	rdi, rax
0x4000e1:	call	0x400576
<Block for 0x4000e6, 28 bytes>
0x4000e6:	lea	rdx, [rbp - 0x68]
0x4000ea:	mov	rsi, qword ptr [rbp - 0x30]
0x4000ee:	lea	rax, [rbp - 0x50]
0x4000f2:	mov	rcx, rdx
0x4000f5:	mov	edx, 1
0x4000fa:	mov	rdi, rax
0x4000fd:	call	0x4005a4
<Block for 0x400102, 19 bytes>
0x400102:	lea	rdx, [rbp - 0x50]
0x400106:	lea	rax, [rbp - 0x30]
0x40010a:	mov	rsi, rdx
0x40010d:	mov	rdi, rax
0x400110:	call	0x40066a
<Block for 0x400115, 12 bytes>
0x400115:	lea	rax, [rbp - 0x30]
0x400119:	mov	rdi, rax
0x40011c:	call	0x500000
<Block for 0x400121, 12 bytes>
0x400121:	lea	rax, [rbp - 0x30]
0x400125:	mov	rdi, rax
0x400128:	call	0x4004de
<Block for 0x40012d, 12 bytes>
0x40012d:	lea	rax, [rbp - 0x50]
0x400131:	mov	rdi, rax
0x400134:	call	0x4004de
<Block for 0x400139, 16 bytes>
0x400139:	nop	
0x40013a:	mov	rax, qword ptr [rbp - 0x18]
0x40013e:	xor	rax, qword ptr fs:[0x28]
0x400147:	je	0x400183
<Block for 0x400183, 7 bytes>
0x400183:	add	rsp, 0x68
0x400187:	pop	rbx
0x400188:	pop	rbp
0x400189:	ret	
<Block for 0x400149, 2 bytes>
0x400149:	jmp	0x40017e
<Block for 0x40017e, 5 bytes>
0x40017e:	call	0x500010
