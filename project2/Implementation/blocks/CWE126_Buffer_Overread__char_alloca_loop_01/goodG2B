<Block for 0x40021b, 84 bytes>
0x40021b:	endbr64	
0x40021f:	push	rbp
0x400220:	mov	rbp, rsp
0x400223:	sub	rsp, 0xa0
0x40022a:	mov	rax, qword ptr fs:[0x28]
0x400233:	mov	qword ptr [rbp - 8], rax
0x400237:	xor	eax, eax
0x400239:	mov	eax, 0x10
0x40023e:	sub	rax, 1
0x400242:	add	rax, 0x3a
0x400246:	mov	ecx, 0x10
0x40024b:	mov	edx, 0
0x400250:	div	rcx
0x400253:	imul	rax, rax, 0x10
0x400257:	mov	rdx, rax
0x40025a:	and	rdx, 0xfffffffffffff000
0x400261:	mov	rcx, rsp
0x400264:	sub	rcx, rdx
0x400267:	mov	rdx, rcx
0x40026a:	cmp	rsp, rdx
0x40026d:	je	0x400281
<Block for 0x400281, 26 bytes>
0x400281:	mov	rdx, rax
0x400284:	and	edx, 0xfff
0x40028a:	sub	rsp, rdx
0x40028d:	mov	rdx, rax
0x400290:	and	edx, 0xfff
0x400296:	test	rdx, rdx
0x400299:	je	0x4002ab
<Block for 0x40026f, 18 bytes>
0x40026f:	sub	rsp, 0x1000
0x400276:	or	qword ptr [rsp + 0xff8], 0
0x40027f:	jmp	0x40026a
<Block for 0x4002ab, 76 bytes>
0x4002ab:	mov	rax, rsp
0x4002ae:	add	rax, 0xf
0x4002b2:	shr	rax, 4
0x4002b6:	shl	rax, 4
0x4002ba:	mov	qword ptr [rbp - 0x90], rax
0x4002c1:	mov	eax, 0x10
0x4002c6:	sub	rax, 1
0x4002ca:	add	rax, 0x6c
0x4002ce:	mov	edi, 0x10
0x4002d3:	mov	edx, 0
0x4002d8:	div	rdi
0x4002db:	imul	rax, rax, 0x10
0x4002df:	mov	rdx, rax
0x4002e2:	and	rdx, 0xfffffffffffff000
0x4002e9:	mov	rsi, rsp
0x4002ec:	sub	rsi, rdx
0x4002ef:	mov	rdx, rsi
0x4002f2:	cmp	rsp, rdx
0x4002f5:	je	0x400309
<Block for 0x40029b, 92 bytes>
0x40029b:	and	eax, 0xfff
0x4002a0:	sub	rax, 8
0x4002a4:	add	rax, rsp
0x4002a7:	or	qword ptr [rax], 0
0x4002ab:	mov	rax, rsp
0x4002ae:	add	rax, 0xf
0x4002b2:	shr	rax, 4
0x4002b6:	shl	rax, 4
0x4002ba:	mov	qword ptr [rbp - 0x90], rax
0x4002c1:	mov	eax, 0x10
0x4002c6:	sub	rax, 1
0x4002ca:	add	rax, 0x6c
0x4002ce:	mov	edi, 0x10
0x4002d3:	mov	edx, 0
0x4002d8:	div	rdi
0x4002db:	imul	rax, rax, 0x10
0x4002df:	mov	rdx, rax
0x4002e2:	and	rdx, 0xfffffffffffff000
0x4002e9:	mov	rsi, rsp
0x4002ec:	sub	rsi, rdx
0x4002ef:	mov	rdx, rsi
0x4002f2:	cmp	rsp, rdx
0x4002f5:	je	0x400309
<Block for 0x40026a, 5 bytes>
0x40026a:	cmp	rsp, rdx
0x40026d:	je	0x400281
<Block for 0x400309, 26 bytes>
0x400309:	mov	rdx, rax
0x40030c:	and	edx, 0xfff
0x400312:	sub	rsp, rdx
0x400315:	mov	rdx, rax
0x400318:	and	edx, 0xfff
0x40031e:	test	rdx, rdx
0x400321:	je	0x400333
<Block for 0x4002f7, 18 bytes>
0x4002f7:	sub	rsp, 0x1000
0x4002fe:	or	qword ptr [rsp + 0xff8], 0
0x400307:	jmp	0x4002f2
<Block for 0x400333, 47 bytes>
0x400333:	mov	rax, rsp
0x400336:	add	rax, 0xf
0x40033a:	shr	rax, 4
0x40033e:	shl	rax, 4
0x400342:	mov	qword ptr [rbp - 0x88], rax
0x400349:	mov	rax, qword ptr [rbp - 0x90]
0x400350:	mov	edx, 0x31
0x400355:	mov	esi, 0x41
0x40035a:	mov	rdi, rax
0x40035d:	call	0x500000
<Block for 0x400323, 63 bytes>
0x400323:	and	eax, 0xfff
0x400328:	sub	rax, 8
0x40032c:	add	rax, rsp
0x40032f:	or	qword ptr [rax], 0
0x400333:	mov	rax, rsp
0x400336:	add	rax, 0xf
0x40033a:	shr	rax, 4
0x40033e:	shl	rax, 4
0x400342:	mov	qword ptr [rbp - 0x88], rax
0x400349:	mov	rax, qword ptr [rbp - 0x90]
0x400350:	mov	edx, 0x31
0x400355:	mov	esi, 0x41
0x40035a:	mov	rdi, rax
0x40035d:	call	0x500000
<Block for 0x4002f2, 5 bytes>
0x4002f2:	cmp	rsp, rdx
0x4002f5:	je	0x400309
<Block for 0x400362, 39 bytes>
0x400362:	mov	rax, qword ptr [rbp - 0x90]
0x400369:	add	rax, 0x31
0x40036d:	mov	byte ptr [rax], 0
0x400370:	mov	rax, qword ptr [rbp - 0x88]
0x400377:	mov	edx, 0x63
0x40037c:	mov	esi, 0x41
0x400381:	mov	rdi, rax
0x400384:	call	0x500000
<Block for 0x400389, 47 bytes>
0x400389:	mov	rax, qword ptr [rbp - 0x88]
0x400390:	add	rax, 0x63
0x400394:	mov	byte ptr [rax], 0
0x400397:	mov	rax, qword ptr [rbp - 0x88]
0x40039e:	mov	qword ptr [rbp - 0x80], rax
0x4003a2:	lea	rax, [rbp - 0x70]
0x4003a6:	mov	edx, 0x63
0x4003ab:	mov	esi, 0x43
0x4003b0:	mov	rdi, rax
0x4003b3:	call	0x500000
<Block for 0x4003b8, 16 bytes>
0x4003b8:	mov	byte ptr [rbp - 0xd], 0
0x4003bc:	lea	rax, [rbp - 0x70]
0x4003c0:	mov	rdi, rax
0x4003c3:	call	0x500008
<Block for 0x4003c8, 17 bytes>
0x4003c8:	mov	qword ptr [rbp - 0x78], rax
0x4003cc:	mov	qword ptr [rbp - 0x98], 0
0x4003d7:	jmp	0x400402
<Block for 0x400402, 13 bytes>
0x400402:	mov	rax, qword ptr [rbp - 0x98]
0x400409:	cmp	rax, qword ptr [rbp - 0x78]
0x40040d:	jb	0x4003d9
<Block for 0x4003d9, 54 bytes>
0x4003d9:	mov	rdx, qword ptr [rbp - 0x80]
0x4003dd:	mov	rax, qword ptr [rbp - 0x98]
0x4003e4:	add	rax, rdx
0x4003e7:	movzx	eax, byte ptr [rax]
0x4003ea:	lea	rcx, [rbp - 0x70]
0x4003ee:	mov	rdx, qword ptr [rbp - 0x98]
0x4003f5:	add	rdx, rcx
0x4003f8:	mov	byte ptr [rdx], al
0x4003fa:	add	qword ptr [rbp - 0x98], 1
0x400402:	mov	rax, qword ptr [rbp - 0x98]
0x400409:	cmp	rax, qword ptr [rbp - 0x78]
0x40040d:	jb	0x4003d9
<Block for 0x40040f, 16 bytes>
0x40040f:	mov	byte ptr [rbp - 0xd], 0
0x400413:	lea	rax, [rbp - 0x70]
0x400417:	mov	rdi, rax
0x40041a:	call	0x500010
<Block for 0x40041f, 16 bytes>
0x40041f:	nop	
0x400420:	mov	rax, qword ptr [rbp - 8]
0x400424:	xor	rax, qword ptr fs:[0x28]
0x40042d:	je	0x400434
<Block for 0x400434, 2 bytes>
0x400434:	leave	
0x400435:	ret	
<Block for 0x40042f, 5 bytes>
0x40042f:	call	0x500018
