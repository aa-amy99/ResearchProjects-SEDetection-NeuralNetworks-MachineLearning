<Block for 0x40001e, 55 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	sub	rsp, 0xf0
0x40002d:	mov	rax, qword ptr fs:[0x28]
0x400036:	mov	qword ptr [rbp - 8], rax
0x40003a:	xor	eax, eax
0x40003c:	lea	rax, [rbp - 0xe0]
0x400043:	mov	edx, 0x63
0x400048:	mov	esi, 0x41
0x40004d:	mov	rdi, rax
0x400050:	call	0x500000
<Block for 0x400055, 14 bytes>
0x400055:	mov	byte ptr [rbp - 0x7d], 0
0x400059:	mov	eax, 0
0x40005e:	call	0x400000
<Block for 0x400063, 4 bytes>
0x400063:	test	eax, eax
0x400065:	je	0x400079
<Block for 0x400079, 22 bytes>
0x400079:	lea	rax, [rbp - 0x70]
0x40007d:	mov	edx, 0x63
0x400082:	mov	esi, 0x43
0x400087:	mov	rdi, rax
0x40008a:	call	0x500000
<Block for 0x400067, 40 bytes>
0x400067:	lea	rax, [rbp - 0xe0]
0x40006e:	sub	rax, 8
0x400072:	mov	qword ptr [rbp - 0xf0], rax
0x400079:	lea	rax, [rbp - 0x70]
0x40007d:	mov	edx, 0x63
0x400082:	mov	esi, 0x43
0x400087:	mov	rdi, rax
0x40008a:	call	0x500000
<Block for 0x40008f, 17 bytes>
0x40008f:	mov	byte ptr [rbp - 0xd], 0
0x400093:	mov	qword ptr [rbp - 0xe8], 0
0x40009e:	jmp	0x4000cc
<Block for 0x4000cc, 10 bytes>
0x4000cc:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000d4:	jbe	0x4000a0
<Block for 0x4000a0, 54 bytes>
0x4000a0:	mov	rdx, qword ptr [rbp - 0xf0]
0x4000a7:	mov	rax, qword ptr [rbp - 0xe8]
0x4000ae:	add	rdx, rax
0x4000b1:	lea	rcx, [rbp - 0x70]
0x4000b5:	mov	rax, qword ptr [rbp - 0xe8]
0x4000bc:	add	rax, rcx
0x4000bf:	movzx	eax, byte ptr [rax]
0x4000c2:	mov	byte ptr [rdx], al
0x4000c4:	add	qword ptr [rbp - 0xe8], 1
0x4000cc:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000d4:	jbe	0x4000a0
<Block for 0x4000d6, 29 bytes>
0x4000d6:	mov	rax, qword ptr [rbp - 0xf0]
0x4000dd:	add	rax, 0x63
0x4000e1:	mov	byte ptr [rax], 0
0x4000e4:	mov	rax, qword ptr [rbp - 0xf0]
0x4000eb:	mov	rdi, rax
0x4000ee:	call	0x500008
<Block for 0x4000f3, 16 bytes>
0x4000f3:	nop	
0x4000f4:	mov	rax, qword ptr [rbp - 8]
0x4000f8:	xor	rax, qword ptr fs:[0x28]
0x400101:	je	0x400108
<Block for 0x400108, 2 bytes>
0x400108:	leave	
0x400109:	ret	
<Block for 0x400103, 5 bytes>
0x400103:	call	0x500010
