<Block for 0x400000, 22 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	eax, 0
0x400011:	call	0x500000
<Block for 0x400016, 4 bytes>
0x400016:	test	eax, eax
0x400018:	je	0x400090
<Block for 0x400090, 16 bytes>
0x400090:	lea	rax, [rip + 0x18d]
0x400097:	mov	qword ptr [rbp - 8], rax
0x40009b:	call	0x500008
<Block for 0x40001a, 16 bytes>
0x40001a:	lea	rax, [rip + 0x203]
0x400021:	mov	qword ptr [rbp - 0x10], rax
0x400025:	call	0x500008
<Block for 0x4000a0, 55 bytes>
0x4000a0:	mov	edx, eax
0x4000a2:	movsxd	rax, edx
0x4000a5:	imul	rax, rax, 0x55555556
0x4000ac:	shr	rax, 0x20
0x4000b0:	mov	rcx, rax
0x4000b3:	mov	eax, edx
0x4000b5:	sar	eax, 0x1f
0x4000b8:	mov	edi, ecx
0x4000ba:	sub	edi, eax
0x4000bc:	mov	eax, edi
0x4000be:	mov	dword ptr [rbp - 0x18], eax
0x4000c1:	mov	ecx, dword ptr [rbp - 0x18]
0x4000c4:	mov	eax, ecx
0x4000c6:	add	eax, eax
0x4000c8:	add	eax, ecx
0x4000ca:	sub	edx, eax
0x4000cc:	mov	eax, edx
0x4000ce:	mov	dword ptr [rbp - 0x18], eax
0x4000d1:	cmp	dword ptr [rbp - 0x18], 0
0x4000d5:	je	0x4000df
<Block for 0x40002a, 55 bytes>
0x40002a:	mov	edx, eax
0x40002c:	movsxd	rax, edx
0x40002f:	imul	rax, rax, 0x55555556
0x400036:	shr	rax, 0x20
0x40003a:	mov	rcx, rax
0x40003d:	mov	eax, edx
0x40003f:	sar	eax, 0x1f
0x400042:	mov	esi, ecx
0x400044:	sub	esi, eax
0x400046:	mov	eax, esi
0x400048:	mov	dword ptr [rbp - 0x14], eax
0x40004b:	mov	ecx, dword ptr [rbp - 0x14]
0x40004e:	mov	eax, ecx
0x400050:	add	eax, eax
0x400052:	add	eax, ecx
0x400054:	sub	edx, eax
0x400056:	mov	eax, edx
0x400058:	mov	dword ptr [rbp - 0x14], eax
0x40005b:	cmp	dword ptr [rbp - 0x14], 0
0x40005f:	je	0x400069
<Block for 0x4000df, 13 bytes>
0x4000df:	lea	rax, [rip + 0x157]
0x4000e6:	mov	qword ptr [rbp - 8], rax
0x4000ea:	jmp	0x4000f8
<Block for 0x4000d7, 6 bytes>
0x4000d7:	cmp	dword ptr [rbp - 0x18], 1
0x4000db:	je	0x4000ec
<Block for 0x400069, 13 bytes>
0x400069:	lea	rax, [rip + 0x1cd]
0x400070:	mov	qword ptr [rbp - 0x10], rax
0x400074:	jmp	0x400082
<Block for 0x400061, 6 bytes>
0x400061:	cmp	dword ptr [rbp - 0x14], 1
0x400065:	je	0x400076
<Block for 0x4000f8, 12 bytes>
0x4000f8:	mov	rax, qword ptr [rbp - 8]
0x4000fc:	mov	rdi, rax
0x4000ff:	call	0x500010
<Block for 0x4000ec, 24 bytes>
0x4000ec:	lea	rax, [rip + 0x14c]
0x4000f3:	mov	qword ptr [rbp - 8], rax
0x4000f7:	nop	
0x4000f8:	mov	rax, qword ptr [rbp - 8]
0x4000fc:	mov	rdi, rax
0x4000ff:	call	0x500010
<Block for 0x4000dd, 2 bytes>
0x4000dd:	jmp	0x400104
<Block for 0x400082, 12 bytes>
0x400082:	mov	rax, qword ptr [rbp - 0x10]
0x400086:	mov	rdi, rax
0x400089:	call	0x500010
<Block for 0x400076, 24 bytes>
0x400076:	lea	rax, [rip + 0x1c2]
0x40007d:	mov	qword ptr [rbp - 0x10], rax
0x400081:	nop	
0x400082:	mov	rax, qword ptr [rbp - 0x10]
0x400086:	mov	rdi, rax
0x400089:	call	0x500010
<Block for 0x400067, 2 bytes>
0x400067:	jmp	0x400082
<Block for 0x400104, 2 bytes>
0x400104:	leave	
0x400105:	ret	
<Block for 0x40008e, 2 bytes>
0x40008e:	jmp	0x400104
