<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x80], 0
0x400023:	mov	eax, dword ptr [rip + 0x287]
0x400029:	test	eax, eax
0x40002b:	je	0x400079
<Block for 0x400079, 22 bytes>
0x400079:	lea	rax, [rbp - 0x70]
0x40007d:	mov	edx, 0x63
0x400082:	mov	esi, 0x43
0x400087:	mov	rdi, rax
0x40008a:	call	0x500010
<Block for 0x40002d, 10 bytes>
0x40002d:	mov	edi, 0x64
0x400032:	call	0x500000
<Block for 0x40008f, 28 bytes>
0x40008f:	mov	byte ptr [rbp - 0xd], 0
0x400093:	lea	rcx, [rbp - 0x70]
0x400097:	mov	rax, qword ptr [rbp - 0x80]
0x40009b:	mov	edx, 0x63
0x4000a0:	mov	rsi, rcx
0x4000a3:	mov	rdi, rax
0x4000a6:	call	0x500018
<Block for 0x400037, 11 bytes>
0x400037:	mov	qword ptr [rbp - 0x78], rax
0x40003b:	cmp	qword ptr [rbp - 0x78], 0
0x400040:	jne	0x40004c
<Block for 0x4000ab, 23 bytes>
0x4000ab:	mov	rax, qword ptr [rbp - 0x80]
0x4000af:	add	rax, 0x63
0x4000b3:	mov	byte ptr [rax], 0
0x4000b6:	mov	rax, qword ptr [rbp - 0x80]
0x4000ba:	mov	rdi, rax
0x4000bd:	call	0x500020
<Block for 0x400042, 10 bytes>
0x400042:	mov	edi, 0xffffffff
0x400047:	call	0x500008
<Block for 0x40004c, 22 bytes>
0x40004c:	mov	rax, qword ptr [rbp - 0x78]
0x400050:	mov	edx, 0x63
0x400055:	mov	esi, 0x41
0x40005a:	mov	rdi, rax
0x40005d:	call	0x500010
<Block for 0x4000c2, 16 bytes>
0x4000c2:	nop	
0x4000c3:	mov	rax, qword ptr [rbp - 8]
0x4000c7:	xor	rax, qword ptr fs:[0x28]
0x4000d0:	je	0x4000d7
<Block for 0x400062, 45 bytes>
0x400062:	mov	rax, qword ptr [rbp - 0x78]
0x400066:	add	rax, 0x63
0x40006a:	mov	byte ptr [rax], 0
0x40006d:	mov	rax, qword ptr [rbp - 0x78]
0x400071:	sub	rax, 8
0x400075:	mov	qword ptr [rbp - 0x80], rax
0x400079:	lea	rax, [rbp - 0x70]
0x40007d:	mov	edx, 0x63
0x400082:	mov	esi, 0x43
0x400087:	mov	rdi, rax
0x40008a:	call	0x500010
<Block for 0x4000d7, 2 bytes>
0x4000d7:	leave	
0x4000d8:	ret	
<Block for 0x4000d2, 5 bytes>
0x4000d2:	call	0x500028
