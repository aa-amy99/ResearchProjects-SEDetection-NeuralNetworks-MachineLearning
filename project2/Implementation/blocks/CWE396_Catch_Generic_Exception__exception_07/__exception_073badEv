<Block for 0x400000, 32 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r13
0x40000a:	push	r12
0x40000c:	push	rbx
0x40000d:	sub	rsp, 0x18
0x400011:	mov	eax, dword ptr [rip + 0x44d]
0x400017:	cmp	eax, 5
0x40001a:	jne	0x400136
<Block for 0x400020, 5 bytes>
0x400020:	call	0x500000
<Block for 0x400136, 12 bytes>
0x400136:	nop	
0x400137:	add	rsp, 0x18
0x40013b:	pop	rbx
0x40013c:	pop	r12
0x40013e:	pop	r13
0x400140:	pop	rbp
0x400141:	ret	
<Block for 0x400025, 12 bytes>
0x400025:	and	eax, 1
0x400028:	test	eax, eax
0x40002a:	sete	al
0x40002d:	test	al, al
0x40002f:	je	0x400066
<Block for 0x400066, 5 bytes>
0x400066:	call	0x500000
<Block for 0x400031, 10 bytes>
0x400031:	mov	edi, 0x10
0x400036:	call	0x500008
<Block for 0x40006b, 12 bytes>
0x40006b:	and	eax, 1
0x40006e:	test	eax, eax
0x400070:	sete	al
0x400073:	test	al, al
0x400075:	je	0x4000ac
<Block for 0x40003b, 18 bytes>
0x40003b:	mov	rbx, rax
0x40003e:	lea	rsi, [rip + 0x424]
0x400045:	mov	rdi, rbx
0x400048:	call	0x500010
<Block for 0x4000ac, 12 bytes>
0x4000ac:	lea	rdi, [rip + 0x3c0]
0x4000b3:	call	0x500058
<Block for 0x400077, 10 bytes>
0x400077:	mov	edi, 0x10
0x40007c:	call	0x500008
<Block for 0x40004d, 25 bytes>
0x40004d:	mov	rax, qword ptr [rip + 0xfffcc]
0x400054:	mov	rdx, rax
0x400057:	lea	rsi, [rip + 0xfffca]
0x40005e:	mov	rdi, rbx
0x400061:	call	0x500030
<Block for 0x4000b8, 2 bytes>
0x4000b8:	jmp	0x400136
<Block for 0x400081, 18 bytes>
0x400081:	mov	rbx, rax
0x400084:	lea	rsi, [rip + 0x3e3]
0x40008b:	mov	rdi, rbx
0x40008e:	call	0x500038
<Block for 0x400093, 25 bytes>
0x400093:	mov	rax, qword ptr [rip + 0xfffae]
0x40009a:	mov	rdx, rax
0x40009d:	lea	rsi, [rip + 0xfffac]
0x4000a4:	mov	rdi, rbx
0x4000a7:	call	0x500030
