<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x68
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x50]
0x400020:	mov	rdi, rax
0x400023:	call	0x400536
<Block for 0x400028, 54 bytes>
0x400028:	mov	eax, 0x10
0x40002d:	sub	rax, 1
0x400031:	add	rax, 0x3a
0x400035:	mov	ebx, 0x10
0x40003a:	mov	edx, 0
0x40003f:	div	rbx
0x400042:	imul	rax, rax, 0x10
0x400046:	mov	rdx, rax
0x400049:	and	rdx, 0xfffffffffffff000
0x400050:	mov	rcx, rsp
0x400053:	sub	rcx, rdx
0x400056:	mov	rdx, rcx
0x400059:	cmp	rsp, rdx
0x40005c:	je	0x400070
<Block for 0x400070, 26 bytes>
0x400070:	mov	rdx, rax
0x400073:	and	edx, 0xfff
0x400079:	sub	rsp, rdx
0x40007c:	mov	rdx, rax
0x40007f:	and	edx, 0xfff
0x400085:	test	rdx, rdx
0x400088:	je	0x40009a
<Block for 0x40005e, 18 bytes>
0x40005e:	sub	rsp, 0x1000
0x400065:	or	qword ptr [rsp + 0xff8], 0
0x40006e:	jmp	0x400059
<Block for 0x40009a, 73 bytes>
0x40009a:	mov	rax, rsp
0x40009d:	add	rax, 0xf
0x4000a1:	shr	rax, 4
0x4000a5:	shl	rax, 4
0x4000a9:	mov	qword ptr [rbp - 0x60], rax
0x4000ad:	mov	eax, 0x10
0x4000b2:	sub	rax, 1
0x4000b6:	add	rax, 0x6c
0x4000ba:	mov	ecx, 0x10
0x4000bf:	mov	edx, 0
0x4000c4:	div	rcx
0x4000c7:	imul	rax, rax, 0x10
0x4000cb:	mov	rdx, rax
0x4000ce:	and	rdx, 0xfffffffffffff000
0x4000d5:	mov	rcx, rsp
0x4000d8:	sub	rcx, rdx
0x4000db:	mov	rdx, rcx
0x4000de:	cmp	rsp, rdx
0x4000e1:	je	0x4000f5
<Block for 0x40008a, 89 bytes>
0x40008a:	and	eax, 0xfff
0x40008f:	sub	rax, 8
0x400093:	add	rax, rsp
0x400096:	or	qword ptr [rax], 0
0x40009a:	mov	rax, rsp
0x40009d:	add	rax, 0xf
0x4000a1:	shr	rax, 4
0x4000a5:	shl	rax, 4
0x4000a9:	mov	qword ptr [rbp - 0x60], rax
0x4000ad:	mov	eax, 0x10
0x4000b2:	sub	rax, 1
0x4000b6:	add	rax, 0x6c
0x4000ba:	mov	ecx, 0x10
0x4000bf:	mov	edx, 0
0x4000c4:	div	rcx
0x4000c7:	imul	rax, rax, 0x10
0x4000cb:	mov	rdx, rax
0x4000ce:	and	rdx, 0xfffffffffffff000
0x4000d5:	mov	rcx, rsp
0x4000d8:	sub	rcx, rdx
0x4000db:	mov	rdx, rcx
0x4000de:	cmp	rsp, rdx
0x4000e1:	je	0x4000f5
<Block for 0x400059, 5 bytes>
0x400059:	cmp	rsp, rdx
0x40005c:	je	0x400070
<Block for 0x4000f5, 26 bytes>
0x4000f5:	mov	rdx, rax
0x4000f8:	and	edx, 0xfff
0x4000fe:	sub	rsp, rdx
0x400101:	mov	rdx, rax
0x400104:	and	edx, 0xfff
0x40010a:	test	rdx, rdx
0x40010d:	je	0x40011f
<Block for 0x4000e3, 18 bytes>
0x4000e3:	sub	rsp, 0x1000
0x4000ea:	or	qword ptr [rsp + 0xff8], 0
0x4000f3:	jmp	0x4000de
<Block for 0x40011f, 41 bytes>
0x40011f:	mov	rax, rsp
0x400122:	add	rax, 0xf
0x400126:	shr	rax, 4
0x40012a:	shl	rax, 4
0x40012e:	mov	qword ptr [rbp - 0x58], rax
0x400132:	mov	rax, qword ptr [rbp - 0x60]
0x400136:	mov	edx, 0x31
0x40013b:	mov	esi, 0x41
0x400140:	mov	rdi, rax
0x400143:	call	0x500000
<Block for 0x40010f, 57 bytes>
0x40010f:	and	eax, 0xfff
0x400114:	sub	rax, 8
0x400118:	add	rax, rsp
0x40011b:	or	qword ptr [rax], 0
0x40011f:	mov	rax, rsp
0x400122:	add	rax, 0xf
0x400126:	shr	rax, 4
0x40012a:	shl	rax, 4
0x40012e:	mov	qword ptr [rbp - 0x58], rax
0x400132:	mov	rax, qword ptr [rbp - 0x60]
0x400136:	mov	edx, 0x31
0x40013b:	mov	esi, 0x41
0x400140:	mov	rdi, rax
0x400143:	call	0x500000
<Block for 0x4000de, 5 bytes>
0x4000de:	cmp	rsp, rdx
0x4000e1:	je	0x4000f5
<Block for 0x400148, 33 bytes>
0x400148:	mov	rax, qword ptr [rbp - 0x60]
0x40014c:	add	rax, 0x31
0x400150:	mov	byte ptr [rax], 0
0x400153:	mov	rax, qword ptr [rbp - 0x58]
0x400157:	mov	edx, 0x63
0x40015c:	mov	esi, 0x41
0x400161:	mov	rdi, rax
0x400164:	call	0x500000
<Block for 0x400169, 38 bytes>
0x400169:	mov	rax, qword ptr [rbp - 0x58]
0x40016d:	add	rax, 0x63
0x400171:	mov	byte ptr [rax], 0
0x400174:	mov	rax, qword ptr [rbp - 0x60]
0x400178:	mov	qword ptr [rbp - 0x68], rax
0x40017c:	lea	rdx, [rbp - 0x68]
0x400180:	lea	rax, [rbp - 0x50]
0x400184:	mov	rsi, rdx
0x400187:	mov	rdi, rax
0x40018a:	call	0x40062e
<Block for 0x40018f, 19 bytes>
0x40018f:	lea	rdx, [rbp - 0x68]
0x400193:	lea	rax, [rbp - 0x50]
0x400197:	mov	rsi, rdx
0x40019a:	mov	rdi, rax
0x40019d:	call	0x40062e
<Block for 0x4001a2, 19 bytes>
0x4001a2:	lea	rdx, [rbp - 0x68]
0x4001a6:	lea	rax, [rbp - 0x50]
0x4001aa:	mov	rsi, rdx
0x4001ad:	mov	rdi, rax
0x4001b0:	call	0x40062e
<Block for 0x4001b5, 19 bytes>
0x4001b5:	lea	rdx, [rbp - 0x50]
0x4001b9:	lea	rax, [rbp - 0x30]
0x4001bd:	mov	rsi, rdx
0x4001c0:	mov	rdi, rax
0x4001c3:	call	0x400668
<Block for 0x4001c8, 12 bytes>
0x4001c8:	lea	rax, [rbp - 0x30]
0x4001cc:	mov	rdi, rax
0x4001cf:	call	0x500008
<Block for 0x4001d4, 12 bytes>
0x4001d4:	lea	rax, [rbp - 0x30]
0x4001d8:	mov	rdi, rax
0x4001db:	call	0x400556
<Block for 0x4001e0, 12 bytes>
0x4001e0:	lea	rax, [rbp - 0x50]
0x4001e4:	mov	rdi, rax
0x4001e7:	call	0x400556
<Block for 0x4001ec, 16 bytes>
0x4001ec:	nop	
0x4001ed:	mov	rax, qword ptr [rbp - 0x18]
0x4001f1:	xor	rax, qword ptr fs:[0x28]
0x4001fa:	je	0x400236
<Block for 0x400236, 6 bytes>
0x400236:	mov	rbx, qword ptr [rbp - 8]
0x40023a:	leave	
0x40023b:	ret	
<Block for 0x4001fc, 2 bytes>
0x4001fc:	jmp	0x400231
<Block for 0x400231, 5 bytes>
0x400231:	call	0x500018
