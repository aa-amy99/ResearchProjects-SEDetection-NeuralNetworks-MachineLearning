<Block for 0x400056, 50 bytes>
0x400056:	endbr64	
0x40005a:	push	rbp
0x40005b:	mov	rbp, rsp
0x40005e:	sub	rsp, 0x90
0x400065:	mov	rax, qword ptr fs:[0x28]
0x40006e:	mov	qword ptr [rbp - 8], rax
0x400072:	xor	eax, eax
0x400074:	mov	qword ptr [rbp - 0x80], 0
0x40007c:	mov	rax, qword ptr [rbp - 0x80]
0x400080:	mov	rdi, rax
0x400083:	call	0x400000
<Block for 0x400088, 26 bytes>
0x400088:	mov	qword ptr [rbp - 0x80], rax
0x40008c:	lea	rax, [rbp - 0x70]
0x400090:	mov	edx, 0x63
0x400095:	mov	esi, 0x43
0x40009a:	mov	rdi, rax
0x40009d:	call	0x500010
<Block for 0x4000a2, 16 bytes>
0x4000a2:	mov	byte ptr [rbp - 0xd], 0
0x4000a6:	lea	rax, [rbp - 0x70]
0x4000aa:	mov	rdi, rax
0x4000ad:	call	0x500018
<Block for 0x4000b2, 17 bytes>
0x4000b2:	mov	qword ptr [rbp - 0x78], rax
0x4000b6:	mov	qword ptr [rbp - 0x88], 0
0x4000c1:	jmp	0x4000ec
<Block for 0x4000ec, 13 bytes>
0x4000ec:	mov	rax, qword ptr [rbp - 0x88]
0x4000f3:	cmp	rax, qword ptr [rbp - 0x78]
0x4000f7:	jb	0x4000c3
<Block for 0x4000c3, 54 bytes>
0x4000c3:	mov	rdx, qword ptr [rbp - 0x80]
0x4000c7:	mov	rax, qword ptr [rbp - 0x88]
0x4000ce:	add	rax, rdx
0x4000d1:	movzx	eax, byte ptr [rax]
0x4000d4:	lea	rcx, [rbp - 0x70]
0x4000d8:	mov	rdx, qword ptr [rbp - 0x88]
0x4000df:	add	rdx, rcx
0x4000e2:	mov	byte ptr [rdx], al
0x4000e4:	add	qword ptr [rbp - 0x88], 1
0x4000ec:	mov	rax, qword ptr [rbp - 0x88]
0x4000f3:	cmp	rax, qword ptr [rbp - 0x78]
0x4000f7:	jb	0x4000c3
<Block for 0x4000f9, 16 bytes>
0x4000f9:	mov	byte ptr [rbp - 0xd], 0
0x4000fd:	lea	rax, [rbp - 0x70]
0x400101:	mov	rdi, rax
0x400104:	call	0x500020
<Block for 0x400109, 12 bytes>
0x400109:	mov	rax, qword ptr [rbp - 0x80]
0x40010d:	mov	rdi, rax
0x400110:	call	0x500028
<Block for 0x400115, 16 bytes>
0x400115:	nop	
0x400116:	mov	rax, qword ptr [rbp - 8]
0x40011a:	xor	rax, qword ptr fs:[0x28]
0x400123:	je	0x40012a
<Block for 0x40012a, 2 bytes>
0x40012a:	leave	
0x40012b:	ret	
<Block for 0x400125, 5 bytes>
0x400125:	call	0x500030
