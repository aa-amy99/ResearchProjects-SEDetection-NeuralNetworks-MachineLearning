<Block for 0x40027e, 81 bytes>
0x40027e:	endbr64	
0x400282:	push	rbp
0x400283:	mov	rbp, rsp
0x400286:	add	rsp, -0x80
0x40028a:	mov	rax, qword ptr fs:[0x28]
0x400293:	mov	qword ptr [rbp - 8], rax
0x400297:	xor	eax, eax
0x400299:	mov	eax, 0x10
0x40029e:	sub	rax, 1
0x4002a2:	add	rax, 0x6c
0x4002a6:	mov	esi, 0x10
0x4002ab:	mov	edx, 0
0x4002b0:	div	rsi
0x4002b3:	imul	rax, rax, 0x10
0x4002b7:	mov	rdx, rax
0x4002ba:	and	rdx, 0xfffffffffffff000
0x4002c1:	mov	rcx, rsp
0x4002c4:	sub	rcx, rdx
0x4002c7:	mov	rdx, rcx
0x4002ca:	cmp	rsp, rdx
0x4002cd:	je	0x4002e1
<Block for 0x4002e1, 26 bytes>
0x4002e1:	mov	rdx, rax
0x4002e4:	and	edx, 0xfff
0x4002ea:	sub	rsp, rdx
0x4002ed:	mov	rdx, rax
0x4002f0:	and	edx, 0xfff
0x4002f6:	test	rdx, rdx
0x4002f9:	je	0x40030b
<Block for 0x4002cf, 18 bytes>
0x4002cf:	sub	rsp, 0x1000
0x4002d6:	or	qword ptr [rsp + 0xff8], 0
0x4002df:	jmp	0x4002ca
<Block for 0x40030b, 41 bytes>
0x40030b:	mov	rax, rsp
0x40030e:	add	rax, 0xf
0x400312:	shr	rax, 4
0x400316:	shl	rax, 4
0x40031a:	mov	qword ptr [rbp - 0x78], rax
0x40031e:	mov	rax, qword ptr [rbp - 0x78]
0x400322:	mov	edx, 0x63
0x400327:	mov	esi, 0x41
0x40032c:	mov	rdi, rax
0x40032f:	call	0x500000
<Block for 0x4002fb, 57 bytes>
0x4002fb:	and	eax, 0xfff
0x400300:	sub	rax, 8
0x400304:	add	rax, rsp
0x400307:	or	qword ptr [rax], 0
0x40030b:	mov	rax, rsp
0x40030e:	add	rax, 0xf
0x400312:	shr	rax, 4
0x400316:	shl	rax, 4
0x40031a:	mov	qword ptr [rbp - 0x78], rax
0x40031e:	mov	rax, qword ptr [rbp - 0x78]
0x400322:	mov	edx, 0x63
0x400327:	mov	esi, 0x41
0x40032c:	mov	rdi, rax
0x40032f:	call	0x500000
<Block for 0x4002ca, 5 bytes>
0x4002ca:	cmp	rsp, rdx
0x4002cd:	je	0x4002e1
<Block for 0x400334, 21 bytes>
0x400334:	mov	rax, qword ptr [rbp - 0x78]
0x400338:	add	rax, 0x63
0x40033c:	mov	byte ptr [rax], 0
0x40033f:	mov	eax, dword ptr [rip + 0x8f]
0x400345:	test	eax, eax
0x400347:	je	0x400351
<Block for 0x400351, 22 bytes>
0x400351:	lea	rax, [rbp - 0x70]
0x400355:	mov	edx, 0x63
0x40035a:	mov	esi, 0x43
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x400349, 30 bytes>
0x400349:	mov	rax, qword ptr [rbp - 0x78]
0x40034d:	mov	qword ptr [rbp - 0x80], rax
0x400351:	lea	rax, [rbp - 0x70]
0x400355:	mov	edx, 0x63
0x40035a:	mov	esi, 0x43
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x400367, 16 bytes>
0x400367:	mov	byte ptr [rbp - 0xd], 0
0x40036b:	lea	rax, [rbp - 0x70]
0x40036f:	mov	rdi, rax
0x400372:	call	0x500008
<Block for 0x400377, 22 bytes>
0x400377:	mov	rdx, rax
0x40037a:	mov	rcx, qword ptr [rbp - 0x80]
0x40037e:	lea	rax, [rbp - 0x70]
0x400382:	mov	rsi, rcx
0x400385:	mov	rdi, rax
0x400388:	call	0x500010
<Block for 0x40038d, 16 bytes>
0x40038d:	mov	byte ptr [rbp - 0xd], 0
0x400391:	lea	rax, [rbp - 0x70]
0x400395:	mov	rdi, rax
0x400398:	call	0x500018
<Block for 0x40039d, 16 bytes>
0x40039d:	nop	
0x40039e:	mov	rax, qword ptr [rbp - 8]
0x4003a2:	xor	rax, qword ptr fs:[0x28]
0x4003ab:	je	0x4003b2
<Block for 0x4003b2, 2 bytes>
0x4003b2:	leave	
0x4003b3:	ret	
<Block for 0x4003ad, 5 bytes>
0x4003ad:	call	0x500020
