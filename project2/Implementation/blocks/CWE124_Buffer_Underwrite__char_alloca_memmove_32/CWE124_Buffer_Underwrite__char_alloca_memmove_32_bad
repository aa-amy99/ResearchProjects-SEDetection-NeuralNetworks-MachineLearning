<Block for 0x400000, 112 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xa0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xa0]
0x400025:	mov	qword ptr [rbp - 0x98], rax
0x40002c:	lea	rax, [rbp - 0xa0]
0x400033:	mov	qword ptr [rbp - 0x90], rax
0x40003a:	mov	eax, 0x10
0x40003f:	sub	rax, 1
0x400043:	add	rax, 0x6c
0x400047:	mov	esi, 0x10
0x40004c:	mov	edx, 0
0x400051:	div	rsi
0x400054:	imul	rax, rax, 0x10
0x400058:	mov	rdx, rax
0x40005b:	and	rdx, 0xfffffffffffff000
0x400062:	mov	rcx, rsp
0x400065:	sub	rcx, rdx
0x400068:	mov	rdx, rcx
0x40006b:	cmp	rsp, rdx
0x40006e:	je	0x400082
<Block for 0x400082, 26 bytes>
0x400082:	mov	rdx, rax
0x400085:	and	edx, 0xfff
0x40008b:	sub	rsp, rdx
0x40008e:	mov	rdx, rax
0x400091:	and	edx, 0xfff
0x400097:	test	rdx, rdx
0x40009a:	je	0x4000ac
<Block for 0x400070, 18 bytes>
0x400070:	sub	rsp, 0x1000
0x400077:	or	qword ptr [rsp + 0xff8], 0
0x400080:	jmp	0x40006b
<Block for 0x4000ac, 47 bytes>
0x4000ac:	mov	rax, rsp
0x4000af:	add	rax, 0xf
0x4000b3:	shr	rax, 4
0x4000b7:	shl	rax, 4
0x4000bb:	mov	qword ptr [rbp - 0x88], rax
0x4000c2:	mov	rax, qword ptr [rbp - 0x88]
0x4000c9:	mov	edx, 0x63
0x4000ce:	mov	esi, 0x41
0x4000d3:	mov	rdi, rax
0x4000d6:	call	0x500000
<Block for 0x40009c, 63 bytes>
0x40009c:	and	eax, 0xfff
0x4000a1:	sub	rax, 8
0x4000a5:	add	rax, rsp
0x4000a8:	or	qword ptr [rax], 0
0x4000ac:	mov	rax, rsp
0x4000af:	add	rax, 0xf
0x4000b3:	shr	rax, 4
0x4000b7:	shl	rax, 4
0x4000bb:	mov	qword ptr [rbp - 0x88], rax
0x4000c2:	mov	rax, qword ptr [rbp - 0x88]
0x4000c9:	mov	edx, 0x63
0x4000ce:	mov	esi, 0x41
0x4000d3:	mov	rdi, rax
0x4000d6:	call	0x500000
<Block for 0x40006b, 5 bytes>
0x40006b:	cmp	rsp, rdx
0x40006e:	je	0x400082
<Block for 0x4000db, 93 bytes>
0x4000db:	mov	rax, qword ptr [rbp - 0x88]
0x4000e2:	add	rax, 0x63
0x4000e6:	mov	byte ptr [rax], 0
0x4000e9:	mov	rax, qword ptr [rbp - 0x98]
0x4000f0:	mov	rax, qword ptr [rax]
0x4000f3:	mov	qword ptr [rbp - 0x80], rax
0x4000f7:	mov	rax, qword ptr [rbp - 0x88]
0x4000fe:	sub	rax, 8
0x400102:	mov	qword ptr [rbp - 0x80], rax
0x400106:	mov	rax, qword ptr [rbp - 0x98]
0x40010d:	mov	rdx, qword ptr [rbp - 0x80]
0x400111:	mov	qword ptr [rax], rdx
0x400114:	mov	rax, qword ptr [rbp - 0x90]
0x40011b:	mov	rax, qword ptr [rax]
0x40011e:	mov	qword ptr [rbp - 0x78], rax
0x400122:	lea	rax, [rbp - 0x70]
0x400126:	mov	edx, 0x63
0x40012b:	mov	esi, 0x43
0x400130:	mov	rdi, rax
0x400133:	call	0x500000
<Block for 0x400138, 28 bytes>
0x400138:	mov	byte ptr [rbp - 0xd], 0
0x40013c:	lea	rcx, [rbp - 0x70]
0x400140:	mov	rax, qword ptr [rbp - 0x78]
0x400144:	mov	edx, 0x64
0x400149:	mov	rsi, rcx
0x40014c:	mov	rdi, rax
0x40014f:	call	0x500008
<Block for 0x400154, 23 bytes>
0x400154:	mov	rax, qword ptr [rbp - 0x78]
0x400158:	add	rax, 0x63
0x40015c:	mov	byte ptr [rax], 0
0x40015f:	mov	rax, qword ptr [rbp - 0x78]
0x400163:	mov	rdi, rax
0x400166:	call	0x500010
<Block for 0x40016b, 16 bytes>
0x40016b:	nop	
0x40016c:	mov	rax, qword ptr [rbp - 8]
0x400170:	xor	rax, qword ptr fs:[0x28]
0x400179:	je	0x400180
<Block for 0x400180, 2 bytes>
0x400180:	leave	
0x400181:	ret	
<Block for 0x40017b, 5 bytes>
0x40017b:	call	0x500018
