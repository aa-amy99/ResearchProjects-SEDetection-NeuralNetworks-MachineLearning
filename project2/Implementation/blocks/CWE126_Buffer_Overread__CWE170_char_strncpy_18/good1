<Block for 0x400084, 60 bytes>
0x400084:	endbr64	
0x400088:	push	rbp
0x400089:	mov	rbp, rsp
0x40008c:	sub	rsp, 0x110
0x400093:	mov	rax, qword ptr fs:[0x28]
0x40009c:	mov	qword ptr [rbp - 8], rax
0x4000a0:	xor	eax, eax
0x4000a2:	nop	
0x4000a3:	endbr64	
0x4000a7:	lea	rax, [rbp - 0xa0]
0x4000ae:	mov	edx, 0x95
0x4000b3:	mov	esi, 0x41
0x4000b8:	mov	rdi, rax
0x4000bb:	call	0x500000
<Block for 0x4000c0, 34 bytes>
0x4000c0:	mov	byte ptr [rbp - 0xb], 0
0x4000c4:	lea	rcx, [rbp - 0xa0]
0x4000cb:	lea	rax, [rbp - 0x110]
0x4000d2:	mov	edx, 0x63
0x4000d7:	mov	rsi, rcx
0x4000da:	mov	rdi, rax
0x4000dd:	call	0x500008
<Block for 0x4000e2, 22 bytes>
0x4000e2:	mov	byte ptr [rbp - 0xad], 0
0x4000e9:	lea	rax, [rbp - 0x110]
0x4000f0:	mov	rdi, rax
0x4000f3:	call	0x500010
<Block for 0x4000f8, 16 bytes>
0x4000f8:	nop	
0x4000f9:	mov	rax, qword ptr [rbp - 8]
0x4000fd:	xor	rax, qword ptr fs:[0x28]
0x400106:	je	0x40010d
<Block for 0x40010d, 2 bytes>
0x40010d:	leave	
0x40010e:	ret	
<Block for 0x400108, 5 bytes>
0x400108:	call	0x500018
