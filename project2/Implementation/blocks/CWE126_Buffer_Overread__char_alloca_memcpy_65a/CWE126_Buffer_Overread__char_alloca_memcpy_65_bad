<Block for 0x400000, 92 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	rax, qword ptr [rip + 0xfffe6]
0x400022:	mov	qword ptr [rbp - 0x28], rax
0x400026:	mov	eax, 0x10
0x40002b:	sub	rax, 1
0x40002f:	add	rax, 0x3a
0x400033:	mov	ecx, 0x10
0x400038:	mov	edx, 0
0x40003d:	div	rcx
0x400040:	imul	rax, rax, 0x10
0x400044:	mov	rdx, rax
0x400047:	and	rdx, 0xfffffffffffff000
0x40004e:	mov	rcx, rsp
0x400051:	sub	rcx, rdx
0x400054:	mov	rdx, rcx
0x400057:	cmp	rsp, rdx
0x40005a:	je	0x40006e
<Block for 0x40006e, 26 bytes>
0x40006e:	mov	rdx, rax
0x400071:	and	edx, 0xfff
0x400077:	sub	rsp, rdx
0x40007a:	mov	rdx, rax
0x40007d:	and	edx, 0xfff
0x400083:	test	rdx, rdx
0x400086:	je	0x400098
<Block for 0x40005c, 18 bytes>
0x40005c:	sub	rsp, 0x1000
0x400063:	or	qword ptr [rsp + 0xff8], 0
0x40006c:	jmp	0x400057
<Block for 0x400098, 73 bytes>
0x400098:	mov	rax, rsp
0x40009b:	add	rax, 0xf
0x40009f:	shr	rax, 4
0x4000a3:	shl	rax, 4
0x4000a7:	mov	qword ptr [rbp - 0x20], rax
0x4000ab:	mov	eax, 0x10
0x4000b0:	sub	rax, 1
0x4000b4:	add	rax, 0x6c
0x4000b8:	mov	edi, 0x10
0x4000bd:	mov	edx, 0
0x4000c2:	div	rdi
0x4000c5:	imul	rax, rax, 0x10
0x4000c9:	mov	rdx, rax
0x4000cc:	and	rdx, 0xfffffffffffff000
0x4000d3:	mov	rsi, rsp
0x4000d6:	sub	rsi, rdx
0x4000d9:	mov	rdx, rsi
0x4000dc:	cmp	rsp, rdx
0x4000df:	je	0x4000f3
<Block for 0x400088, 89 bytes>
0x400088:	and	eax, 0xfff
0x40008d:	sub	rax, 8
0x400091:	add	rax, rsp
0x400094:	or	qword ptr [rax], 0
0x400098:	mov	rax, rsp
0x40009b:	add	rax, 0xf
0x40009f:	shr	rax, 4
0x4000a3:	shl	rax, 4
0x4000a7:	mov	qword ptr [rbp - 0x20], rax
0x4000ab:	mov	eax, 0x10
0x4000b0:	sub	rax, 1
0x4000b4:	add	rax, 0x6c
0x4000b8:	mov	edi, 0x10
0x4000bd:	mov	edx, 0
0x4000c2:	div	rdi
0x4000c5:	imul	rax, rax, 0x10
0x4000c9:	mov	rdx, rax
0x4000cc:	and	rdx, 0xfffffffffffff000
0x4000d3:	mov	rsi, rsp
0x4000d6:	sub	rsi, rdx
0x4000d9:	mov	rdx, rsi
0x4000dc:	cmp	rsp, rdx
0x4000df:	je	0x4000f3
<Block for 0x400057, 5 bytes>
0x400057:	cmp	rsp, rdx
0x40005a:	je	0x40006e
<Block for 0x4000f3, 26 bytes>
0x4000f3:	mov	rdx, rax
0x4000f6:	and	edx, 0xfff
0x4000fc:	sub	rsp, rdx
0x4000ff:	mov	rdx, rax
0x400102:	and	edx, 0xfff
0x400108:	test	rdx, rdx
0x40010b:	je	0x40011d
<Block for 0x4000e1, 18 bytes>
0x4000e1:	sub	rsp, 0x1000
0x4000e8:	or	qword ptr [rsp + 0xff8], 0
0x4000f1:	jmp	0x4000dc
<Block for 0x40011d, 41 bytes>
0x40011d:	mov	rax, rsp
0x400120:	add	rax, 0xf
0x400124:	shr	rax, 4
0x400128:	shl	rax, 4
0x40012c:	mov	qword ptr [rbp - 0x18], rax
0x400130:	mov	rax, qword ptr [rbp - 0x20]
0x400134:	mov	edx, 0x31
0x400139:	mov	esi, 0x41
0x40013e:	mov	rdi, rax
0x400141:	call	0x500010
<Block for 0x40010d, 57 bytes>
0x40010d:	and	eax, 0xfff
0x400112:	sub	rax, 8
0x400116:	add	rax, rsp
0x400119:	or	qword ptr [rax], 0
0x40011d:	mov	rax, rsp
0x400120:	add	rax, 0xf
0x400124:	shr	rax, 4
0x400128:	shl	rax, 4
0x40012c:	mov	qword ptr [rbp - 0x18], rax
0x400130:	mov	rax, qword ptr [rbp - 0x20]
0x400134:	mov	edx, 0x31
0x400139:	mov	esi, 0x41
0x40013e:	mov	rdi, rax
0x400141:	call	0x500010
<Block for 0x4000dc, 5 bytes>
0x4000dc:	cmp	rsp, rdx
0x4000df:	je	0x4000f3
<Block for 0x400146, 33 bytes>
0x400146:	mov	rax, qword ptr [rbp - 0x20]
0x40014a:	add	rax, 0x31
0x40014e:	mov	byte ptr [rax], 0
0x400151:	mov	rax, qword ptr [rbp - 0x18]
0x400155:	mov	edx, 0x63
0x40015a:	mov	esi, 0x41
0x40015f:	mov	rdi, rax
0x400162:	call	0x500010
<Block for 0x400167, 32 bytes>
0x400167:	mov	rax, qword ptr [rbp - 0x18]
0x40016b:	add	rax, 0x63
0x40016f:	mov	byte ptr [rax], 0
0x400172:	mov	rax, qword ptr [rbp - 0x20]
0x400176:	mov	qword ptr [rbp - 0x10], rax
0x40017a:	mov	rax, qword ptr [rbp - 0x10]
0x40017e:	mov	rdx, qword ptr [rbp - 0x28]
0x400182:	mov	rdi, rax
0x400185:	call	rdx
<Block for 0x400187, 16 bytes>
0x400187:	nop	
0x400188:	mov	rax, qword ptr [rbp - 8]
0x40018c:	xor	rax, qword ptr fs:[0x28]
0x400195:	je	0x40019c
<Block for 0x40019c, 2 bytes>
0x40019c:	leave	
0x40019d:	ret	
<Block for 0x400197, 5 bytes>
0x400197:	call	0x500018
