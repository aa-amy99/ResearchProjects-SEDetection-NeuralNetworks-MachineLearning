<Block for 0x400051, 47 bytes>
0x400051:	endbr64	
0x400055:	push	rbp
0x400056:	mov	rbp, rsp
0x400059:	add	rsp, -0x80
0x40005d:	mov	rax, qword ptr fs:[0x28]
0x400066:	mov	qword ptr [rbp - 8], rax
0x40006a:	xor	eax, eax
0x40006c:	mov	qword ptr [rbp - 0x78], 0
0x400074:	lea	rax, [rbp - 0x78]
0x400078:	mov	rdi, rax
0x40007b:	call	0x400000
<Block for 0x400080, 22 bytes>
0x400080:	lea	rax, [rbp - 0x70]
0x400084:	mov	edx, 0x63
0x400089:	mov	esi, 0x43
0x40008e:	mov	rdi, rax
0x400091:	call	0x500008
<Block for 0x400096, 28 bytes>
0x400096:	mov	byte ptr [rbp - 0xd], 0
0x40009a:	mov	rcx, qword ptr [rbp - 0x78]
0x40009e:	lea	rax, [rbp - 0x70]
0x4000a2:	mov	edx, 0x64
0x4000a7:	mov	rsi, rcx
0x4000aa:	mov	rdi, rax
0x4000ad:	call	0x500010
<Block for 0x4000b2, 16 bytes>
0x4000b2:	mov	byte ptr [rbp - 0xd], 0
0x4000b6:	lea	rax, [rbp - 0x70]
0x4000ba:	mov	rdi, rax
0x4000bd:	call	0x500018
<Block for 0x4000c2, 16 bytes>
0x4000c2:	nop	
0x4000c3:	mov	rax, qword ptr [rbp - 8]
0x4000c7:	xor	rax, qword ptr fs:[0x28]
0x4000d0:	je	0x4000d7
<Block for 0x4000d7, 2 bytes>
0x4000d7:	leave	
0x4000d8:	ret	
<Block for 0x4000d2, 5 bytes>
0x4000d2:	call	0x500020
