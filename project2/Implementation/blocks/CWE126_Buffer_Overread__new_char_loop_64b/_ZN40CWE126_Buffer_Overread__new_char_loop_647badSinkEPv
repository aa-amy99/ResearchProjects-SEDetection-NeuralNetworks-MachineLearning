<Block for 0x400000, 87 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xa0
0x40000f:	mov	qword ptr [rbp - 0x98], rdi
0x400016:	mov	rax, qword ptr fs:[0x28]
0x40001f:	mov	qword ptr [rbp - 8], rax
0x400023:	xor	eax, eax
0x400025:	mov	rax, qword ptr [rbp - 0x98]
0x40002c:	mov	qword ptr [rbp - 0x88], rax
0x400033:	mov	rax, qword ptr [rbp - 0x88]
0x40003a:	mov	rax, qword ptr [rax]
0x40003d:	mov	qword ptr [rbp - 0x80], rax
0x400041:	lea	rax, [rbp - 0x70]
0x400045:	mov	edx, 0x63
0x40004a:	mov	esi, 0x43
0x40004f:	mov	rdi, rax
0x400052:	call	0x500000
<Block for 0x400057, 16 bytes>
0x400057:	mov	byte ptr [rbp - 0xd], 0
0x40005b:	lea	rax, [rbp - 0x70]
0x40005f:	mov	rdi, rax
0x400062:	call	0x500008
<Block for 0x400067, 28 bytes>
0x400067:	mov	qword ptr [rbp - 0x78], rax
0x40006b:	mov	qword ptr [rbp - 0x90], 0
0x400076:	mov	rax, qword ptr [rbp - 0x90]
0x40007d:	cmp	rax, qword ptr [rbp - 0x78]
0x400081:	jae	0x4000ae
<Block for 0x400083, 43 bytes>
0x400083:	mov	rdx, qword ptr [rbp - 0x80]
0x400087:	mov	rax, qword ptr [rbp - 0x90]
0x40008e:	add	rax, rdx
0x400091:	movzx	eax, byte ptr [rax]
0x400094:	lea	rcx, [rbp - 0x70]
0x400098:	mov	rdx, qword ptr [rbp - 0x90]
0x40009f:	add	rdx, rcx
0x4000a2:	mov	byte ptr [rdx], al
0x4000a4:	add	qword ptr [rbp - 0x90], 1
0x4000ac:	jmp	0x400076
<Block for 0x4000ae, 16 bytes>
0x4000ae:	mov	byte ptr [rbp - 0xd], 0
0x4000b2:	lea	rax, [rbp - 0x70]
0x4000b6:	mov	rdi, rax
0x4000b9:	call	0x500010
<Block for 0x400076, 13 bytes>
0x400076:	mov	rax, qword ptr [rbp - 0x90]
0x40007d:	cmp	rax, qword ptr [rbp - 0x78]
0x400081:	jae	0x4000ae
<Block for 0x4000be, 7 bytes>
0x4000be:	cmp	qword ptr [rbp - 0x80], 0
0x4000c3:	je	0x4000d1
<Block for 0x4000d1, 16 bytes>
0x4000d1:	nop	
0x4000d2:	mov	rax, qword ptr [rbp - 8]
0x4000d6:	xor	rax, qword ptr fs:[0x28]
0x4000df:	je	0x4000e6
<Block for 0x4000c5, 12 bytes>
0x4000c5:	mov	rax, qword ptr [rbp - 0x80]
0x4000c9:	mov	rdi, rax
0x4000cc:	call	0x500018
<Block for 0x4000e6, 2 bytes>
0x4000e6:	leave	
0x4000e7:	ret	
<Block for 0x4000e1, 5 bytes>
0x4000e1:	call	0x500020
