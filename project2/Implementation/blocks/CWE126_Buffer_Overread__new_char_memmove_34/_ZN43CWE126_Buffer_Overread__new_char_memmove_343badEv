<Block for 0x400000, 48 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	qword ptr [rbp - 0x80], 0
0x400026:	mov	edi, 0x32
0x40002b:	call	0x500000
<Block for 0x400030, 26 bytes>
0x400030:	mov	qword ptr [rbp - 0x80], rax
0x400034:	mov	rax, qword ptr [rbp - 0x80]
0x400038:	mov	edx, 0x31
0x40003d:	mov	esi, 0x41
0x400042:	mov	rdi, rax
0x400045:	call	0x500008
<Block for 0x40004a, 55 bytes>
0x40004a:	mov	rax, qword ptr [rbp - 0x80]
0x40004e:	add	rax, 0x31
0x400052:	mov	byte ptr [rax], 0
0x400055:	mov	rax, qword ptr [rbp - 0x80]
0x400059:	mov	qword ptr [rbp - 0x88], rax
0x400060:	mov	rax, qword ptr [rbp - 0x88]
0x400067:	mov	qword ptr [rbp - 0x78], rax
0x40006b:	lea	rax, [rbp - 0x70]
0x40006f:	mov	edx, 0x63
0x400074:	mov	esi, 0x43
0x400079:	mov	rdi, rax
0x40007c:	call	0x500008
<Block for 0x400081, 16 bytes>
0x400081:	mov	byte ptr [rbp - 0xd], 0
0x400085:	lea	rax, [rbp - 0x70]
0x400089:	mov	rdi, rax
0x40008c:	call	0x500010
<Block for 0x400091, 22 bytes>
0x400091:	mov	rdx, rax
0x400094:	mov	rcx, qword ptr [rbp - 0x78]
0x400098:	lea	rax, [rbp - 0x70]
0x40009c:	mov	rsi, rcx
0x40009f:	mov	rdi, rax
0x4000a2:	call	0x500018
<Block for 0x4000a7, 16 bytes>
0x4000a7:	mov	byte ptr [rbp - 0xd], 0
0x4000ab:	lea	rax, [rbp - 0x70]
0x4000af:	mov	rdi, rax
0x4000b2:	call	0x500020
<Block for 0x4000b7, 7 bytes>
0x4000b7:	cmp	qword ptr [rbp - 0x78], 0
0x4000bc:	je	0x4000ca
<Block for 0x4000ca, 16 bytes>
0x4000ca:	nop	
0x4000cb:	mov	rax, qword ptr [rbp - 8]
0x4000cf:	xor	rax, qword ptr fs:[0x28]
0x4000d8:	je	0x4000df
<Block for 0x4000be, 12 bytes>
0x4000be:	mov	rax, qword ptr [rbp - 0x78]
0x4000c2:	mov	rdi, rax
0x4000c5:	call	0x500028
<Block for 0x4000df, 2 bytes>
0x4000df:	leave	
0x4000e0:	ret	
<Block for 0x4000da, 5 bytes>
0x4000da:	call	0x500030
