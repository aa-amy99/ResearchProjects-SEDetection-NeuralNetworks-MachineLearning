<Block for 0x400082, 79 bytes>
0x400082:	endbr64	
0x400086:	push	rbp
0x400087:	mov	rbp, rsp
0x40008a:	sub	rsp, 0x20
0x40008e:	mov	rax, qword ptr fs:[0x28]
0x400097:	mov	qword ptr [rbp - 8], rax
0x40009b:	xor	eax, eax
0x40009d:	mov	dword ptr [rbp - 0x1c], 0xffffffff
0x4000a4:	mov	qword ptr [rbp - 0x16], 0
0x4000ac:	mov	dword ptr [rbp - 0xe], 0
0x4000b3:	mov	word ptr [rbp - 0xa], 0
0x4000b9:	mov	rdx, qword ptr [rip + 0xfff58]
0x4000c0:	lea	rax, [rbp - 0x16]
0x4000c4:	mov	esi, 0xe
0x4000c9:	mov	rdi, rax
0x4000cc:	call	0x500020
<Block for 0x4000d1, 10 bytes>
0x4000d1:	test	rax, rax
0x4000d4:	setne	al
0x4000d7:	test	al, al
0x4000d9:	je	0x4000ec
<Block for 0x4000ec, 12 bytes>
0x4000ec:	lea	rdi, [rip + 0xdf]
0x4000f3:	call	0x500030
<Block for 0x4000db, 12 bytes>
0x4000db:	lea	rax, [rbp - 0x16]
0x4000df:	mov	rdi, rax
0x4000e2:	call	0x500028
<Block for 0x4000f8, 10 bytes>
0x4000f8:	mov	eax, dword ptr [rbp - 0x1c]
0x4000fb:	mov	edi, eax
0x4000fd:	call	0x400000
<Block for 0x4000e7, 5 bytes>
0x4000e7:	mov	dword ptr [rbp - 0x1c], eax
0x4000ea:	jmp	0x4000f8
<Block for 0x400102, 16 bytes>
0x400102:	nop	
0x400103:	mov	rax, qword ptr [rbp - 8]
0x400107:	xor	rax, qword ptr fs:[0x28]
0x400110:	je	0x400117
<Block for 0x400117, 2 bytes>
0x400117:	leave	
0x400118:	ret	
<Block for 0x400112, 5 bytes>
0x400112:	call	0x500038
