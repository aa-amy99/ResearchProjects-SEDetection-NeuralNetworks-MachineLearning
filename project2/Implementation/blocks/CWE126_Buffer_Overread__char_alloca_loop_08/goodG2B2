<Block for 0x400475, 84 bytes>
0x400475:	endbr64	
0x400479:	push	rbp
0x40047a:	mov	rbp, rsp
0x40047d:	sub	rsp, 0xa0
0x400484:	mov	rax, qword ptr fs:[0x28]
0x40048d:	mov	qword ptr [rbp - 8], rax
0x400491:	xor	eax, eax
0x400493:	mov	eax, 0x10
0x400498:	sub	rax, 1
0x40049c:	add	rax, 0x3a
0x4004a0:	mov	ecx, 0x10
0x4004a5:	mov	edx, 0
0x4004aa:	div	rcx
0x4004ad:	imul	rax, rax, 0x10
0x4004b1:	mov	rdx, rax
0x4004b4:	and	rdx, 0xfffffffffffff000
0x4004bb:	mov	rcx, rsp
0x4004be:	sub	rcx, rdx
0x4004c1:	mov	rdx, rcx
0x4004c4:	cmp	rsp, rdx
0x4004c7:	je	0x4004db
<Block for 0x4004db, 26 bytes>
0x4004db:	mov	rdx, rax
0x4004de:	and	edx, 0xfff
0x4004e4:	sub	rsp, rdx
0x4004e7:	mov	rdx, rax
0x4004ea:	and	edx, 0xfff
0x4004f0:	test	rdx, rdx
0x4004f3:	je	0x400505
<Block for 0x4004c9, 18 bytes>
0x4004c9:	sub	rsp, 0x1000
0x4004d0:	or	qword ptr [rsp + 0xff8], 0
0x4004d9:	jmp	0x4004c4
<Block for 0x400505, 76 bytes>
0x400505:	mov	rax, rsp
0x400508:	add	rax, 0xf
0x40050c:	shr	rax, 4
0x400510:	shl	rax, 4
0x400514:	mov	qword ptr [rbp - 0x88], rax
0x40051b:	mov	eax, 0x10
0x400520:	sub	rax, 1
0x400524:	add	rax, 0x6c
0x400528:	mov	edi, 0x10
0x40052d:	mov	edx, 0
0x400532:	div	rdi
0x400535:	imul	rax, rax, 0x10
0x400539:	mov	rdx, rax
0x40053c:	and	rdx, 0xfffffffffffff000
0x400543:	mov	rsi, rsp
0x400546:	sub	rsi, rdx
0x400549:	mov	rdx, rsi
0x40054c:	cmp	rsp, rdx
0x40054f:	je	0x400563
<Block for 0x4004f5, 92 bytes>
0x4004f5:	and	eax, 0xfff
0x4004fa:	sub	rax, 8
0x4004fe:	add	rax, rsp
0x400501:	or	qword ptr [rax], 0
0x400505:	mov	rax, rsp
0x400508:	add	rax, 0xf
0x40050c:	shr	rax, 4
0x400510:	shl	rax, 4
0x400514:	mov	qword ptr [rbp - 0x88], rax
0x40051b:	mov	eax, 0x10
0x400520:	sub	rax, 1
0x400524:	add	rax, 0x6c
0x400528:	mov	edi, 0x10
0x40052d:	mov	edx, 0
0x400532:	div	rdi
0x400535:	imul	rax, rax, 0x10
0x400539:	mov	rdx, rax
0x40053c:	and	rdx, 0xfffffffffffff000
0x400543:	mov	rsi, rsp
0x400546:	sub	rsi, rdx
0x400549:	mov	rdx, rsi
0x40054c:	cmp	rsp, rdx
0x40054f:	je	0x400563
<Block for 0x4004c4, 5 bytes>
0x4004c4:	cmp	rsp, rdx
0x4004c7:	je	0x4004db
<Block for 0x400563, 26 bytes>
0x400563:	mov	rdx, rax
0x400566:	and	edx, 0xfff
0x40056c:	sub	rsp, rdx
0x40056f:	mov	rdx, rax
0x400572:	and	edx, 0xfff
0x400578:	test	rdx, rdx
0x40057b:	je	0x40058d
<Block for 0x400551, 18 bytes>
0x400551:	sub	rsp, 0x1000
0x400558:	or	qword ptr [rsp + 0xff8], 0
0x400561:	jmp	0x40054c
<Block for 0x40058d, 44 bytes>
0x40058d:	mov	rax, rsp
0x400590:	add	rax, 0xf
0x400594:	shr	rax, 4
0x400598:	shl	rax, 4
0x40059c:	mov	qword ptr [rbp - 0x80], rax
0x4005a0:	mov	rax, qword ptr [rbp - 0x88]
0x4005a7:	mov	edx, 0x31
0x4005ac:	mov	esi, 0x41
0x4005b1:	mov	rdi, rax
0x4005b4:	call	0x500000
<Block for 0x40057d, 60 bytes>
0x40057d:	and	eax, 0xfff
0x400582:	sub	rax, 8
0x400586:	add	rax, rsp
0x400589:	or	qword ptr [rax], 0
0x40058d:	mov	rax, rsp
0x400590:	add	rax, 0xf
0x400594:	shr	rax, 4
0x400598:	shl	rax, 4
0x40059c:	mov	qword ptr [rbp - 0x80], rax
0x4005a0:	mov	rax, qword ptr [rbp - 0x88]
0x4005a7:	mov	edx, 0x31
0x4005ac:	mov	esi, 0x41
0x4005b1:	mov	rdi, rax
0x4005b4:	call	0x500000
<Block for 0x40054c, 5 bytes>
0x40054c:	cmp	rsp, rdx
0x40054f:	je	0x400563
<Block for 0x4005b9, 36 bytes>
0x4005b9:	mov	rax, qword ptr [rbp - 0x88]
0x4005c0:	add	rax, 0x31
0x4005c4:	mov	byte ptr [rax], 0
0x4005c7:	mov	rax, qword ptr [rbp - 0x80]
0x4005cb:	mov	edx, 0x63
0x4005d0:	mov	esi, 0x41
0x4005d5:	mov	rdi, rax
0x4005d8:	call	0x500000
<Block for 0x4005dd, 21 bytes>
0x4005dd:	mov	rax, qword ptr [rbp - 0x80]
0x4005e1:	add	rax, 0x63
0x4005e5:	mov	byte ptr [rax], 0
0x4005e8:	mov	eax, 0
0x4005ed:	call	0x400000
<Block for 0x4005f2, 4 bytes>
0x4005f2:	test	eax, eax
0x4005f4:	je	0x400601
<Block for 0x400601, 22 bytes>
0x400601:	lea	rax, [rbp - 0x70]
0x400605:	mov	edx, 0x63
0x40060a:	mov	esi, 0x43
0x40060f:	mov	rdi, rax
0x400612:	call	0x500000
<Block for 0x4005f6, 33 bytes>
0x4005f6:	mov	rax, qword ptr [rbp - 0x80]
0x4005fa:	mov	qword ptr [rbp - 0x98], rax
0x400601:	lea	rax, [rbp - 0x70]
0x400605:	mov	edx, 0x63
0x40060a:	mov	esi, 0x43
0x40060f:	mov	rdi, rax
0x400612:	call	0x500000
<Block for 0x400617, 16 bytes>
0x400617:	mov	byte ptr [rbp - 0xd], 0
0x40061b:	lea	rax, [rbp - 0x70]
0x40061f:	mov	rdi, rax
0x400622:	call	0x500008
<Block for 0x400627, 17 bytes>
0x400627:	mov	qword ptr [rbp - 0x78], rax
0x40062b:	mov	qword ptr [rbp - 0x90], 0
0x400636:	jmp	0x400664
<Block for 0x400664, 13 bytes>
0x400664:	mov	rax, qword ptr [rbp - 0x90]
0x40066b:	cmp	rax, qword ptr [rbp - 0x78]
0x40066f:	jb	0x400638
<Block for 0x400638, 57 bytes>
0x400638:	mov	rdx, qword ptr [rbp - 0x98]
0x40063f:	mov	rax, qword ptr [rbp - 0x90]
0x400646:	add	rax, rdx
0x400649:	movzx	eax, byte ptr [rax]
0x40064c:	lea	rcx, [rbp - 0x70]
0x400650:	mov	rdx, qword ptr [rbp - 0x90]
0x400657:	add	rdx, rcx
0x40065a:	mov	byte ptr [rdx], al
0x40065c:	add	qword ptr [rbp - 0x90], 1
0x400664:	mov	rax, qword ptr [rbp - 0x90]
0x40066b:	cmp	rax, qword ptr [rbp - 0x78]
0x40066f:	jb	0x400638
<Block for 0x400671, 16 bytes>
0x400671:	mov	byte ptr [rbp - 0xd], 0
0x400675:	lea	rax, [rbp - 0x70]
0x400679:	mov	rdi, rax
0x40067c:	call	0x500010
<Block for 0x400681, 16 bytes>
0x400681:	nop	
0x400682:	mov	rax, qword ptr [rbp - 8]
0x400686:	xor	rax, qword ptr fs:[0x28]
0x40068f:	je	0x400696
<Block for 0x400696, 2 bytes>
0x400696:	leave	
0x400697:	ret	
<Block for 0x400691, 5 bytes>
0x400691:	call	0x500018
