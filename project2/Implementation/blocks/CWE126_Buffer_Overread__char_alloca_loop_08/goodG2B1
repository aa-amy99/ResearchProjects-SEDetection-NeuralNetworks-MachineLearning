<Block for 0x400244, 84 bytes>
0x400244:	endbr64	
0x400248:	push	rbp
0x400249:	mov	rbp, rsp
0x40024c:	sub	rsp, 0xa0
0x400253:	mov	rax, qword ptr fs:[0x28]
0x40025c:	mov	qword ptr [rbp - 8], rax
0x400260:	xor	eax, eax
0x400262:	mov	eax, 0x10
0x400267:	sub	rax, 1
0x40026b:	add	rax, 0x3a
0x40026f:	mov	ecx, 0x10
0x400274:	mov	edx, 0
0x400279:	div	rcx
0x40027c:	imul	rax, rax, 0x10
0x400280:	mov	rdx, rax
0x400283:	and	rdx, 0xfffffffffffff000
0x40028a:	mov	rcx, rsp
0x40028d:	sub	rcx, rdx
0x400290:	mov	rdx, rcx
0x400293:	cmp	rsp, rdx
0x400296:	je	0x4002aa
<Block for 0x4002aa, 26 bytes>
0x4002aa:	mov	rdx, rax
0x4002ad:	and	edx, 0xfff
0x4002b3:	sub	rsp, rdx
0x4002b6:	mov	rdx, rax
0x4002b9:	and	edx, 0xfff
0x4002bf:	test	rdx, rdx
0x4002c2:	je	0x4002d4
<Block for 0x400298, 18 bytes>
0x400298:	sub	rsp, 0x1000
0x40029f:	or	qword ptr [rsp + 0xff8], 0
0x4002a8:	jmp	0x400293
<Block for 0x4002d4, 76 bytes>
0x4002d4:	mov	rax, rsp
0x4002d7:	add	rax, 0xf
0x4002db:	shr	rax, 4
0x4002df:	shl	rax, 4
0x4002e3:	mov	qword ptr [rbp - 0x88], rax
0x4002ea:	mov	eax, 0x10
0x4002ef:	sub	rax, 1
0x4002f3:	add	rax, 0x6c
0x4002f7:	mov	esi, 0x10
0x4002fc:	mov	edx, 0
0x400301:	div	rsi
0x400304:	imul	rax, rax, 0x10
0x400308:	mov	rdx, rax
0x40030b:	and	rdx, 0xfffffffffffff000
0x400312:	mov	rsi, rsp
0x400315:	sub	rsi, rdx
0x400318:	mov	rdx, rsi
0x40031b:	cmp	rsp, rdx
0x40031e:	je	0x400332
<Block for 0x4002c4, 92 bytes>
0x4002c4:	and	eax, 0xfff
0x4002c9:	sub	rax, 8
0x4002cd:	add	rax, rsp
0x4002d0:	or	qword ptr [rax], 0
0x4002d4:	mov	rax, rsp
0x4002d7:	add	rax, 0xf
0x4002db:	shr	rax, 4
0x4002df:	shl	rax, 4
0x4002e3:	mov	qword ptr [rbp - 0x88], rax
0x4002ea:	mov	eax, 0x10
0x4002ef:	sub	rax, 1
0x4002f3:	add	rax, 0x6c
0x4002f7:	mov	esi, 0x10
0x4002fc:	mov	edx, 0
0x400301:	div	rsi
0x400304:	imul	rax, rax, 0x10
0x400308:	mov	rdx, rax
0x40030b:	and	rdx, 0xfffffffffffff000
0x400312:	mov	rsi, rsp
0x400315:	sub	rsi, rdx
0x400318:	mov	rdx, rsi
0x40031b:	cmp	rsp, rdx
0x40031e:	je	0x400332
<Block for 0x400293, 5 bytes>
0x400293:	cmp	rsp, rdx
0x400296:	je	0x4002aa
<Block for 0x400332, 26 bytes>
0x400332:	mov	rdx, rax
0x400335:	and	edx, 0xfff
0x40033b:	sub	rsp, rdx
0x40033e:	mov	rdx, rax
0x400341:	and	edx, 0xfff
0x400347:	test	rdx, rdx
0x40034a:	je	0x40035c
<Block for 0x400320, 18 bytes>
0x400320:	sub	rsp, 0x1000
0x400327:	or	qword ptr [rsp + 0xff8], 0
0x400330:	jmp	0x40031b
<Block for 0x40035c, 44 bytes>
0x40035c:	mov	rax, rsp
0x40035f:	add	rax, 0xf
0x400363:	shr	rax, 4
0x400367:	shl	rax, 4
0x40036b:	mov	qword ptr [rbp - 0x80], rax
0x40036f:	mov	rax, qword ptr [rbp - 0x88]
0x400376:	mov	edx, 0x31
0x40037b:	mov	esi, 0x41
0x400380:	mov	rdi, rax
0x400383:	call	0x500000
<Block for 0x40034c, 60 bytes>
0x40034c:	and	eax, 0xfff
0x400351:	sub	rax, 8
0x400355:	add	rax, rsp
0x400358:	or	qword ptr [rax], 0
0x40035c:	mov	rax, rsp
0x40035f:	add	rax, 0xf
0x400363:	shr	rax, 4
0x400367:	shl	rax, 4
0x40036b:	mov	qword ptr [rbp - 0x80], rax
0x40036f:	mov	rax, qword ptr [rbp - 0x88]
0x400376:	mov	edx, 0x31
0x40037b:	mov	esi, 0x41
0x400380:	mov	rdi, rax
0x400383:	call	0x500000
<Block for 0x40031b, 5 bytes>
0x40031b:	cmp	rsp, rdx
0x40031e:	je	0x400332
<Block for 0x400388, 36 bytes>
0x400388:	mov	rax, qword ptr [rbp - 0x88]
0x40038f:	add	rax, 0x31
0x400393:	mov	byte ptr [rax], 0
0x400396:	mov	rax, qword ptr [rbp - 0x80]
0x40039a:	mov	edx, 0x63
0x40039f:	mov	esi, 0x41
0x4003a4:	mov	rdi, rax
0x4003a7:	call	0x500000
<Block for 0x4003ac, 21 bytes>
0x4003ac:	mov	rax, qword ptr [rbp - 0x80]
0x4003b0:	add	rax, 0x63
0x4003b4:	mov	byte ptr [rax], 0
0x4003b7:	mov	eax, 0
0x4003bc:	call	0x40000f
<Block for 0x4003c1, 4 bytes>
0x4003c1:	test	eax, eax
0x4003c3:	je	0x4003d3
<Block for 0x4003d3, 33 bytes>
0x4003d3:	mov	rax, qword ptr [rbp - 0x80]
0x4003d7:	mov	qword ptr [rbp - 0x98], rax
0x4003de:	lea	rax, [rbp - 0x70]
0x4003e2:	mov	edx, 0x63
0x4003e7:	mov	esi, 0x43
0x4003ec:	mov	rdi, rax
0x4003ef:	call	0x500000
<Block for 0x4003c5, 12 bytes>
0x4003c5:	lea	rdi, [rip + 0x2eb]
0x4003cc:	call	0x500010
<Block for 0x4003f4, 16 bytes>
0x4003f4:	mov	byte ptr [rbp - 0xd], 0
0x4003f8:	lea	rax, [rbp - 0x70]
0x4003fc:	mov	rdi, rax
0x4003ff:	call	0x500008
<Block for 0x4003d1, 2 bytes>
0x4003d1:	jmp	0x4003de
<Block for 0x400404, 17 bytes>
0x400404:	mov	qword ptr [rbp - 0x78], rax
0x400408:	mov	qword ptr [rbp - 0x90], 0
0x400413:	jmp	0x400441
<Block for 0x4003de, 22 bytes>
0x4003de:	lea	rax, [rbp - 0x70]
0x4003e2:	mov	edx, 0x63
0x4003e7:	mov	esi, 0x43
0x4003ec:	mov	rdi, rax
0x4003ef:	call	0x500000
<Block for 0x400441, 13 bytes>
0x400441:	mov	rax, qword ptr [rbp - 0x90]
0x400448:	cmp	rax, qword ptr [rbp - 0x78]
0x40044c:	jb	0x400415
<Block for 0x400415, 57 bytes>
0x400415:	mov	rdx, qword ptr [rbp - 0x98]
0x40041c:	mov	rax, qword ptr [rbp - 0x90]
0x400423:	add	rax, rdx
0x400426:	movzx	eax, byte ptr [rax]
0x400429:	lea	rcx, [rbp - 0x70]
0x40042d:	mov	rdx, qword ptr [rbp - 0x90]
0x400434:	add	rdx, rcx
0x400437:	mov	byte ptr [rdx], al
0x400439:	add	qword ptr [rbp - 0x90], 1
0x400441:	mov	rax, qword ptr [rbp - 0x90]
0x400448:	cmp	rax, qword ptr [rbp - 0x78]
0x40044c:	jb	0x400415
<Block for 0x40044e, 16 bytes>
0x40044e:	mov	byte ptr [rbp - 0xd], 0
0x400452:	lea	rax, [rbp - 0x70]
0x400456:	mov	rdi, rax
0x400459:	call	0x500010
<Block for 0x40045e, 16 bytes>
0x40045e:	nop	
0x40045f:	mov	rax, qword ptr [rbp - 8]
0x400463:	xor	rax, qword ptr fs:[0x28]
0x40046c:	je	0x400473
<Block for 0x400473, 2 bytes>
0x400473:	leave	
0x400474:	ret	
<Block for 0x40046e, 5 bytes>
0x40046e:	call	0x500018
