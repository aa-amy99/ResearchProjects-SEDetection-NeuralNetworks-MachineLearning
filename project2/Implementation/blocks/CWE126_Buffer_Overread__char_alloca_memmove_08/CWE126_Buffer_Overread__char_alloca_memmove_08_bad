<Block for 0x40001e, 84 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	sub	rsp, 0x90
0x40002d:	mov	rax, qword ptr fs:[0x28]
0x400036:	mov	qword ptr [rbp - 8], rax
0x40003a:	xor	eax, eax
0x40003c:	mov	eax, 0x10
0x400041:	sub	rax, 1
0x400045:	add	rax, 0x3a
0x400049:	mov	ecx, 0x10
0x40004e:	mov	edx, 0
0x400053:	div	rcx
0x400056:	imul	rax, rax, 0x10
0x40005a:	mov	rdx, rax
0x40005d:	and	rdx, 0xfffffffffffff000
0x400064:	mov	rcx, rsp
0x400067:	sub	rcx, rdx
0x40006a:	mov	rdx, rcx
0x40006d:	cmp	rsp, rdx
0x400070:	je	0x400084
<Block for 0x400084, 26 bytes>
0x400084:	mov	rdx, rax
0x400087:	and	edx, 0xfff
0x40008d:	sub	rsp, rdx
0x400090:	mov	rdx, rax
0x400093:	and	edx, 0xfff
0x400099:	test	rdx, rdx
0x40009c:	je	0x4000ae
<Block for 0x400072, 18 bytes>
0x400072:	sub	rsp, 0x1000
0x400079:	or	qword ptr [rsp + 0xff8], 0
0x400082:	jmp	0x40006d
<Block for 0x4000ae, 73 bytes>
0x4000ae:	mov	rax, rsp
0x4000b1:	add	rax, 0xf
0x4000b5:	shr	rax, 4
0x4000b9:	shl	rax, 4
0x4000bd:	mov	qword ptr [rbp - 0x80], rax
0x4000c1:	mov	eax, 0x10
0x4000c6:	sub	rax, 1
0x4000ca:	add	rax, 0x6c
0x4000ce:	mov	edi, 0x10
0x4000d3:	mov	edx, 0
0x4000d8:	div	rdi
0x4000db:	imul	rax, rax, 0x10
0x4000df:	mov	rdx, rax
0x4000e2:	and	rdx, 0xfffffffffffff000
0x4000e9:	mov	rsi, rsp
0x4000ec:	sub	rsi, rdx
0x4000ef:	mov	rdx, rsi
0x4000f2:	cmp	rsp, rdx
0x4000f5:	je	0x400109
<Block for 0x40009e, 89 bytes>
0x40009e:	and	eax, 0xfff
0x4000a3:	sub	rax, 8
0x4000a7:	add	rax, rsp
0x4000aa:	or	qword ptr [rax], 0
0x4000ae:	mov	rax, rsp
0x4000b1:	add	rax, 0xf
0x4000b5:	shr	rax, 4
0x4000b9:	shl	rax, 4
0x4000bd:	mov	qword ptr [rbp - 0x80], rax
0x4000c1:	mov	eax, 0x10
0x4000c6:	sub	rax, 1
0x4000ca:	add	rax, 0x6c
0x4000ce:	mov	edi, 0x10
0x4000d3:	mov	edx, 0
0x4000d8:	div	rdi
0x4000db:	imul	rax, rax, 0x10
0x4000df:	mov	rdx, rax
0x4000e2:	and	rdx, 0xfffffffffffff000
0x4000e9:	mov	rsi, rsp
0x4000ec:	sub	rsi, rdx
0x4000ef:	mov	rdx, rsi
0x4000f2:	cmp	rsp, rdx
0x4000f5:	je	0x400109
<Block for 0x40006d, 5 bytes>
0x40006d:	cmp	rsp, rdx
0x400070:	je	0x400084
<Block for 0x400109, 26 bytes>
0x400109:	mov	rdx, rax
0x40010c:	and	edx, 0xfff
0x400112:	sub	rsp, rdx
0x400115:	mov	rdx, rax
0x400118:	and	edx, 0xfff
0x40011e:	test	rdx, rdx
0x400121:	je	0x400133
<Block for 0x4000f7, 18 bytes>
0x4000f7:	sub	rsp, 0x1000
0x4000fe:	or	qword ptr [rsp + 0xff8], 0
0x400107:	jmp	0x4000f2
<Block for 0x400133, 41 bytes>
0x400133:	mov	rax, rsp
0x400136:	add	rax, 0xf
0x40013a:	shr	rax, 4
0x40013e:	shl	rax, 4
0x400142:	mov	qword ptr [rbp - 0x78], rax
0x400146:	mov	rax, qword ptr [rbp - 0x80]
0x40014a:	mov	edx, 0x31
0x40014f:	mov	esi, 0x41
0x400154:	mov	rdi, rax
0x400157:	call	0x500000
<Block for 0x400123, 57 bytes>
0x400123:	and	eax, 0xfff
0x400128:	sub	rax, 8
0x40012c:	add	rax, rsp
0x40012f:	or	qword ptr [rax], 0
0x400133:	mov	rax, rsp
0x400136:	add	rax, 0xf
0x40013a:	shr	rax, 4
0x40013e:	shl	rax, 4
0x400142:	mov	qword ptr [rbp - 0x78], rax
0x400146:	mov	rax, qword ptr [rbp - 0x80]
0x40014a:	mov	edx, 0x31
0x40014f:	mov	esi, 0x41
0x400154:	mov	rdi, rax
0x400157:	call	0x500000
<Block for 0x4000f2, 5 bytes>
0x4000f2:	cmp	rsp, rdx
0x4000f5:	je	0x400109
<Block for 0x40015c, 33 bytes>
0x40015c:	mov	rax, qword ptr [rbp - 0x80]
0x400160:	add	rax, 0x31
0x400164:	mov	byte ptr [rax], 0
0x400167:	mov	rax, qword ptr [rbp - 0x78]
0x40016b:	mov	edx, 0x63
0x400170:	mov	esi, 0x41
0x400175:	mov	rdi, rax
0x400178:	call	0x500000
<Block for 0x40017d, 21 bytes>
0x40017d:	mov	rax, qword ptr [rbp - 0x78]
0x400181:	add	rax, 0x63
0x400185:	mov	byte ptr [rax], 0
0x400188:	mov	eax, 0
0x40018d:	call	0x400000
<Block for 0x400192, 4 bytes>
0x400192:	test	eax, eax
0x400194:	je	0x4001a1
<Block for 0x4001a1, 22 bytes>
0x4001a1:	lea	rax, [rbp - 0x70]
0x4001a5:	mov	edx, 0x63
0x4001aa:	mov	esi, 0x43
0x4001af:	mov	rdi, rax
0x4001b2:	call	0x500000
<Block for 0x400196, 33 bytes>
0x400196:	mov	rax, qword ptr [rbp - 0x80]
0x40019a:	mov	qword ptr [rbp - 0x88], rax
0x4001a1:	lea	rax, [rbp - 0x70]
0x4001a5:	mov	edx, 0x63
0x4001aa:	mov	esi, 0x43
0x4001af:	mov	rdi, rax
0x4001b2:	call	0x500000
<Block for 0x4001b7, 16 bytes>
0x4001b7:	mov	byte ptr [rbp - 0xd], 0
0x4001bb:	lea	rax, [rbp - 0x70]
0x4001bf:	mov	rdi, rax
0x4001c2:	call	0x500008
<Block for 0x4001c7, 25 bytes>
0x4001c7:	mov	rdx, rax
0x4001ca:	mov	rcx, qword ptr [rbp - 0x88]
0x4001d1:	lea	rax, [rbp - 0x70]
0x4001d5:	mov	rsi, rcx
0x4001d8:	mov	rdi, rax
0x4001db:	call	0x500010
<Block for 0x4001e0, 16 bytes>
0x4001e0:	mov	byte ptr [rbp - 0xd], 0
0x4001e4:	lea	rax, [rbp - 0x70]
0x4001e8:	mov	rdi, rax
0x4001eb:	call	0x500018
<Block for 0x4001f0, 16 bytes>
0x4001f0:	nop	
0x4001f1:	mov	rax, qword ptr [rbp - 8]
0x4001f5:	xor	rax, qword ptr fs:[0x28]
0x4001fe:	je	0x400205
<Block for 0x400205, 2 bytes>
0x400205:	leave	
0x400206:	ret	
<Block for 0x400200, 5 bytes>
0x400200:	call	0x500020
