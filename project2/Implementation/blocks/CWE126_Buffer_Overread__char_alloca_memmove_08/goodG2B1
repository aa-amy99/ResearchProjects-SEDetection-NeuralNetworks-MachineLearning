<Block for 0x400207, 84 bytes>
0x400207:	endbr64	
0x40020b:	push	rbp
0x40020c:	mov	rbp, rsp
0x40020f:	sub	rsp, 0x90
0x400216:	mov	rax, qword ptr fs:[0x28]
0x40021f:	mov	qword ptr [rbp - 8], rax
0x400223:	xor	eax, eax
0x400225:	mov	eax, 0x10
0x40022a:	sub	rax, 1
0x40022e:	add	rax, 0x3a
0x400232:	mov	ecx, 0x10
0x400237:	mov	edx, 0
0x40023c:	div	rcx
0x40023f:	imul	rax, rax, 0x10
0x400243:	mov	rdx, rax
0x400246:	and	rdx, 0xfffffffffffff000
0x40024d:	mov	rcx, rsp
0x400250:	sub	rcx, rdx
0x400253:	mov	rdx, rcx
0x400256:	cmp	rsp, rdx
0x400259:	je	0x40026d
<Block for 0x40026d, 26 bytes>
0x40026d:	mov	rdx, rax
0x400270:	and	edx, 0xfff
0x400276:	sub	rsp, rdx
0x400279:	mov	rdx, rax
0x40027c:	and	edx, 0xfff
0x400282:	test	rdx, rdx
0x400285:	je	0x400297
<Block for 0x40025b, 18 bytes>
0x40025b:	sub	rsp, 0x1000
0x400262:	or	qword ptr [rsp + 0xff8], 0
0x40026b:	jmp	0x400256
<Block for 0x400297, 73 bytes>
0x400297:	mov	rax, rsp
0x40029a:	add	rax, 0xf
0x40029e:	shr	rax, 4
0x4002a2:	shl	rax, 4
0x4002a6:	mov	qword ptr [rbp - 0x80], rax
0x4002aa:	mov	eax, 0x10
0x4002af:	sub	rax, 1
0x4002b3:	add	rax, 0x6c
0x4002b7:	mov	ecx, 0x10
0x4002bc:	mov	edx, 0
0x4002c1:	div	rcx
0x4002c4:	imul	rax, rax, 0x10
0x4002c8:	mov	rdx, rax
0x4002cb:	and	rdx, 0xfffffffffffff000
0x4002d2:	mov	rsi, rsp
0x4002d5:	sub	rsi, rdx
0x4002d8:	mov	rdx, rsi
0x4002db:	cmp	rsp, rdx
0x4002de:	je	0x4002f2
<Block for 0x400287, 89 bytes>
0x400287:	and	eax, 0xfff
0x40028c:	sub	rax, 8
0x400290:	add	rax, rsp
0x400293:	or	qword ptr [rax], 0
0x400297:	mov	rax, rsp
0x40029a:	add	rax, 0xf
0x40029e:	shr	rax, 4
0x4002a2:	shl	rax, 4
0x4002a6:	mov	qword ptr [rbp - 0x80], rax
0x4002aa:	mov	eax, 0x10
0x4002af:	sub	rax, 1
0x4002b3:	add	rax, 0x6c
0x4002b7:	mov	ecx, 0x10
0x4002bc:	mov	edx, 0
0x4002c1:	div	rcx
0x4002c4:	imul	rax, rax, 0x10
0x4002c8:	mov	rdx, rax
0x4002cb:	and	rdx, 0xfffffffffffff000
0x4002d2:	mov	rsi, rsp
0x4002d5:	sub	rsi, rdx
0x4002d8:	mov	rdx, rsi
0x4002db:	cmp	rsp, rdx
0x4002de:	je	0x4002f2
<Block for 0x400256, 5 bytes>
0x400256:	cmp	rsp, rdx
0x400259:	je	0x40026d
<Block for 0x4002f2, 26 bytes>
0x4002f2:	mov	rdx, rax
0x4002f5:	and	edx, 0xfff
0x4002fb:	sub	rsp, rdx
0x4002fe:	mov	rdx, rax
0x400301:	and	edx, 0xfff
0x400307:	test	rdx, rdx
0x40030a:	je	0x40031c
<Block for 0x4002e0, 18 bytes>
0x4002e0:	sub	rsp, 0x1000
0x4002e7:	or	qword ptr [rsp + 0xff8], 0
0x4002f0:	jmp	0x4002db
<Block for 0x40031c, 41 bytes>
0x40031c:	mov	rax, rsp
0x40031f:	add	rax, 0xf
0x400323:	shr	rax, 4
0x400327:	shl	rax, 4
0x40032b:	mov	qword ptr [rbp - 0x78], rax
0x40032f:	mov	rax, qword ptr [rbp - 0x80]
0x400333:	mov	edx, 0x31
0x400338:	mov	esi, 0x41
0x40033d:	mov	rdi, rax
0x400340:	call	0x500000
<Block for 0x40030c, 57 bytes>
0x40030c:	and	eax, 0xfff
0x400311:	sub	rax, 8
0x400315:	add	rax, rsp
0x400318:	or	qword ptr [rax], 0
0x40031c:	mov	rax, rsp
0x40031f:	add	rax, 0xf
0x400323:	shr	rax, 4
0x400327:	shl	rax, 4
0x40032b:	mov	qword ptr [rbp - 0x78], rax
0x40032f:	mov	rax, qword ptr [rbp - 0x80]
0x400333:	mov	edx, 0x31
0x400338:	mov	esi, 0x41
0x40033d:	mov	rdi, rax
0x400340:	call	0x500000
<Block for 0x4002db, 5 bytes>
0x4002db:	cmp	rsp, rdx
0x4002de:	je	0x4002f2
<Block for 0x400345, 33 bytes>
0x400345:	mov	rax, qword ptr [rbp - 0x80]
0x400349:	add	rax, 0x31
0x40034d:	mov	byte ptr [rax], 0
0x400350:	mov	rax, qword ptr [rbp - 0x78]
0x400354:	mov	edx, 0x63
0x400359:	mov	esi, 0x41
0x40035e:	mov	rdi, rax
0x400361:	call	0x500000
<Block for 0x400366, 21 bytes>
0x400366:	mov	rax, qword ptr [rbp - 0x78]
0x40036a:	add	rax, 0x63
0x40036e:	mov	byte ptr [rax], 0
0x400371:	mov	eax, 0
0x400376:	call	0x40000f
<Block for 0x40037b, 4 bytes>
0x40037b:	test	eax, eax
0x40037d:	je	0x40038d
<Block for 0x40038d, 33 bytes>
0x40038d:	mov	rax, qword ptr [rbp - 0x78]
0x400391:	mov	qword ptr [rbp - 0x88], rax
0x400398:	lea	rax, [rbp - 0x70]
0x40039c:	mov	edx, 0x63
0x4003a1:	mov	esi, 0x43
0x4003a6:	mov	rdi, rax
0x4003a9:	call	0x500000
<Block for 0x40037f, 12 bytes>
0x40037f:	lea	rdi, [rip + 0x280]
0x400386:	call	0x500018
<Block for 0x4003ae, 16 bytes>
0x4003ae:	mov	byte ptr [rbp - 0xd], 0
0x4003b2:	lea	rax, [rbp - 0x70]
0x4003b6:	mov	rdi, rax
0x4003b9:	call	0x500008
<Block for 0x40038b, 2 bytes>
0x40038b:	jmp	0x400398
<Block for 0x4003be, 25 bytes>
0x4003be:	mov	rdx, rax
0x4003c1:	mov	rcx, qword ptr [rbp - 0x88]
0x4003c8:	lea	rax, [rbp - 0x70]
0x4003cc:	mov	rsi, rcx
0x4003cf:	mov	rdi, rax
0x4003d2:	call	0x500010
<Block for 0x400398, 22 bytes>
0x400398:	lea	rax, [rbp - 0x70]
0x40039c:	mov	edx, 0x63
0x4003a1:	mov	esi, 0x43
0x4003a6:	mov	rdi, rax
0x4003a9:	call	0x500000
<Block for 0x4003d7, 16 bytes>
0x4003d7:	mov	byte ptr [rbp - 0xd], 0
0x4003db:	lea	rax, [rbp - 0x70]
0x4003df:	mov	rdi, rax
0x4003e2:	call	0x500018
<Block for 0x4003e7, 16 bytes>
0x4003e7:	nop	
0x4003e8:	mov	rax, qword ptr [rbp - 8]
0x4003ec:	xor	rax, qword ptr fs:[0x28]
0x4003f5:	je	0x4003fc
<Block for 0x4003fc, 2 bytes>
0x4003fc:	leave	
0x4003fd:	ret	
<Block for 0x4003f7, 5 bytes>
0x4003f7:	call	0x500020
