<Block for 0x400000, 37 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	eax, 0
0x400020:	call	0x500000
<Block for 0x400025, 4 bytes>
0x400025:	test	eax, eax
0x400027:	je	0x40006f
<Block for 0x40006f, 16 bytes>
0x40006f:	nop	
0x400070:	mov	rax, qword ptr [rbp - 8]
0x400074:	xor	rax, qword ptr fs:[0x28]
0x40007d:	je	0x400084
<Block for 0x400029, 70 bytes>
0x400029:	mov	dword ptr [rbp - 0x20], 1
0x400030:	mov	dword ptr [rbp - 0x1c], 2
0x400037:	mov	dword ptr [rbp - 0x18], 3
0x40003e:	mov	dword ptr [rbp - 0x14], 4
0x400045:	mov	dword ptr [rbp - 0x10], 5
0x40004c:	lea	rax, [rbp - 0x20]
0x400050:	mov	qword ptr [rbp - 0x28], rax
0x400054:	mov	rax, qword ptr [rbp - 0x28]
0x400058:	add	rax, 2
0x40005c:	movzx	eax, byte ptr [rax]
0x40005f:	movsx	eax, al
0x400062:	mov	dword ptr [rbp - 0x2c], eax
0x400065:	mov	eax, dword ptr [rbp - 0x2c]
0x400068:	mov	edi, eax
0x40006a:	call	0x500008
<Block for 0x400084, 2 bytes>
0x400084:	leave	
0x400085:	ret	
<Block for 0x40007f, 5 bytes>
0x40007f:	call	0x500010
