<Block for 0x40014f, 84 bytes>
0x40014f:	endbr64	
0x400153:	push	rbp
0x400154:	mov	rbp, rsp
0x400157:	sub	rsp, 0x90
0x40015e:	mov	rax, qword ptr fs:[0x28]
0x400167:	mov	qword ptr [rbp - 8], rax
0x40016b:	xor	eax, eax
0x40016d:	mov	eax, 0x10
0x400172:	sub	rax, 1
0x400176:	add	rax, 0x6c
0x40017a:	mov	esi, 0x10
0x40017f:	mov	edx, 0
0x400184:	div	rsi
0x400187:	imul	rax, rax, 0x10
0x40018b:	mov	rdx, rax
0x40018e:	and	rdx, 0xfffffffffffff000
0x400195:	mov	rcx, rsp
0x400198:	sub	rcx, rdx
0x40019b:	mov	rdx, rcx
0x40019e:	cmp	rsp, rdx
0x4001a1:	je	0x4001b5
<Block for 0x4001b5, 26 bytes>
0x4001b5:	mov	rdx, rax
0x4001b8:	and	edx, 0xfff
0x4001be:	sub	rsp, rdx
0x4001c1:	mov	rdx, rax
0x4001c4:	and	edx, 0xfff
0x4001ca:	test	rdx, rdx
0x4001cd:	je	0x4001df
<Block for 0x4001a3, 18 bytes>
0x4001a3:	sub	rsp, 0x1000
0x4001aa:	or	qword ptr [rsp + 0xff8], 0
0x4001b3:	jmp	0x40019e
<Block for 0x4001df, 41 bytes>
0x4001df:	mov	rax, rsp
0x4001e2:	add	rax, 0xf
0x4001e6:	shr	rax, 4
0x4001ea:	shl	rax, 4
0x4001ee:	mov	qword ptr [rbp - 0x78], rax
0x4001f2:	mov	rax, qword ptr [rbp - 0x78]
0x4001f6:	mov	edx, 0x63
0x4001fb:	mov	esi, 0x41
0x400200:	mov	rdi, rax
0x400203:	call	0x500000
<Block for 0x4001cf, 57 bytes>
0x4001cf:	and	eax, 0xfff
0x4001d4:	sub	rax, 8
0x4001d8:	add	rax, rsp
0x4001db:	or	qword ptr [rax], 0
0x4001df:	mov	rax, rsp
0x4001e2:	add	rax, 0xf
0x4001e6:	shr	rax, 4
0x4001ea:	shl	rax, 4
0x4001ee:	mov	qword ptr [rbp - 0x78], rax
0x4001f2:	mov	rax, qword ptr [rbp - 0x78]
0x4001f6:	mov	edx, 0x63
0x4001fb:	mov	esi, 0x41
0x400200:	mov	rdi, rax
0x400203:	call	0x500000
<Block for 0x40019e, 5 bytes>
0x40019e:	cmp	rsp, rdx
0x4001a1:	je	0x4001b5
<Block for 0x400208, 23 bytes>
0x400208:	mov	rax, qword ptr [rbp - 0x78]
0x40020c:	add	rax, 0x63
0x400210:	mov	byte ptr [rax], 0
0x400213:	mov	dword ptr [rbp - 0x84], 0
0x40021d:	jmp	0x40022e
<Block for 0x40022e, 9 bytes>
0x40022e:	cmp	dword ptr [rbp - 0x84], 0
0x400235:	jle	0x40021f
<Block for 0x40021f, 24 bytes>
0x40021f:	mov	rax, qword ptr [rbp - 0x78]
0x400223:	mov	qword ptr [rbp - 0x80], rax
0x400227:	add	dword ptr [rbp - 0x84], 1
0x40022e:	cmp	dword ptr [rbp - 0x84], 0
0x400235:	jle	0x40021f
<Block for 0x400237, 22 bytes>
0x400237:	lea	rax, [rbp - 0x70]
0x40023b:	mov	edx, 0x63
0x400240:	mov	esi, 0x43
0x400245:	mov	rdi, rax
0x400248:	call	0x500000
<Block for 0x40024d, 16 bytes>
0x40024d:	mov	byte ptr [rbp - 0xd], 0
0x400251:	lea	rax, [rbp - 0x70]
0x400255:	mov	rdi, rax
0x400258:	call	0x500008
<Block for 0x40025d, 22 bytes>
0x40025d:	mov	rdx, rax
0x400260:	mov	rcx, qword ptr [rbp - 0x80]
0x400264:	lea	rax, [rbp - 0x70]
0x400268:	mov	rsi, rcx
0x40026b:	mov	rdi, rax
0x40026e:	call	0x500010
<Block for 0x400273, 16 bytes>
0x400273:	mov	byte ptr [rbp - 0xd], 0
0x400277:	lea	rax, [rbp - 0x70]
0x40027b:	mov	rdi, rax
0x40027e:	call	0x500018
<Block for 0x400283, 16 bytes>
0x400283:	nop	
0x400284:	mov	rax, qword ptr [rbp - 8]
0x400288:	xor	rax, qword ptr fs:[0x28]
0x400291:	je	0x400298
<Block for 0x400298, 2 bytes>
0x400298:	leave	
0x400299:	ret	
<Block for 0x400293, 5 bytes>
0x400293:	call	0x500020
