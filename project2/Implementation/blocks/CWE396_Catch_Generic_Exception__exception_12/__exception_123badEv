<Block for 0x400000, 22 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r13
0x40000a:	push	r12
0x40000c:	push	rbx
0x40000d:	sub	rsp, 0x28
0x400011:	call	0x500000
<Block for 0x400016, 13 bytes>
0x400016:	test	eax, eax
0x400018:	setne	al
0x40001b:	test	al, al
0x40001d:	je	0x4000c0
<Block for 0x4000c0, 5 bytes>
0x4000c0:	call	0x500008
<Block for 0x400023, 5 bytes>
0x400023:	call	0x500008
<Block for 0x4000c5, 12 bytes>
0x4000c5:	and	eax, 1
0x4000c8:	test	eax, eax
0x4000ca:	sete	al
0x4000cd:	test	al, al
0x4000cf:	je	0x400106
<Block for 0x400028, 12 bytes>
0x400028:	and	eax, 1
0x40002b:	test	eax, eax
0x40002d:	sete	al
0x400030:	test	al, al
0x400032:	je	0x400069
<Block for 0x400106, 5 bytes>
0x400106:	call	0x500008
<Block for 0x4000d1, 10 bytes>
0x4000d1:	mov	edi, 0x10
0x4000d6:	call	0x500010
<Block for 0x400069, 5 bytes>
0x400069:	call	0x500008
<Block for 0x400034, 10 bytes>
0x400034:	mov	edi, 0x10
0x400039:	call	0x500010
<Block for 0x40010b, 12 bytes>
0x40010b:	and	eax, 1
0x40010e:	test	eax, eax
0x400110:	sete	al
0x400113:	test	al, al
0x400115:	je	0x40014c
<Block for 0x4000db, 18 bytes>
0x4000db:	mov	rbx, rax
0x4000de:	lea	rsi, [rip + 0x4af]
0x4000e5:	mov	rdi, rbx
0x4000e8:	call	0x500018
<Block for 0x40006e, 12 bytes>
0x40006e:	and	eax, 1
0x400071:	test	eax, eax
0x400073:	sete	al
0x400076:	test	al, al
0x400078:	je	0x4000af
<Block for 0x40003e, 18 bytes>
0x40003e:	mov	rbx, rax
0x400041:	lea	rsi, [rip + 0x54c]
0x400048:	mov	rdi, rbx
0x40004b:	call	0x500018
<Block for 0x40014c, 12 bytes>
0x40014c:	lea	rdi, [rip + 0x44b]
0x400153:	call	0x500060
<Block for 0x400117, 10 bytes>
0x400117:	mov	edi, 0x10
0x40011c:	call	0x500010
<Block for 0x4000ed, 25 bytes>
0x4000ed:	mov	rax, qword ptr [rip + 0xfff34]
0x4000f4:	mov	rdx, rax
0x4000f7:	lea	rsi, [rip + 0xfff32]
0x4000fe:	mov	rdi, rbx
0x400101:	call	0x500038
<Block for 0x4000af, 12 bytes>
0x4000af:	lea	rdi, [rip + 0x4e8]
0x4000b6:	call	0x500060
<Block for 0x40007a, 10 bytes>
0x40007a:	mov	edi, 0x10
0x40007f:	call	0x500010
<Block for 0x400050, 25 bytes>
0x400050:	mov	rax, qword ptr [rip + 0xfffd1]
0x400057:	mov	rdx, rax
0x40005a:	lea	rsi, [rip + 0xfffcf]
0x400061:	mov	rdi, rbx
0x400064:	call	0x500038
<Block for 0x400158, 5 bytes>
0x400158:	jmp	0x400297
<Block for 0x400121, 18 bytes>
0x400121:	mov	rbx, rax
0x400124:	lea	rsi, [rip + 0x46e]
0x40012b:	mov	rdi, rbx
0x40012e:	call	0x500040
<Block for 0x4000bb, 5 bytes>
0x4000bb:	jmp	0x400297
<Block for 0x400084, 18 bytes>
0x400084:	mov	rbx, rax
0x400087:	lea	rsi, [rip + 0x50b]
0x40008e:	mov	rdi, rbx
0x400091:	call	0x500040
<Block for 0x400297, 11 bytes>
0x400297:	add	rsp, 0x28
0x40029b:	pop	rbx
0x40029c:	pop	r12
0x40029e:	pop	r13
0x4002a0:	pop	rbp
0x4002a1:	ret	
<Block for 0x400133, 25 bytes>
0x400133:	mov	rax, qword ptr [rip + 0xfff16]
0x40013a:	mov	rdx, rax
0x40013d:	lea	rsi, [rip + 0xfff14]
0x400144:	mov	rdi, rbx
0x400147:	call	0x500038
<Block for 0x400096, 25 bytes>
0x400096:	mov	rax, qword ptr [rip + 0xfffb3]
0x40009d:	mov	rdx, rax
0x4000a0:	lea	rsi, [rip + 0xfffb1]
0x4000a7:	mov	rdi, rbx
0x4000aa:	call	0x500038
