<Block for 0x4001f7, 84 bytes>
0x4001f7:	endbr64	
0x4001fb:	push	rbp
0x4001fc:	mov	rbp, rsp
0x4001ff:	sub	rsp, 0x90
0x400206:	mov	rax, qword ptr fs:[0x28]
0x40020f:	mov	qword ptr [rbp - 8], rax
0x400213:	xor	eax, eax
0x400215:	mov	eax, 0x10
0x40021a:	sub	rax, 1
0x40021e:	add	rax, 0x3a
0x400222:	mov	ecx, 0x10
0x400227:	mov	edx, 0
0x40022c:	div	rcx
0x40022f:	imul	rax, rax, 0x10
0x400233:	mov	rdx, rax
0x400236:	and	rdx, 0xfffffffffffff000
0x40023d:	mov	rcx, rsp
0x400240:	sub	rcx, rdx
0x400243:	mov	rdx, rcx
0x400246:	cmp	rsp, rdx
0x400249:	je	0x40025d
<Block for 0x40025d, 26 bytes>
0x40025d:	mov	rdx, rax
0x400260:	and	edx, 0xfff
0x400266:	sub	rsp, rdx
0x400269:	mov	rdx, rax
0x40026c:	and	edx, 0xfff
0x400272:	test	rdx, rdx
0x400275:	je	0x400287
<Block for 0x40024b, 18 bytes>
0x40024b:	sub	rsp, 0x1000
0x400252:	or	qword ptr [rsp + 0xff8], 0
0x40025b:	jmp	0x400246
<Block for 0x400287, 73 bytes>
0x400287:	mov	rax, rsp
0x40028a:	add	rax, 0xf
0x40028e:	shr	rax, 4
0x400292:	shl	rax, 4
0x400296:	mov	qword ptr [rbp - 0x80], rax
0x40029a:	mov	eax, 0x10
0x40029f:	sub	rax, 1
0x4002a3:	add	rax, 0x6c
0x4002a7:	mov	edi, 0x10
0x4002ac:	mov	edx, 0
0x4002b1:	div	rdi
0x4002b4:	imul	rax, rax, 0x10
0x4002b8:	mov	rdx, rax
0x4002bb:	and	rdx, 0xfffffffffffff000
0x4002c2:	mov	rsi, rsp
0x4002c5:	sub	rsi, rdx
0x4002c8:	mov	rdx, rsi
0x4002cb:	cmp	rsp, rdx
0x4002ce:	je	0x4002e2
<Block for 0x400277, 89 bytes>
0x400277:	and	eax, 0xfff
0x40027c:	sub	rax, 8
0x400280:	add	rax, rsp
0x400283:	or	qword ptr [rax], 0
0x400287:	mov	rax, rsp
0x40028a:	add	rax, 0xf
0x40028e:	shr	rax, 4
0x400292:	shl	rax, 4
0x400296:	mov	qword ptr [rbp - 0x80], rax
0x40029a:	mov	eax, 0x10
0x40029f:	sub	rax, 1
0x4002a3:	add	rax, 0x6c
0x4002a7:	mov	edi, 0x10
0x4002ac:	mov	edx, 0
0x4002b1:	div	rdi
0x4002b4:	imul	rax, rax, 0x10
0x4002b8:	mov	rdx, rax
0x4002bb:	and	rdx, 0xfffffffffffff000
0x4002c2:	mov	rsi, rsp
0x4002c5:	sub	rsi, rdx
0x4002c8:	mov	rdx, rsi
0x4002cb:	cmp	rsp, rdx
0x4002ce:	je	0x4002e2
<Block for 0x400246, 5 bytes>
0x400246:	cmp	rsp, rdx
0x400249:	je	0x40025d
<Block for 0x4002e2, 26 bytes>
0x4002e2:	mov	rdx, rax
0x4002e5:	and	edx, 0xfff
0x4002eb:	sub	rsp, rdx
0x4002ee:	mov	rdx, rax
0x4002f1:	and	edx, 0xfff
0x4002f7:	test	rdx, rdx
0x4002fa:	je	0x40030c
<Block for 0x4002d0, 18 bytes>
0x4002d0:	sub	rsp, 0x1000
0x4002d7:	or	qword ptr [rsp + 0xff8], 0
0x4002e0:	jmp	0x4002cb
<Block for 0x40030c, 41 bytes>
0x40030c:	mov	rax, rsp
0x40030f:	add	rax, 0xf
0x400313:	shr	rax, 4
0x400317:	shl	rax, 4
0x40031b:	mov	qword ptr [rbp - 0x78], rax
0x40031f:	mov	rax, qword ptr [rbp - 0x80]
0x400323:	mov	edx, 0x31
0x400328:	mov	esi, 0x41
0x40032d:	mov	rdi, rax
0x400330:	call	0x500000
<Block for 0x4002fc, 57 bytes>
0x4002fc:	and	eax, 0xfff
0x400301:	sub	rax, 8
0x400305:	add	rax, rsp
0x400308:	or	qword ptr [rax], 0
0x40030c:	mov	rax, rsp
0x40030f:	add	rax, 0xf
0x400313:	shr	rax, 4
0x400317:	shl	rax, 4
0x40031b:	mov	qword ptr [rbp - 0x78], rax
0x40031f:	mov	rax, qword ptr [rbp - 0x80]
0x400323:	mov	edx, 0x31
0x400328:	mov	esi, 0x41
0x40032d:	mov	rdi, rax
0x400330:	call	0x500000
<Block for 0x4002cb, 5 bytes>
0x4002cb:	cmp	rsp, rdx
0x4002ce:	je	0x4002e2
<Block for 0x400335, 33 bytes>
0x400335:	mov	rax, qword ptr [rbp - 0x80]
0x400339:	add	rax, 0x31
0x40033d:	mov	byte ptr [rax], 0
0x400340:	mov	rax, qword ptr [rbp - 0x78]
0x400344:	mov	edx, 0x63
0x400349:	mov	esi, 0x41
0x40034e:	mov	rdi, rax
0x400351:	call	0x500000
<Block for 0x400356, 23 bytes>
0x400356:	mov	rax, qword ptr [rbp - 0x78]
0x40035a:	add	rax, 0x63
0x40035e:	mov	byte ptr [rax], 0
0x400361:	mov	dword ptr [rbp - 0x8c], 0
0x40036b:	jmp	0x40037f
<Block for 0x40037f, 9 bytes>
0x40037f:	cmp	dword ptr [rbp - 0x8c], 0
0x400386:	jle	0x40036d
<Block for 0x40036d, 27 bytes>
0x40036d:	mov	rax, qword ptr [rbp - 0x78]
0x400371:	mov	qword ptr [rbp - 0x88], rax
0x400378:	add	dword ptr [rbp - 0x8c], 1
0x40037f:	cmp	dword ptr [rbp - 0x8c], 0
0x400386:	jle	0x40036d
<Block for 0x400388, 22 bytes>
0x400388:	lea	rax, [rbp - 0x70]
0x40038c:	mov	edx, 0x63
0x400391:	mov	esi, 0x43
0x400396:	mov	rdi, rax
0x400399:	call	0x500000
<Block for 0x40039e, 16 bytes>
0x40039e:	mov	byte ptr [rbp - 0xd], 0
0x4003a2:	lea	rax, [rbp - 0x70]
0x4003a6:	mov	rdi, rax
0x4003a9:	call	0x500008
<Block for 0x4003ae, 25 bytes>
0x4003ae:	mov	rdx, rax
0x4003b1:	mov	rcx, qword ptr [rbp - 0x88]
0x4003b8:	lea	rax, [rbp - 0x70]
0x4003bc:	mov	rsi, rcx
0x4003bf:	mov	rdi, rax
0x4003c2:	call	0x500010
<Block for 0x4003c7, 16 bytes>
0x4003c7:	mov	byte ptr [rbp - 0xd], 0
0x4003cb:	lea	rax, [rbp - 0x70]
0x4003cf:	mov	rdi, rax
0x4003d2:	call	0x500018
<Block for 0x4003d7, 16 bytes>
0x4003d7:	nop	
0x4003d8:	mov	rax, qword ptr [rbp - 8]
0x4003dc:	xor	rax, qword ptr fs:[0x28]
0x4003e5:	je	0x4003ec
<Block for 0x4003ec, 2 bytes>
0x4003ec:	leave	
0x4003ed:	ret	
<Block for 0x4003e7, 5 bytes>
0x4003e7:	call	0x500020
