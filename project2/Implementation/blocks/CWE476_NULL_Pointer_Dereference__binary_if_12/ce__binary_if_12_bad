<Block for 0x400000, 22 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	eax, 0
0x400011:	call	0x500000
<Block for 0x400016, 4 bytes>
0x400016:	test	eax, eax
0x400018:	je	0x40004a
<Block for 0x40004a, 15 bytes>
0x40004a:	mov	qword ptr [rbp - 0x10], 0
0x400052:	cmp	qword ptr [rbp - 0x10], 0
0x400057:	je	0x400070
<Block for 0x40001a, 34 bytes>
0x40001a:	mov	qword ptr [rbp - 8], 0
0x400022:	cmp	qword ptr [rbp - 8], 0
0x400027:	setne	dl
0x40002a:	mov	rax, qword ptr [rbp - 8]
0x40002e:	mov	eax, dword ptr [rax]
0x400030:	cmp	eax, 5
0x400033:	sete	al
0x400036:	and	eax, edx
0x400038:	test	al, al
0x40003a:	je	0x400070
<Block for 0x400070, 3 bytes>
0x400070:	nop	
0x400071:	leave	
0x400072:	ret	
<Block for 0x400059, 11 bytes>
0x400059:	mov	rax, qword ptr [rbp - 0x10]
0x40005d:	mov	eax, dword ptr [rax]
0x40005f:	cmp	eax, 5
0x400062:	jne	0x400070
<Block for 0x40003c, 12 bytes>
0x40003c:	lea	rdi, [rip + 0xb0]
0x400043:	call	0x500008
<Block for 0x400064, 12 bytes>
0x400064:	lea	rdi, [rip + 0x88]
0x40006b:	call	0x500008
<Block for 0x400048, 2 bytes>
0x400048:	jmp	0x400070
