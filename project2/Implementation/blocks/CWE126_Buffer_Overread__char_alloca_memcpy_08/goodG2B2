<Block for 0x4003fe, 84 bytes>
0x4003fe:	endbr64	
0x400402:	push	rbp
0x400403:	mov	rbp, rsp
0x400406:	sub	rsp, 0x90
0x40040d:	mov	rax, qword ptr fs:[0x28]
0x400416:	mov	qword ptr [rbp - 8], rax
0x40041a:	xor	eax, eax
0x40041c:	mov	eax, 0x10
0x400421:	sub	rax, 1
0x400425:	add	rax, 0x3a
0x400429:	mov	ecx, 0x10
0x40042e:	mov	edx, 0
0x400433:	div	rcx
0x400436:	imul	rax, rax, 0x10
0x40043a:	mov	rdx, rax
0x40043d:	and	rdx, 0xfffffffffffff000
0x400444:	mov	rcx, rsp
0x400447:	sub	rcx, rdx
0x40044a:	mov	rdx, rcx
0x40044d:	cmp	rsp, rdx
0x400450:	je	0x400464
<Block for 0x400464, 26 bytes>
0x400464:	mov	rdx, rax
0x400467:	and	edx, 0xfff
0x40046d:	sub	rsp, rdx
0x400470:	mov	rdx, rax
0x400473:	and	edx, 0xfff
0x400479:	test	rdx, rdx
0x40047c:	je	0x40048e
<Block for 0x400452, 18 bytes>
0x400452:	sub	rsp, 0x1000
0x400459:	or	qword ptr [rsp + 0xff8], 0
0x400462:	jmp	0x40044d
<Block for 0x40048e, 73 bytes>
0x40048e:	mov	rax, rsp
0x400491:	add	rax, 0xf
0x400495:	shr	rax, 4
0x400499:	shl	rax, 4
0x40049d:	mov	qword ptr [rbp - 0x80], rax
0x4004a1:	mov	eax, 0x10
0x4004a6:	sub	rax, 1
0x4004aa:	add	rax, 0x6c
0x4004ae:	mov	edi, 0x10
0x4004b3:	mov	edx, 0
0x4004b8:	div	rdi
0x4004bb:	imul	rax, rax, 0x10
0x4004bf:	mov	rdx, rax
0x4004c2:	and	rdx, 0xfffffffffffff000
0x4004c9:	mov	rsi, rsp
0x4004cc:	sub	rsi, rdx
0x4004cf:	mov	rdx, rsi
0x4004d2:	cmp	rsp, rdx
0x4004d5:	je	0x4004e9
<Block for 0x40047e, 89 bytes>
0x40047e:	and	eax, 0xfff
0x400483:	sub	rax, 8
0x400487:	add	rax, rsp
0x40048a:	or	qword ptr [rax], 0
0x40048e:	mov	rax, rsp
0x400491:	add	rax, 0xf
0x400495:	shr	rax, 4
0x400499:	shl	rax, 4
0x40049d:	mov	qword ptr [rbp - 0x80], rax
0x4004a1:	mov	eax, 0x10
0x4004a6:	sub	rax, 1
0x4004aa:	add	rax, 0x6c
0x4004ae:	mov	edi, 0x10
0x4004b3:	mov	edx, 0
0x4004b8:	div	rdi
0x4004bb:	imul	rax, rax, 0x10
0x4004bf:	mov	rdx, rax
0x4004c2:	and	rdx, 0xfffffffffffff000
0x4004c9:	mov	rsi, rsp
0x4004cc:	sub	rsi, rdx
0x4004cf:	mov	rdx, rsi
0x4004d2:	cmp	rsp, rdx
0x4004d5:	je	0x4004e9
<Block for 0x40044d, 5 bytes>
0x40044d:	cmp	rsp, rdx
0x400450:	je	0x400464
<Block for 0x4004e9, 26 bytes>
0x4004e9:	mov	rdx, rax
0x4004ec:	and	edx, 0xfff
0x4004f2:	sub	rsp, rdx
0x4004f5:	mov	rdx, rax
0x4004f8:	and	edx, 0xfff
0x4004fe:	test	rdx, rdx
0x400501:	je	0x400513
<Block for 0x4004d7, 18 bytes>
0x4004d7:	sub	rsp, 0x1000
0x4004de:	or	qword ptr [rsp + 0xff8], 0
0x4004e7:	jmp	0x4004d2
<Block for 0x400513, 41 bytes>
0x400513:	mov	rax, rsp
0x400516:	add	rax, 0xf
0x40051a:	shr	rax, 4
0x40051e:	shl	rax, 4
0x400522:	mov	qword ptr [rbp - 0x78], rax
0x400526:	mov	rax, qword ptr [rbp - 0x80]
0x40052a:	mov	edx, 0x31
0x40052f:	mov	esi, 0x41
0x400534:	mov	rdi, rax
0x400537:	call	0x500000
<Block for 0x400503, 57 bytes>
0x400503:	and	eax, 0xfff
0x400508:	sub	rax, 8
0x40050c:	add	rax, rsp
0x40050f:	or	qword ptr [rax], 0
0x400513:	mov	rax, rsp
0x400516:	add	rax, 0xf
0x40051a:	shr	rax, 4
0x40051e:	shl	rax, 4
0x400522:	mov	qword ptr [rbp - 0x78], rax
0x400526:	mov	rax, qword ptr [rbp - 0x80]
0x40052a:	mov	edx, 0x31
0x40052f:	mov	esi, 0x41
0x400534:	mov	rdi, rax
0x400537:	call	0x500000
<Block for 0x4004d2, 5 bytes>
0x4004d2:	cmp	rsp, rdx
0x4004d5:	je	0x4004e9
<Block for 0x40053c, 33 bytes>
0x40053c:	mov	rax, qword ptr [rbp - 0x80]
0x400540:	add	rax, 0x31
0x400544:	mov	byte ptr [rax], 0
0x400547:	mov	rax, qword ptr [rbp - 0x78]
0x40054b:	mov	edx, 0x63
0x400550:	mov	esi, 0x41
0x400555:	mov	rdi, rax
0x400558:	call	0x500000
<Block for 0x40055d, 21 bytes>
0x40055d:	mov	rax, qword ptr [rbp - 0x78]
0x400561:	add	rax, 0x63
0x400565:	mov	byte ptr [rax], 0
0x400568:	mov	eax, 0
0x40056d:	call	0x400000
<Block for 0x400572, 4 bytes>
0x400572:	test	eax, eax
0x400574:	je	0x400581
<Block for 0x400581, 22 bytes>
0x400581:	lea	rax, [rbp - 0x70]
0x400585:	mov	edx, 0x63
0x40058a:	mov	esi, 0x43
0x40058f:	mov	rdi, rax
0x400592:	call	0x500000
<Block for 0x400576, 33 bytes>
0x400576:	mov	rax, qword ptr [rbp - 0x78]
0x40057a:	mov	qword ptr [rbp - 0x88], rax
0x400581:	lea	rax, [rbp - 0x70]
0x400585:	mov	edx, 0x63
0x40058a:	mov	esi, 0x43
0x40058f:	mov	rdi, rax
0x400592:	call	0x500000
<Block for 0x400597, 16 bytes>
0x400597:	mov	byte ptr [rbp - 0xd], 0
0x40059b:	lea	rax, [rbp - 0x70]
0x40059f:	mov	rdi, rax
0x4005a2:	call	0x500008
<Block for 0x4005a7, 25 bytes>
0x4005a7:	mov	rdx, rax
0x4005aa:	mov	rcx, qword ptr [rbp - 0x88]
0x4005b1:	lea	rax, [rbp - 0x70]
0x4005b5:	mov	rsi, rcx
0x4005b8:	mov	rdi, rax
0x4005bb:	call	0x500010
<Block for 0x4005c0, 16 bytes>
0x4005c0:	mov	byte ptr [rbp - 0xd], 0
0x4005c4:	lea	rax, [rbp - 0x70]
0x4005c8:	mov	rdi, rax
0x4005cb:	call	0x500018
<Block for 0x4005d0, 16 bytes>
0x4005d0:	nop	
0x4005d1:	mov	rax, qword ptr [rbp - 8]
0x4005d5:	xor	rax, qword ptr fs:[0x28]
0x4005de:	je	0x4005e5
<Block for 0x4005e5, 2 bytes>
0x4005e5:	leave	
0x4005e6:	ret	
<Block for 0x4005e0, 5 bytes>
0x4005e0:	call	0x500020
