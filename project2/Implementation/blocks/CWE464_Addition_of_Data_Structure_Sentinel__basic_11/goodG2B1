<Block for 0x400088, 41 bytes>
0x400088:	endbr64	
0x40008c:	push	rbp
0x40008d:	mov	rbp, rsp
0x400090:	sub	rsp, 0x10
0x400094:	mov	rax, qword ptr fs:[0x28]
0x40009d:	mov	qword ptr [rbp - 8], rax
0x4000a1:	xor	eax, eax
0x4000a3:	mov	byte ptr [rbp - 0xd], 0x20
0x4000a7:	mov	eax, 0
0x4000ac:	call	0x500030
<Block for 0x4000b1, 4 bytes>
0x4000b1:	test	eax, eax
0x4000b3:	je	0x4000c3
<Block for 0x4000c3, 35 bytes>
0x4000c3:	mov	byte ptr [rbp - 0xd], 0x61
0x4000c7:	mov	byte ptr [rbp - 0xc], 0x78
0x4000cb:	movzx	eax, byte ptr [rbp - 0xd]
0x4000cf:	mov	byte ptr [rbp - 0xb], al
0x4000d2:	mov	byte ptr [rbp - 0xa], 0x7a
0x4000d6:	mov	byte ptr [rbp - 9], 0
0x4000da:	lea	rax, [rbp - 0xc]
0x4000de:	mov	rdi, rax
0x4000e1:	call	0x500020
<Block for 0x4000b5, 12 bytes>
0x4000b5:	lea	rdi, [rip + 0xc7]
0x4000bc:	call	0x500020
<Block for 0x4000e6, 16 bytes>
0x4000e6:	nop	
0x4000e7:	mov	rax, qword ptr [rbp - 8]
0x4000eb:	xor	rax, qword ptr fs:[0x28]
0x4000f4:	je	0x4000fb
<Block for 0x4000c1, 2 bytes>
0x4000c1:	jmp	0x4000c7
<Block for 0x4000fb, 2 bytes>
0x4000fb:	leave	
0x4000fc:	ret	
<Block for 0x4000f6, 5 bytes>
0x4000f6:	call	0x500028
<Block for 0x4000c7, 31 bytes>
0x4000c7:	mov	byte ptr [rbp - 0xc], 0x78
0x4000cb:	movzx	eax, byte ptr [rbp - 0xd]
0x4000cf:	mov	byte ptr [rbp - 0xb], al
0x4000d2:	mov	byte ptr [rbp - 0xa], 0x7a
0x4000d6:	mov	byte ptr [rbp - 9], 0
0x4000da:	lea	rax, [rbp - 0xc]
0x4000de:	mov	rdi, rax
0x4000e1:	call	0x500020
