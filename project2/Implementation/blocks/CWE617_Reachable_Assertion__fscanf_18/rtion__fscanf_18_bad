<Block for 0x400000, 70 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0xc], 0xffffffff
0x400022:	nop	
0x400023:	endbr64	
0x400027:	mov	rax, qword ptr [rip + 0xfffd2]
0x40002e:	lea	rdx, [rbp - 0xc]
0x400032:	lea	rsi, [rip + 0xa7]
0x400039:	mov	rdi, rax
0x40003c:	mov	eax, 0
0x400041:	call	0x500008
<Block for 0x400046, 8 bytes>
0x400046:	mov	eax, dword ptr [rbp - 0xc]
0x400049:	cmp	eax, 5
0x40004c:	jg	0x40006d
<Block for 0x40004e, 31 bytes>
0x40004e:	lea	rcx, [rip + 0xeb]
0x400055:	mov	edx, 0x23
0x40005a:	lea	rsi, [rip + 0x87]
0x400061:	lea	rdi, [rip + 0xa8]
0x400068:	call	0x500010
<Block for 0x40006d, 16 bytes>
0x40006d:	nop	
0x40006e:	mov	rax, qword ptr [rbp - 8]
0x400072:	xor	rax, qword ptr fs:[0x28]
0x40007b:	je	0x400082
<Block for 0x400082, 2 bytes>
0x400082:	leave	
0x400083:	ret	
<Block for 0x40007d, 5 bytes>
0x40007d:	call	0x500018
