<Block for 0x400076, 51 bytes>
0x400076:	endbr64	
0x40007a:	push	rbp
0x40007b:	mov	rbp, rsp
0x40007e:	sub	rsp, 0x20
0x400082:	mov	rax, qword ptr fs:[0x28]
0x40008b:	mov	qword ptr [rbp - 8], rax
0x40008f:	xor	eax, eax
0x400091:	mov	rdx, qword ptr [rip + 0xfff88]
0x400098:	lea	rax, [rbp - 0x12]
0x40009c:	mov	esi, 0xa
0x4000a1:	mov	rdi, rax
0x4000a4:	call	0x500028
<Block for 0x4000a9, 11 bytes>
0x4000a9:	mov	qword ptr [rbp - 0x20], rax
0x4000ad:	cmp	qword ptr [rbp - 0x20], 0
0x4000b2:	jne	0x4000ca
<Block for 0x4000b4, 12 bytes>
0x4000b4:	lea	rdi, [rip + 0x4d]
0x4000bb:	call	0x500008
<Block for 0x4000ca, 16 bytes>
0x4000ca:	mov	byte ptr [rbp - 9], 0
0x4000ce:	lea	rax, [rbp - 0x12]
0x4000d2:	mov	rdi, rax
0x4000d5:	call	0x500008
<Block for 0x4000c0, 10 bytes>
0x4000c0:	mov	edi, 1
0x4000c5:	call	0x500010
<Block for 0x4000da, 16 bytes>
0x4000da:	nop	
0x4000db:	mov	rax, qword ptr [rbp - 8]
0x4000df:	xor	rax, qword ptr fs:[0x28]
0x4000e8:	je	0x4000ef
<Block for 0x4000ef, 2 bytes>
0x4000ef:	leave	
0x4000f0:	ret	
<Block for 0x4000ea, 5 bytes>
0x4000ea:	call	0x500018
