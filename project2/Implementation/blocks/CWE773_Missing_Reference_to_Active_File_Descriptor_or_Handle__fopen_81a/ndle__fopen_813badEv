<Block for 0x400000, 54 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x18], 0
0x400023:	lea	rsi, [rip + 0xe2]
0x40002a:	lea	rdi, [rip + 0xde]
0x400031:	call	0x500000
<Block for 0x400036, 49 bytes>
0x400036:	mov	qword ptr [rbp - 0x18], rax
0x40003a:	lea	rax, [rip + 0xfffd7]
0x400041:	mov	qword ptr [rbp - 0x20], rax
0x400045:	lea	rax, [rbp - 0x20]
0x400049:	mov	qword ptr [rbp - 0x10], rax
0x40004d:	mov	rax, qword ptr [rbp - 0x10]
0x400051:	mov	rax, qword ptr [rax]
0x400054:	mov	rcx, qword ptr [rax]
0x400057:	mov	rdx, qword ptr [rbp - 0x18]
0x40005b:	mov	rax, qword ptr [rbp - 0x10]
0x40005f:	mov	rsi, rdx
0x400062:	mov	rdi, rax
0x400065:	call	rcx
<Block for 0x400067, 16 bytes>
0x400067:	nop	
0x400068:	mov	rax, qword ptr [rbp - 8]
0x40006c:	xor	rax, qword ptr fs:[0x28]
0x400075:	je	0x40007c
<Block for 0x40007c, 2 bytes>
0x40007c:	leave	
0x40007d:	ret	
<Block for 0x400077, 5 bytes>
0x400077:	call	0x500010
