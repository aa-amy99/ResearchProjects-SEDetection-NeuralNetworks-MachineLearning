<Block for 0x400000, 74 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	qword ptr [rbp - 0x88], rdi
0x400016:	mov	rax, qword ptr fs:[0x28]
0x40001f:	mov	qword ptr [rbp - 8], rax
0x400023:	xor	eax, eax
0x400025:	mov	rax, qword ptr [rbp - 0x88]
0x40002c:	mov	rax, qword ptr [rax + 0x10]
0x400030:	mov	qword ptr [rbp - 0x78], rax
0x400034:	lea	rax, [rbp - 0x70]
0x400038:	mov	edx, 0x63
0x40003d:	mov	esi, 0x43
0x400042:	mov	rdi, rax
0x400045:	call	0x500000
<Block for 0x40004a, 23 bytes>
0x40004a:	mov	byte ptr [rbp - 0xd], 0
0x40004e:	lea	rdx, [rbp - 0x70]
0x400052:	mov	rax, qword ptr [rbp - 0x78]
0x400056:	mov	rsi, rdx
0x400059:	mov	rdi, rax
0x40005c:	call	0x500008
<Block for 0x400061, 12 bytes>
0x400061:	mov	rax, qword ptr [rbp - 0x78]
0x400065:	mov	rdi, rax
0x400068:	call	0x500010
<Block for 0x40006d, 16 bytes>
0x40006d:	nop	
0x40006e:	mov	rax, qword ptr [rbp - 8]
0x400072:	xor	rax, qword ptr fs:[0x28]
0x40007b:	je	0x400082
<Block for 0x400082, 2 bytes>
0x400082:	leave	
0x400083:	ret	
<Block for 0x40007d, 5 bytes>
0x40007d:	call	0x500018
