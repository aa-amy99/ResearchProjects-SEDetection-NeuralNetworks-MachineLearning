<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x38], 0
0x400023:	mov	edi, 0x32
0x400028:	call	0x500000
<Block for 0x40002d, 26 bytes>
0x40002d:	mov	qword ptr [rbp - 0x38], rax
0x400031:	mov	rax, qword ptr [rbp - 0x38]
0x400035:	mov	edx, 0x31
0x40003a:	mov	esi, 0x41
0x40003f:	mov	rdi, rax
0x400042:	call	0x500008
<Block for 0x400047, 31 bytes>
0x400047:	mov	rax, qword ptr [rbp - 0x38]
0x40004b:	add	rax, 0x31
0x40004f:	mov	byte ptr [rax], 0
0x400052:	mov	rax, qword ptr [rbp - 0x38]
0x400056:	mov	qword ptr [rbp - 0x20], rax
0x40005a:	lea	rax, [rbp - 0x30]
0x40005e:	mov	rdi, rax
0x400061:	call	0x500010
<Block for 0x400066, 16 bytes>
0x400066:	nop	
0x400067:	mov	rax, qword ptr [rbp - 8]
0x40006b:	xor	rax, qword ptr fs:[0x28]
0x400074:	je	0x40007b
<Block for 0x40007b, 2 bytes>
0x40007b:	leave	
0x40007c:	ret	
<Block for 0x400076, 5 bytes>
0x400076:	call	0x500018
