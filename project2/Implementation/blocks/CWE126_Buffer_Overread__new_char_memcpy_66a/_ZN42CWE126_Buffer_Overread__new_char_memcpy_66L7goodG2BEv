<Block for 0x40007d, 45 bytes>
0x40007d:	endbr64	
0x400081:	push	rbp
0x400082:	mov	rbp, rsp
0x400085:	sub	rsp, 0x40
0x400089:	mov	rax, qword ptr fs:[0x28]
0x400092:	mov	qword ptr [rbp - 8], rax
0x400096:	xor	eax, eax
0x400098:	mov	qword ptr [rbp - 0x38], 0
0x4000a0:	mov	edi, 0x64
0x4000a5:	call	0x500000
<Block for 0x4000aa, 26 bytes>
0x4000aa:	mov	qword ptr [rbp - 0x38], rax
0x4000ae:	mov	rax, qword ptr [rbp - 0x38]
0x4000b2:	mov	edx, 0x63
0x4000b7:	mov	esi, 0x41
0x4000bc:	mov	rdi, rax
0x4000bf:	call	0x500008
<Block for 0x4000c4, 31 bytes>
0x4000c4:	mov	rax, qword ptr [rbp - 0x38]
0x4000c8:	add	rax, 0x63
0x4000cc:	mov	byte ptr [rax], 0
0x4000cf:	mov	rax, qword ptr [rbp - 0x38]
0x4000d3:	mov	qword ptr [rbp - 0x20], rax
0x4000d7:	lea	rax, [rbp - 0x30]
0x4000db:	mov	rdi, rax
0x4000de:	call	0x500020
<Block for 0x4000e3, 16 bytes>
0x4000e3:	nop	
0x4000e4:	mov	rax, qword ptr [rbp - 8]
0x4000e8:	xor	rax, qword ptr fs:[0x28]
0x4000f1:	je	0x4000f8
<Block for 0x4000f8, 2 bytes>
0x4000f8:	leave	
0x4000f9:	ret	
<Block for 0x4000f3, 5 bytes>
0x4000f3:	call	0x500018
