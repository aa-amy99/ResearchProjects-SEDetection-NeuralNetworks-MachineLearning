<Block for 0x400145, 84 bytes>
0x400145:	endbr64	
0x400149:	push	rbp
0x40014a:	mov	rbp, rsp
0x40014d:	sub	rsp, 0x90
0x400154:	mov	rax, qword ptr fs:[0x28]
0x40015d:	mov	qword ptr [rbp - 8], rax
0x400161:	xor	eax, eax
0x400163:	mov	eax, 0x10
0x400168:	sub	rax, 1
0x40016c:	add	rax, 0x6c
0x400170:	mov	esi, 0x10
0x400175:	mov	edx, 0
0x40017a:	div	rsi
0x40017d:	imul	rax, rax, 0x10
0x400181:	mov	rdx, rax
0x400184:	and	rdx, 0xfffffffffffff000
0x40018b:	mov	rcx, rsp
0x40018e:	sub	rcx, rdx
0x400191:	mov	rdx, rcx
0x400194:	cmp	rsp, rdx
0x400197:	je	0x4001ab
<Block for 0x4001ab, 26 bytes>
0x4001ab:	mov	rdx, rax
0x4001ae:	and	edx, 0xfff
0x4001b4:	sub	rsp, rdx
0x4001b7:	mov	rdx, rax
0x4001ba:	and	edx, 0xfff
0x4001c0:	test	rdx, rdx
0x4001c3:	je	0x4001d5
<Block for 0x400199, 18 bytes>
0x400199:	sub	rsp, 0x1000
0x4001a0:	or	qword ptr [rsp + 0xff8], 0
0x4001a9:	jmp	0x400194
<Block for 0x4001d5, 41 bytes>
0x4001d5:	mov	rax, rsp
0x4001d8:	add	rax, 0xf
0x4001dc:	shr	rax, 4
0x4001e0:	shl	rax, 4
0x4001e4:	mov	qword ptr [rbp - 0x78], rax
0x4001e8:	mov	rax, qword ptr [rbp - 0x78]
0x4001ec:	mov	edx, 0x63
0x4001f1:	mov	esi, 0x41
0x4001f6:	mov	rdi, rax
0x4001f9:	call	0x500000
<Block for 0x4001c5, 57 bytes>
0x4001c5:	and	eax, 0xfff
0x4001ca:	sub	rax, 8
0x4001ce:	add	rax, rsp
0x4001d1:	or	qword ptr [rax], 0
0x4001d5:	mov	rax, rsp
0x4001d8:	add	rax, 0xf
0x4001dc:	shr	rax, 4
0x4001e0:	shl	rax, 4
0x4001e4:	mov	qword ptr [rbp - 0x78], rax
0x4001e8:	mov	rax, qword ptr [rbp - 0x78]
0x4001ec:	mov	edx, 0x63
0x4001f1:	mov	esi, 0x41
0x4001f6:	mov	rdi, rax
0x4001f9:	call	0x500000
<Block for 0x400194, 5 bytes>
0x400194:	cmp	rsp, rdx
0x400197:	je	0x4001ab
<Block for 0x4001fe, 23 bytes>
0x4001fe:	mov	rax, qword ptr [rbp - 0x78]
0x400202:	add	rax, 0x63
0x400206:	mov	byte ptr [rax], 0
0x400209:	mov	dword ptr [rbp - 0x84], 0
0x400213:	jmp	0x400224
<Block for 0x400224, 9 bytes>
0x400224:	cmp	dword ptr [rbp - 0x84], 0
0x40022b:	jle	0x400215
<Block for 0x400215, 24 bytes>
0x400215:	mov	rax, qword ptr [rbp - 0x78]
0x400219:	mov	qword ptr [rbp - 0x80], rax
0x40021d:	add	dword ptr [rbp - 0x84], 1
0x400224:	cmp	dword ptr [rbp - 0x84], 0
0x40022b:	jle	0x400215
<Block for 0x40022d, 22 bytes>
0x40022d:	lea	rax, [rbp - 0x70]
0x400231:	mov	edx, 0x63
0x400236:	mov	esi, 0x43
0x40023b:	mov	rdi, rax
0x40023e:	call	0x500000
<Block for 0x400243, 28 bytes>
0x400243:	mov	byte ptr [rbp - 0xd], 0
0x400247:	mov	rcx, qword ptr [rbp - 0x80]
0x40024b:	lea	rax, [rbp - 0x70]
0x40024f:	mov	edx, 0x64
0x400254:	mov	rsi, rcx
0x400257:	mov	rdi, rax
0x40025a:	call	0x500008
<Block for 0x40025f, 16 bytes>
0x40025f:	mov	byte ptr [rbp - 0xd], 0
0x400263:	lea	rax, [rbp - 0x70]
0x400267:	mov	rdi, rax
0x40026a:	call	0x500010
<Block for 0x40026f, 16 bytes>
0x40026f:	nop	
0x400270:	mov	rax, qword ptr [rbp - 8]
0x400274:	xor	rax, qword ptr fs:[0x28]
0x40027d:	je	0x400284
<Block for 0x400284, 2 bytes>
0x400284:	leave	
0x400285:	ret	
<Block for 0x40027f, 5 bytes>
0x40027f:	call	0x500018
