<Block for 0x40044f, 84 bytes>
0x40044f:	endbr64	
0x400453:	push	rbp
0x400454:	mov	rbp, rsp
0x400457:	sub	rsp, 0xa0
0x40045e:	mov	rax, qword ptr fs:[0x28]
0x400467:	mov	qword ptr [rbp - 8], rax
0x40046b:	xor	eax, eax
0x40046d:	mov	eax, 0x10
0x400472:	sub	rax, 1
0x400476:	add	rax, 0x3a
0x40047a:	mov	ecx, 0x10
0x40047f:	mov	edx, 0
0x400484:	div	rcx
0x400487:	imul	rax, rax, 0x10
0x40048b:	mov	rdx, rax
0x40048e:	and	rdx, 0xfffffffffffff000
0x400495:	mov	rcx, rsp
0x400498:	sub	rcx, rdx
0x40049b:	mov	rdx, rcx
0x40049e:	cmp	rsp, rdx
0x4004a1:	je	0x4004b5
<Block for 0x4004b5, 26 bytes>
0x4004b5:	mov	rdx, rax
0x4004b8:	and	edx, 0xfff
0x4004be:	sub	rsp, rdx
0x4004c1:	mov	rdx, rax
0x4004c4:	and	edx, 0xfff
0x4004ca:	test	rdx, rdx
0x4004cd:	je	0x4004df
<Block for 0x4004a3, 18 bytes>
0x4004a3:	sub	rsp, 0x1000
0x4004aa:	or	qword ptr [rsp + 0xff8], 0
0x4004b3:	jmp	0x40049e
<Block for 0x4004df, 76 bytes>
0x4004df:	mov	rax, rsp
0x4004e2:	add	rax, 0xf
0x4004e6:	shr	rax, 4
0x4004ea:	shl	rax, 4
0x4004ee:	mov	qword ptr [rbp - 0x88], rax
0x4004f5:	mov	eax, 0x10
0x4004fa:	sub	rax, 1
0x4004fe:	add	rax, 0x6c
0x400502:	mov	edi, 0x10
0x400507:	mov	edx, 0
0x40050c:	div	rdi
0x40050f:	imul	rax, rax, 0x10
0x400513:	mov	rdx, rax
0x400516:	and	rdx, 0xfffffffffffff000
0x40051d:	mov	rsi, rsp
0x400520:	sub	rsi, rdx
0x400523:	mov	rdx, rsi
0x400526:	cmp	rsp, rdx
0x400529:	je	0x40053d
<Block for 0x4004cf, 92 bytes>
0x4004cf:	and	eax, 0xfff
0x4004d4:	sub	rax, 8
0x4004d8:	add	rax, rsp
0x4004db:	or	qword ptr [rax], 0
0x4004df:	mov	rax, rsp
0x4004e2:	add	rax, 0xf
0x4004e6:	shr	rax, 4
0x4004ea:	shl	rax, 4
0x4004ee:	mov	qword ptr [rbp - 0x88], rax
0x4004f5:	mov	eax, 0x10
0x4004fa:	sub	rax, 1
0x4004fe:	add	rax, 0x6c
0x400502:	mov	edi, 0x10
0x400507:	mov	edx, 0
0x40050c:	div	rdi
0x40050f:	imul	rax, rax, 0x10
0x400513:	mov	rdx, rax
0x400516:	and	rdx, 0xfffffffffffff000
0x40051d:	mov	rsi, rsp
0x400520:	sub	rsi, rdx
0x400523:	mov	rdx, rsi
0x400526:	cmp	rsp, rdx
0x400529:	je	0x40053d
<Block for 0x40049e, 5 bytes>
0x40049e:	cmp	rsp, rdx
0x4004a1:	je	0x4004b5
<Block for 0x40053d, 26 bytes>
0x40053d:	mov	rdx, rax
0x400540:	and	edx, 0xfff
0x400546:	sub	rsp, rdx
0x400549:	mov	rdx, rax
0x40054c:	and	edx, 0xfff
0x400552:	test	rdx, rdx
0x400555:	je	0x400567
<Block for 0x40052b, 18 bytes>
0x40052b:	sub	rsp, 0x1000
0x400532:	or	qword ptr [rsp + 0xff8], 0
0x40053b:	jmp	0x400526
<Block for 0x400567, 44 bytes>
0x400567:	mov	rax, rsp
0x40056a:	add	rax, 0xf
0x40056e:	shr	rax, 4
0x400572:	shl	rax, 4
0x400576:	mov	qword ptr [rbp - 0x80], rax
0x40057a:	mov	rax, qword ptr [rbp - 0x88]
0x400581:	mov	edx, 0x31
0x400586:	mov	esi, 0x41
0x40058b:	mov	rdi, rax
0x40058e:	call	0x500000
<Block for 0x400557, 60 bytes>
0x400557:	and	eax, 0xfff
0x40055c:	sub	rax, 8
0x400560:	add	rax, rsp
0x400563:	or	qword ptr [rax], 0
0x400567:	mov	rax, rsp
0x40056a:	add	rax, 0xf
0x40056e:	shr	rax, 4
0x400572:	shl	rax, 4
0x400576:	mov	qword ptr [rbp - 0x80], rax
0x40057a:	mov	rax, qword ptr [rbp - 0x88]
0x400581:	mov	edx, 0x31
0x400586:	mov	esi, 0x41
0x40058b:	mov	rdi, rax
0x40058e:	call	0x500000
<Block for 0x400526, 5 bytes>
0x400526:	cmp	rsp, rdx
0x400529:	je	0x40053d
<Block for 0x400593, 36 bytes>
0x400593:	mov	rax, qword ptr [rbp - 0x88]
0x40059a:	add	rax, 0x31
0x40059e:	mov	byte ptr [rax], 0
0x4005a1:	mov	rax, qword ptr [rbp - 0x80]
0x4005a5:	mov	edx, 0x63
0x4005aa:	mov	esi, 0x41
0x4005af:	mov	rdi, rax
0x4005b2:	call	0x500000
<Block for 0x4005b7, 21 bytes>
0x4005b7:	mov	rax, qword ptr [rbp - 0x80]
0x4005bb:	add	rax, 0x63
0x4005bf:	mov	byte ptr [rax], 0
0x4005c2:	mov	eax, dword ptr [rip + 0xc8]
0x4005c8:	test	eax, eax
0x4005ca:	je	0x4005d7
<Block for 0x4005d7, 22 bytes>
0x4005d7:	lea	rax, [rbp - 0x70]
0x4005db:	mov	edx, 0x63
0x4005e0:	mov	esi, 0x43
0x4005e5:	mov	rdi, rax
0x4005e8:	call	0x500000
<Block for 0x4005cc, 33 bytes>
0x4005cc:	mov	rax, qword ptr [rbp - 0x80]
0x4005d0:	mov	qword ptr [rbp - 0x98], rax
0x4005d7:	lea	rax, [rbp - 0x70]
0x4005db:	mov	edx, 0x63
0x4005e0:	mov	esi, 0x43
0x4005e5:	mov	rdi, rax
0x4005e8:	call	0x500000
<Block for 0x4005ed, 16 bytes>
0x4005ed:	mov	byte ptr [rbp - 0xd], 0
0x4005f1:	lea	rax, [rbp - 0x70]
0x4005f5:	mov	rdi, rax
0x4005f8:	call	0x500008
<Block for 0x4005fd, 17 bytes>
0x4005fd:	mov	qword ptr [rbp - 0x78], rax
0x400601:	mov	qword ptr [rbp - 0x90], 0
0x40060c:	jmp	0x40063a
<Block for 0x40063a, 13 bytes>
0x40063a:	mov	rax, qword ptr [rbp - 0x90]
0x400641:	cmp	rax, qword ptr [rbp - 0x78]
0x400645:	jb	0x40060e
<Block for 0x40060e, 57 bytes>
0x40060e:	mov	rdx, qword ptr [rbp - 0x98]
0x400615:	mov	rax, qword ptr [rbp - 0x90]
0x40061c:	add	rax, rdx
0x40061f:	movzx	eax, byte ptr [rax]
0x400622:	lea	rcx, [rbp - 0x70]
0x400626:	mov	rdx, qword ptr [rbp - 0x90]
0x40062d:	add	rdx, rcx
0x400630:	mov	byte ptr [rdx], al
0x400632:	add	qword ptr [rbp - 0x90], 1
0x40063a:	mov	rax, qword ptr [rbp - 0x90]
0x400641:	cmp	rax, qword ptr [rbp - 0x78]
0x400645:	jb	0x40060e
<Block for 0x400647, 16 bytes>
0x400647:	mov	byte ptr [rbp - 0xd], 0
0x40064b:	lea	rax, [rbp - 0x70]
0x40064f:	mov	rdi, rax
0x400652:	call	0x500010
<Block for 0x400657, 16 bytes>
0x400657:	nop	
0x400658:	mov	rax, qword ptr [rbp - 8]
0x40065c:	xor	rax, qword ptr fs:[0x28]
0x400665:	je	0x40066c
<Block for 0x40066c, 2 bytes>
0x40066c:	leave	
0x40066d:	ret	
<Block for 0x400667, 5 bytes>
0x400667:	call	0x500018
