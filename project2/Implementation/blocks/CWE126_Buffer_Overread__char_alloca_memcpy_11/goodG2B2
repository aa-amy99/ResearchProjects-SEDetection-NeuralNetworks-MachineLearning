<Block for 0x4003e0, 84 bytes>
0x4003e0:	endbr64	
0x4003e4:	push	rbp
0x4003e5:	mov	rbp, rsp
0x4003e8:	sub	rsp, 0x90
0x4003ef:	mov	rax, qword ptr fs:[0x28]
0x4003f8:	mov	qword ptr [rbp - 8], rax
0x4003fc:	xor	eax, eax
0x4003fe:	mov	eax, 0x10
0x400403:	sub	rax, 1
0x400407:	add	rax, 0x3a
0x40040b:	mov	ecx, 0x10
0x400410:	mov	edx, 0
0x400415:	div	rcx
0x400418:	imul	rax, rax, 0x10
0x40041c:	mov	rdx, rax
0x40041f:	and	rdx, 0xfffffffffffff000
0x400426:	mov	rcx, rsp
0x400429:	sub	rcx, rdx
0x40042c:	mov	rdx, rcx
0x40042f:	cmp	rsp, rdx
0x400432:	je	0x400446
<Block for 0x400446, 26 bytes>
0x400446:	mov	rdx, rax
0x400449:	and	edx, 0xfff
0x40044f:	sub	rsp, rdx
0x400452:	mov	rdx, rax
0x400455:	and	edx, 0xfff
0x40045b:	test	rdx, rdx
0x40045e:	je	0x400470
<Block for 0x400434, 18 bytes>
0x400434:	sub	rsp, 0x1000
0x40043b:	or	qword ptr [rsp + 0xff8], 0
0x400444:	jmp	0x40042f
<Block for 0x400470, 73 bytes>
0x400470:	mov	rax, rsp
0x400473:	add	rax, 0xf
0x400477:	shr	rax, 4
0x40047b:	shl	rax, 4
0x40047f:	mov	qword ptr [rbp - 0x80], rax
0x400483:	mov	eax, 0x10
0x400488:	sub	rax, 1
0x40048c:	add	rax, 0x6c
0x400490:	mov	edi, 0x10
0x400495:	mov	edx, 0
0x40049a:	div	rdi
0x40049d:	imul	rax, rax, 0x10
0x4004a1:	mov	rdx, rax
0x4004a4:	and	rdx, 0xfffffffffffff000
0x4004ab:	mov	rsi, rsp
0x4004ae:	sub	rsi, rdx
0x4004b1:	mov	rdx, rsi
0x4004b4:	cmp	rsp, rdx
0x4004b7:	je	0x4004cb
<Block for 0x400460, 89 bytes>
0x400460:	and	eax, 0xfff
0x400465:	sub	rax, 8
0x400469:	add	rax, rsp
0x40046c:	or	qword ptr [rax], 0
0x400470:	mov	rax, rsp
0x400473:	add	rax, 0xf
0x400477:	shr	rax, 4
0x40047b:	shl	rax, 4
0x40047f:	mov	qword ptr [rbp - 0x80], rax
0x400483:	mov	eax, 0x10
0x400488:	sub	rax, 1
0x40048c:	add	rax, 0x6c
0x400490:	mov	edi, 0x10
0x400495:	mov	edx, 0
0x40049a:	div	rdi
0x40049d:	imul	rax, rax, 0x10
0x4004a1:	mov	rdx, rax
0x4004a4:	and	rdx, 0xfffffffffffff000
0x4004ab:	mov	rsi, rsp
0x4004ae:	sub	rsi, rdx
0x4004b1:	mov	rdx, rsi
0x4004b4:	cmp	rsp, rdx
0x4004b7:	je	0x4004cb
<Block for 0x40042f, 5 bytes>
0x40042f:	cmp	rsp, rdx
0x400432:	je	0x400446
<Block for 0x4004cb, 26 bytes>
0x4004cb:	mov	rdx, rax
0x4004ce:	and	edx, 0xfff
0x4004d4:	sub	rsp, rdx
0x4004d7:	mov	rdx, rax
0x4004da:	and	edx, 0xfff
0x4004e0:	test	rdx, rdx
0x4004e3:	je	0x4004f5
<Block for 0x4004b9, 18 bytes>
0x4004b9:	sub	rsp, 0x1000
0x4004c0:	or	qword ptr [rsp + 0xff8], 0
0x4004c9:	jmp	0x4004b4
<Block for 0x4004f5, 41 bytes>
0x4004f5:	mov	rax, rsp
0x4004f8:	add	rax, 0xf
0x4004fc:	shr	rax, 4
0x400500:	shl	rax, 4
0x400504:	mov	qword ptr [rbp - 0x78], rax
0x400508:	mov	rax, qword ptr [rbp - 0x80]
0x40050c:	mov	edx, 0x31
0x400511:	mov	esi, 0x41
0x400516:	mov	rdi, rax
0x400519:	call	0x500000
<Block for 0x4004e5, 57 bytes>
0x4004e5:	and	eax, 0xfff
0x4004ea:	sub	rax, 8
0x4004ee:	add	rax, rsp
0x4004f1:	or	qword ptr [rax], 0
0x4004f5:	mov	rax, rsp
0x4004f8:	add	rax, 0xf
0x4004fc:	shr	rax, 4
0x400500:	shl	rax, 4
0x400504:	mov	qword ptr [rbp - 0x78], rax
0x400508:	mov	rax, qword ptr [rbp - 0x80]
0x40050c:	mov	edx, 0x31
0x400511:	mov	esi, 0x41
0x400516:	mov	rdi, rax
0x400519:	call	0x500000
<Block for 0x4004b4, 5 bytes>
0x4004b4:	cmp	rsp, rdx
0x4004b7:	je	0x4004cb
<Block for 0x40051e, 33 bytes>
0x40051e:	mov	rax, qword ptr [rbp - 0x80]
0x400522:	add	rax, 0x31
0x400526:	mov	byte ptr [rax], 0
0x400529:	mov	rax, qword ptr [rbp - 0x78]
0x40052d:	mov	edx, 0x63
0x400532:	mov	esi, 0x41
0x400537:	mov	rdi, rax
0x40053a:	call	0x500000
<Block for 0x40053f, 21 bytes>
0x40053f:	mov	rax, qword ptr [rbp - 0x78]
0x400543:	add	rax, 0x63
0x400547:	mov	byte ptr [rax], 0
0x40054a:	mov	eax, 0
0x40054f:	call	0x500008
<Block for 0x400554, 4 bytes>
0x400554:	test	eax, eax
0x400556:	je	0x400563
<Block for 0x400563, 22 bytes>
0x400563:	lea	rax, [rbp - 0x70]
0x400567:	mov	edx, 0x63
0x40056c:	mov	esi, 0x43
0x400571:	mov	rdi, rax
0x400574:	call	0x500000
<Block for 0x400558, 33 bytes>
0x400558:	mov	rax, qword ptr [rbp - 0x78]
0x40055c:	mov	qword ptr [rbp - 0x88], rax
0x400563:	lea	rax, [rbp - 0x70]
0x400567:	mov	edx, 0x63
0x40056c:	mov	esi, 0x43
0x400571:	mov	rdi, rax
0x400574:	call	0x500000
<Block for 0x400579, 16 bytes>
0x400579:	mov	byte ptr [rbp - 0xd], 0
0x40057d:	lea	rax, [rbp - 0x70]
0x400581:	mov	rdi, rax
0x400584:	call	0x500010
<Block for 0x400589, 25 bytes>
0x400589:	mov	rdx, rax
0x40058c:	mov	rcx, qword ptr [rbp - 0x88]
0x400593:	lea	rax, [rbp - 0x70]
0x400597:	mov	rsi, rcx
0x40059a:	mov	rdi, rax
0x40059d:	call	0x500018
<Block for 0x4005a2, 16 bytes>
0x4005a2:	mov	byte ptr [rbp - 0xd], 0
0x4005a6:	lea	rax, [rbp - 0x70]
0x4005aa:	mov	rdi, rax
0x4005ad:	call	0x500020
<Block for 0x4005b2, 16 bytes>
0x4005b2:	nop	
0x4005b3:	mov	rax, qword ptr [rbp - 8]
0x4005b7:	xor	rax, qword ptr fs:[0x28]
0x4005c0:	je	0x4005c7
<Block for 0x4005c7, 2 bytes>
0x4005c7:	leave	
0x4005c8:	ret	
<Block for 0x4005c2, 5 bytes>
0x4005c2:	call	0x500028
