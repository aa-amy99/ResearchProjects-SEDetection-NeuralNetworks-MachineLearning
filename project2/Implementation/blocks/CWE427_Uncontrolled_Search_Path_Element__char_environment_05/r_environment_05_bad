<Block for 0x400000, 82 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x130
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	movabs	rax, 0x3d48544150
0x400028:	mov	edx, 0
0x40002d:	mov	qword ptr [rbp - 0x110], rax
0x400034:	mov	qword ptr [rbp - 0x108], rdx
0x40003b:	lea	rdx, [rbp - 0x100]
0x400042:	mov	eax, 0
0x400047:	mov	ecx, 0x1d
0x40004c:	mov	rdi, rdx
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400052, 34 bytes>
0x400052:	mov	rdx, rdi
0x400055:	mov	word ptr [rdx], ax
0x400058:	add	rdx, 2
0x40005c:	lea	rax, [rbp - 0x110]
0x400063:	mov	qword ptr [rbp - 0x128], rax
0x40006a:	mov	eax, dword ptr [rip + 0x264]
0x400070:	test	eax, eax
0x400072:	je	0x4000d9
<Block for 0x40004f, 3 bytes>
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x4000d9, 15 bytes>
0x4000d9:	mov	rax, qword ptr [rbp - 0x128]
0x4000e0:	mov	rdi, rax
0x4000e3:	call	0x500018
<Block for 0x400074, 15 bytes>
0x400074:	mov	rax, qword ptr [rbp - 0x128]
0x40007b:	mov	rdi, rax
0x40007e:	call	0x500000
<Block for 0x4000e8, 16 bytes>
0x4000e8:	nop	
0x4000e9:	mov	rax, qword ptr [rbp - 8]
0x4000ed:	xor	rax, qword ptr fs:[0x28]
0x4000f6:	je	0x4000fd
<Block for 0x400083, 19 bytes>
0x400083:	mov	qword ptr [rbp - 0x120], rax
0x40008a:	lea	rdi, [rip + 0x24b]
0x400091:	call	0x500008
<Block for 0x4000fd, 2 bytes>
0x4000fd:	leave	
0x4000fe:	ret	
<Block for 0x4000f8, 5 bytes>
0x4000f8:	call	0x500020
<Block for 0x400096, 17 bytes>
0x400096:	mov	qword ptr [rbp - 0x118], rax
0x40009d:	cmp	qword ptr [rbp - 0x118], 0
0x4000a5:	je	0x4000d9
<Block for 0x4000a7, 50 bytes>
0x4000a7:	mov	eax, 0xf9
0x4000ac:	sub	rax, qword ptr [rbp - 0x120]
0x4000b3:	mov	rdx, rax
0x4000b6:	mov	rcx, qword ptr [rbp - 0x128]
0x4000bd:	mov	rax, qword ptr [rbp - 0x120]
0x4000c4:	add	rcx, rax
0x4000c7:	mov	rax, qword ptr [rbp - 0x118]
0x4000ce:	mov	rsi, rax
0x4000d1:	mov	rdi, rcx
0x4000d4:	call	0x500010
