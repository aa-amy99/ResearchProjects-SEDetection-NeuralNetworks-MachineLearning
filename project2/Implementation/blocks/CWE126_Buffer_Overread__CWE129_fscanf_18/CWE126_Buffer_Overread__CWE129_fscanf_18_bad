<Block for 0x400000, 70 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0x34], 0xffffffff
0x400022:	nop	
0x400023:	endbr64	
0x400027:	mov	rax, qword ptr [rip + 0xfffd2]
0x40002e:	lea	rdx, [rbp - 0x34]
0x400032:	lea	rsi, [rip + 0x1e7]
0x400039:	mov	rdi, rax
0x40003c:	mov	eax, 0
0x400041:	call	0x500008
<Block for 0x400046, 52 bytes>
0x400046:	nop	
0x400047:	endbr64	
0x40004b:	mov	qword ptr [rbp - 0x30], 0
0x400053:	mov	qword ptr [rbp - 0x28], 0
0x40005b:	mov	qword ptr [rbp - 0x20], 0
0x400063:	mov	qword ptr [rbp - 0x18], 0
0x40006b:	mov	qword ptr [rbp - 0x10], 0
0x400073:	mov	eax, dword ptr [rbp - 0x34]
0x400076:	test	eax, eax
0x400078:	js	0x40008c
<Block for 0x40008c, 12 bytes>
0x40008c:	lea	rdi, [rip + 0x195]
0x400093:	call	0x500018
<Block for 0x40007a, 16 bytes>
0x40007a:	mov	eax, dword ptr [rbp - 0x34]
0x40007d:	cdqe	
0x40007f:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x400083:	mov	edi, eax
0x400085:	call	0x500010
<Block for 0x400098, 16 bytes>
0x400098:	nop	
0x400099:	mov	rax, qword ptr [rbp - 8]
0x40009d:	xor	rax, qword ptr fs:[0x28]
0x4000a6:	je	0x4000ad
<Block for 0x40008a, 2 bytes>
0x40008a:	jmp	0x400098
<Block for 0x4000ad, 2 bytes>
0x4000ad:	leave	
0x4000ae:	ret	
<Block for 0x4000a8, 5 bytes>
0x4000a8:	call	0x500020
