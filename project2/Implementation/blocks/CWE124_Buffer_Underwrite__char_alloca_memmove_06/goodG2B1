<Block for 0x400137, 81 bytes>
0x400137:	endbr64	
0x40013b:	push	rbp
0x40013c:	mov	rbp, rsp
0x40013f:	add	rsp, -0x80
0x400143:	mov	rax, qword ptr fs:[0x28]
0x40014c:	mov	qword ptr [rbp - 8], rax
0x400150:	xor	eax, eax
0x400152:	mov	eax, 0x10
0x400157:	sub	rax, 1
0x40015b:	add	rax, 0x6c
0x40015f:	mov	esi, 0x10
0x400164:	mov	edx, 0
0x400169:	div	rsi
0x40016c:	imul	rax, rax, 0x10
0x400170:	mov	rdx, rax
0x400173:	and	rdx, 0xfffffffffffff000
0x40017a:	mov	rcx, rsp
0x40017d:	sub	rcx, rdx
0x400180:	mov	rdx, rcx
0x400183:	cmp	rsp, rdx
0x400186:	je	0x40019a
<Block for 0x40019a, 26 bytes>
0x40019a:	mov	rdx, rax
0x40019d:	and	edx, 0xfff
0x4001a3:	sub	rsp, rdx
0x4001a6:	mov	rdx, rax
0x4001a9:	and	edx, 0xfff
0x4001af:	test	rdx, rdx
0x4001b2:	je	0x4001c4
<Block for 0x400188, 18 bytes>
0x400188:	sub	rsp, 0x1000
0x40018f:	or	qword ptr [rsp + 0xff8], 0
0x400198:	jmp	0x400183
<Block for 0x4001c4, 41 bytes>
0x4001c4:	mov	rax, rsp
0x4001c7:	add	rax, 0xf
0x4001cb:	shr	rax, 4
0x4001cf:	shl	rax, 4
0x4001d3:	mov	qword ptr [rbp - 0x78], rax
0x4001d7:	mov	rax, qword ptr [rbp - 0x78]
0x4001db:	mov	edx, 0x63
0x4001e0:	mov	esi, 0x41
0x4001e5:	mov	rdi, rax
0x4001e8:	call	0x500000
<Block for 0x4001b4, 57 bytes>
0x4001b4:	and	eax, 0xfff
0x4001b9:	sub	rax, 8
0x4001bd:	add	rax, rsp
0x4001c0:	or	qword ptr [rax], 0
0x4001c4:	mov	rax, rsp
0x4001c7:	add	rax, 0xf
0x4001cb:	shr	rax, 4
0x4001cf:	shl	rax, 4
0x4001d3:	mov	qword ptr [rbp - 0x78], rax
0x4001d7:	mov	rax, qword ptr [rbp - 0x78]
0x4001db:	mov	edx, 0x63
0x4001e0:	mov	esi, 0x41
0x4001e5:	mov	rdi, rax
0x4001e8:	call	0x500000
<Block for 0x400183, 5 bytes>
0x400183:	cmp	rsp, rdx
0x400186:	je	0x40019a
<Block for 0x4001ed, 21 bytes>
0x4001ed:	mov	rax, qword ptr [rbp - 0x78]
0x4001f1:	add	rax, 0x63
0x4001f5:	mov	byte ptr [rax], 0
0x4001f8:	mov	eax, 5
0x4001fd:	cmp	eax, 5
0x400200:	je	0x400210
<Block for 0x400210, 30 bytes>
0x400210:	mov	rax, qword ptr [rbp - 0x78]
0x400214:	mov	qword ptr [rbp - 0x80], rax
0x400218:	lea	rax, [rbp - 0x70]
0x40021c:	mov	edx, 0x63
0x400221:	mov	esi, 0x43
0x400226:	mov	rdi, rax
0x400229:	call	0x500000
<Block for 0x400202, 12 bytes>
0x400202:	lea	rdi, [rip + 0x1c7]
0x400209:	call	0x500010
<Block for 0x40022e, 28 bytes>
0x40022e:	mov	byte ptr [rbp - 0xd], 0
0x400232:	lea	rcx, [rbp - 0x70]
0x400236:	mov	rax, qword ptr [rbp - 0x80]
0x40023a:	mov	edx, 0x64
0x40023f:	mov	rsi, rcx
0x400242:	mov	rdi, rax
0x400245:	call	0x500008
<Block for 0x40020e, 2 bytes>
0x40020e:	jmp	0x400218
<Block for 0x40024a, 23 bytes>
0x40024a:	mov	rax, qword ptr [rbp - 0x80]
0x40024e:	add	rax, 0x63
0x400252:	mov	byte ptr [rax], 0
0x400255:	mov	rax, qword ptr [rbp - 0x80]
0x400259:	mov	rdi, rax
0x40025c:	call	0x500010
<Block for 0x400218, 22 bytes>
0x400218:	lea	rax, [rbp - 0x70]
0x40021c:	mov	edx, 0x63
0x400221:	mov	esi, 0x43
0x400226:	mov	rdi, rax
0x400229:	call	0x500000
<Block for 0x400261, 16 bytes>
0x400261:	nop	
0x400262:	mov	rax, qword ptr [rbp - 8]
0x400266:	xor	rax, qword ptr fs:[0x28]
0x40026f:	je	0x400276
<Block for 0x400276, 2 bytes>
0x400276:	leave	
0x400277:	ret	
<Block for 0x400271, 5 bytes>
0x400271:	call	0x500018
