<Block for 0x4000dc, 55 bytes>
0x4000dc:	endbr64	
0x4000e0:	push	rbp
0x4000e1:	mov	rbp, rsp
0x4000e4:	sub	rsp, 0xf0
0x4000eb:	mov	rax, qword ptr fs:[0x28]
0x4000f4:	mov	qword ptr [rbp - 8], rax
0x4000f8:	xor	eax, eax
0x4000fa:	lea	rax, [rbp - 0xe0]
0x400101:	mov	edx, 0x63
0x400106:	mov	esi, 0x41
0x40010b:	mov	rdi, rax
0x40010e:	call	0x500000
<Block for 0x400113, 15 bytes>
0x400113:	mov	byte ptr [rbp - 0x7d], 0
0x400117:	mov	eax, dword ptr [rip + 0xffeeb]
0x40011d:	cmp	eax, 5
0x400120:	je	0x400130
<Block for 0x400130, 36 bytes>
0x400130:	lea	rax, [rbp - 0xe0]
0x400137:	mov	qword ptr [rbp - 0xf0], rax
0x40013e:	lea	rax, [rbp - 0x70]
0x400142:	mov	edx, 0x63
0x400147:	mov	esi, 0x43
0x40014c:	mov	rdi, rax
0x40014f:	call	0x500000
<Block for 0x400122, 12 bytes>
0x400122:	lea	rdi, [rip + 0x190]
0x400129:	call	0x500010
<Block for 0x400154, 17 bytes>
0x400154:	mov	byte ptr [rbp - 0xd], 0
0x400158:	mov	qword ptr [rbp - 0xe8], 0
0x400163:	jmp	0x400191
<Block for 0x40012e, 2 bytes>
0x40012e:	jmp	0x40013e
<Block for 0x400191, 10 bytes>
0x400191:	cmp	qword ptr [rbp - 0xe8], 0x63
0x400199:	jbe	0x400165
<Block for 0x40013e, 22 bytes>
0x40013e:	lea	rax, [rbp - 0x70]
0x400142:	mov	edx, 0x63
0x400147:	mov	esi, 0x43
0x40014c:	mov	rdi, rax
0x40014f:	call	0x500000
<Block for 0x400165, 54 bytes>
0x400165:	mov	rdx, qword ptr [rbp - 0xf0]
0x40016c:	mov	rax, qword ptr [rbp - 0xe8]
0x400173:	add	rax, rdx
0x400176:	movzx	eax, byte ptr [rax]
0x400179:	lea	rcx, [rbp - 0x70]
0x40017d:	mov	rdx, qword ptr [rbp - 0xe8]
0x400184:	add	rdx, rcx
0x400187:	mov	byte ptr [rdx], al
0x400189:	add	qword ptr [rbp - 0xe8], 1
0x400191:	cmp	qword ptr [rbp - 0xe8], 0x63
0x400199:	jbe	0x400165
<Block for 0x40019b, 16 bytes>
0x40019b:	mov	byte ptr [rbp - 0xd], 0
0x40019f:	lea	rax, [rbp - 0x70]
0x4001a3:	mov	rdi, rax
0x4001a6:	call	0x500010
<Block for 0x4001ab, 16 bytes>
0x4001ab:	nop	
0x4001ac:	mov	rax, qword ptr [rbp - 8]
0x4001b0:	xor	rax, qword ptr fs:[0x28]
0x4001b9:	je	0x4001c0
<Block for 0x4001c0, 2 bytes>
0x4001c0:	leave	
0x4001c1:	ret	
<Block for 0x4001bb, 5 bytes>
0x4001bb:	call	0x500018
