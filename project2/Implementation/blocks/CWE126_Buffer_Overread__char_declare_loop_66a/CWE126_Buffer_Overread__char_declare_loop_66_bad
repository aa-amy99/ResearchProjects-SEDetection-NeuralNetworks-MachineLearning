<Block for 0x400000, 55 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xf0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xb0]
0x400025:	mov	edx, 0x31
0x40002a:	mov	esi, 0x41
0x40002f:	mov	rdi, rax
0x400032:	call	0x500000
<Block for 0x400037, 26 bytes>
0x400037:	mov	byte ptr [rbp - 0x7f], 0
0x40003b:	lea	rax, [rbp - 0x70]
0x40003f:	mov	edx, 0x63
0x400044:	mov	esi, 0x41
0x400049:	mov	rdi, rax
0x40004c:	call	0x500000
<Block for 0x400051, 47 bytes>
0x400051:	mov	byte ptr [rbp - 0xd], 0
0x400055:	lea	rax, [rbp - 0xb0]
0x40005c:	mov	qword ptr [rbp - 0xe8], rax
0x400063:	mov	rax, qword ptr [rbp - 0xe8]
0x40006a:	mov	qword ptr [rbp - 0xd0], rax
0x400071:	lea	rax, [rbp - 0xe0]
0x400078:	mov	rdi, rax
0x40007b:	call	0x500008
<Block for 0x400080, 16 bytes>
0x400080:	nop	
0x400081:	mov	rax, qword ptr [rbp - 8]
0x400085:	xor	rax, qword ptr fs:[0x28]
0x40008e:	je	0x400095
<Block for 0x400095, 2 bytes>
0x400095:	leave	
0x400096:	ret	
<Block for 0x400090, 5 bytes>
0x400090:	call	0x500010
