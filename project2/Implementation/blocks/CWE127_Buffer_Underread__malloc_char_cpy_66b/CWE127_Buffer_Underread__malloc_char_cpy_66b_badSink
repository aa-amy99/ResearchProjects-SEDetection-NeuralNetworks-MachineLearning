<Block for 0x400000, 80 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xf0
0x40000f:	mov	qword ptr [rbp - 0xe8], rdi
0x400016:	mov	rax, qword ptr fs:[0x28]
0x40001f:	mov	qword ptr [rbp - 8], rax
0x400023:	xor	eax, eax
0x400025:	mov	rax, qword ptr [rbp - 0xe8]
0x40002c:	mov	rax, qword ptr [rax + 0x10]
0x400030:	mov	qword ptr [rbp - 0xd8], rax
0x400037:	lea	rax, [rbp - 0xd0]
0x40003e:	mov	edx, 0xc7
0x400043:	mov	esi, 0x43
0x400048:	mov	rdi, rax
0x40004b:	call	0x500000
<Block for 0x400050, 29 bytes>
0x400050:	mov	byte ptr [rbp - 9], 0
0x400054:	mov	rdx, qword ptr [rbp - 0xd8]
0x40005b:	lea	rax, [rbp - 0xd0]
0x400062:	mov	rsi, rdx
0x400065:	mov	rdi, rax
0x400068:	call	0x500008
<Block for 0x40006d, 15 bytes>
0x40006d:	lea	rax, [rbp - 0xd0]
0x400074:	mov	rdi, rax
0x400077:	call	0x500010
<Block for 0x40007c, 16 bytes>
0x40007c:	nop	
0x40007d:	mov	rax, qword ptr [rbp - 8]
0x400081:	xor	rax, qword ptr fs:[0x28]
0x40008a:	je	0x400091
<Block for 0x400091, 2 bytes>
0x400091:	leave	
0x400092:	ret	
<Block for 0x40008c, 5 bytes>
0x40008c:	call	0x500018
