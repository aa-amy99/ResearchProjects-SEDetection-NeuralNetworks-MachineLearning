<Block for 0x400000, 76 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	dword ptr [rbp - 0x34], edi
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	qword ptr [rbp - 0x30], 0
0x400026:	mov	qword ptr [rbp - 0x28], 0
0x40002e:	mov	qword ptr [rbp - 0x20], 0
0x400036:	mov	qword ptr [rbp - 0x18], 0
0x40003e:	mov	qword ptr [rbp - 0x10], 0
0x400046:	cmp	dword ptr [rbp - 0x34], 9
0x40004a:	jg	0x40005e
<Block for 0x40004c, 16 bytes>
0x40004c:	mov	eax, dword ptr [rbp - 0x34]
0x40004f:	cdqe	
0x400051:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x400055:	mov	edi, eax
0x400057:	call	0x500000
<Block for 0x40005e, 12 bytes>
0x40005e:	lea	rdi, [rip + 0x233]
0x400065:	call	0x500008
<Block for 0x40005c, 2 bytes>
0x40005c:	jmp	0x40006a
<Block for 0x40006a, 16 bytes>
0x40006a:	nop	
0x40006b:	mov	rax, qword ptr [rbp - 8]
0x40006f:	xor	rax, qword ptr fs:[0x28]
0x400078:	je	0x40007f
<Block for 0x40007f, 2 bytes>
0x40007f:	leave	
0x400080:	ret	
<Block for 0x40007a, 5 bytes>
0x40007a:	call	0x500010
