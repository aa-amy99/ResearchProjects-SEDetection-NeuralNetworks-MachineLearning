<Block for 0x4001f0, 40 bytes>
0x4001f0:	endbr64	
0x4001f4:	push	rbp
0x4001f5:	mov	rbp, rsp
0x4001f8:	push	rbx
0x4001f9:	sub	rsp, 0x58
0x4001fd:	mov	rax, qword ptr fs:[0x28]
0x400206:	mov	qword ptr [rbp - 0x18], rax
0x40020a:	xor	eax, eax
0x40020c:	lea	rax, [rbp - 0x50]
0x400210:	mov	rdi, rax
0x400213:	call	0x4003a4
<Block for 0x400218, 27 bytes>
0x400218:	mov	qword ptr [rbp - 0x58], 0
0x400220:	lea	rdx, [rbp - 0x58]
0x400224:	lea	rax, [rbp - 0x50]
0x400228:	mov	rsi, rdx
0x40022b:	mov	rdi, rax
0x40022e:	call	0x4004ae
<Block for 0x400233, 19 bytes>
0x400233:	lea	rdx, [rbp - 0x58]
0x400237:	lea	rax, [rbp - 0x50]
0x40023b:	mov	rsi, rdx
0x40023e:	mov	rdi, rax
0x400241:	call	0x4004ae
<Block for 0x400246, 19 bytes>
0x400246:	lea	rdx, [rbp - 0x58]
0x40024a:	lea	rax, [rbp - 0x50]
0x40024e:	mov	rsi, rdx
0x400251:	mov	rdi, rax
0x400254:	call	0x4004ae
<Block for 0x400259, 19 bytes>
0x400259:	lea	rdx, [rbp - 0x50]
0x40025d:	lea	rax, [rbp - 0x30]
0x400261:	mov	rsi, rdx
0x400264:	mov	rdi, rax
0x400267:	call	0x4004e8
<Block for 0x40026c, 12 bytes>
0x40026c:	lea	rax, [rbp - 0x30]
0x400270:	mov	rdi, rax
0x400273:	call	0x500020
<Block for 0x400278, 12 bytes>
0x400278:	lea	rax, [rbp - 0x30]
0x40027c:	mov	rdi, rax
0x40027f:	call	0x4003c4
<Block for 0x400284, 12 bytes>
0x400284:	lea	rax, [rbp - 0x50]
0x400288:	mov	rdi, rax
0x40028b:	call	0x4003c4
<Block for 0x400290, 16 bytes>
0x400290:	nop	
0x400291:	mov	rax, qword ptr [rbp - 0x18]
0x400295:	xor	rax, qword ptr fs:[0x28]
0x40029e:	je	0x4002da
<Block for 0x4002da, 7 bytes>
0x4002da:	add	rsp, 0x58
0x4002de:	pop	rbx
0x4002df:	pop	rbp
0x4002e0:	ret	
<Block for 0x4002a0, 2 bytes>
0x4002a0:	jmp	0x4002d5
<Block for 0x4002d5, 5 bytes>
0x4002d5:	call	0x500010
