<Block for 0x400138, 81 bytes>
0x400138:	endbr64	
0x40013c:	push	rbp
0x40013d:	mov	rbp, rsp
0x400140:	add	rsp, -0x80
0x400144:	mov	rax, qword ptr fs:[0x28]
0x40014d:	mov	qword ptr [rbp - 8], rax
0x400151:	xor	eax, eax
0x400153:	mov	eax, 0x10
0x400158:	sub	rax, 1
0x40015c:	add	rax, 0x6c
0x400160:	mov	esi, 0x10
0x400165:	mov	edx, 0
0x40016a:	div	rsi
0x40016d:	imul	rax, rax, 0x10
0x400171:	mov	rdx, rax
0x400174:	and	rdx, 0xfffffffffffff000
0x40017b:	mov	rcx, rsp
0x40017e:	sub	rcx, rdx
0x400181:	mov	rdx, rcx
0x400184:	cmp	rsp, rdx
0x400187:	je	0x40019b
<Block for 0x40019b, 26 bytes>
0x40019b:	mov	rdx, rax
0x40019e:	and	edx, 0xfff
0x4001a4:	sub	rsp, rdx
0x4001a7:	mov	rdx, rax
0x4001aa:	and	edx, 0xfff
0x4001b0:	test	rdx, rdx
0x4001b3:	je	0x4001c5
<Block for 0x400189, 18 bytes>
0x400189:	sub	rsp, 0x1000
0x400190:	or	qword ptr [rsp + 0xff8], 0
0x400199:	jmp	0x400184
<Block for 0x4001c5, 41 bytes>
0x4001c5:	mov	rax, rsp
0x4001c8:	add	rax, 0xf
0x4001cc:	shr	rax, 4
0x4001d0:	shl	rax, 4
0x4001d4:	mov	qword ptr [rbp - 0x78], rax
0x4001d8:	mov	rax, qword ptr [rbp - 0x78]
0x4001dc:	mov	edx, 0x63
0x4001e1:	mov	esi, 0x41
0x4001e6:	mov	rdi, rax
0x4001e9:	call	0x500000
<Block for 0x4001b5, 57 bytes>
0x4001b5:	and	eax, 0xfff
0x4001ba:	sub	rax, 8
0x4001be:	add	rax, rsp
0x4001c1:	or	qword ptr [rax], 0
0x4001c5:	mov	rax, rsp
0x4001c8:	add	rax, 0xf
0x4001cc:	shr	rax, 4
0x4001d0:	shl	rax, 4
0x4001d4:	mov	qword ptr [rbp - 0x78], rax
0x4001d8:	mov	rax, qword ptr [rbp - 0x78]
0x4001dc:	mov	edx, 0x63
0x4001e1:	mov	esi, 0x41
0x4001e6:	mov	rdi, rax
0x4001e9:	call	0x500000
<Block for 0x400184, 5 bytes>
0x400184:	cmp	rsp, rdx
0x400187:	je	0x40019b
<Block for 0x4001ee, 22 bytes>
0x4001ee:	mov	rax, qword ptr [rbp - 0x78]
0x4001f2:	add	rax, 0x63
0x4001f6:	mov	byte ptr [rax], 0
0x4001f9:	mov	eax, dword ptr [rip + 0x1d1]
0x4001ff:	cmp	eax, 5
0x400202:	je	0x400212
<Block for 0x400212, 30 bytes>
0x400212:	mov	rax, qword ptr [rbp - 0x78]
0x400216:	mov	qword ptr [rbp - 0x80], rax
0x40021a:	lea	rax, [rbp - 0x70]
0x40021e:	mov	edx, 0x63
0x400223:	mov	esi, 0x43
0x400228:	mov	rdi, rax
0x40022b:	call	0x500000
<Block for 0x400204, 12 bytes>
0x400204:	lea	rdi, [rip + 0x1c9]
0x40020b:	call	0x500010
<Block for 0x400230, 28 bytes>
0x400230:	mov	byte ptr [rbp - 0xd], 0
0x400234:	lea	rcx, [rbp - 0x70]
0x400238:	mov	rax, qword ptr [rbp - 0x80]
0x40023c:	mov	edx, 0x64
0x400241:	mov	rsi, rcx
0x400244:	mov	rdi, rax
0x400247:	call	0x500008
<Block for 0x400210, 2 bytes>
0x400210:	jmp	0x40021a
<Block for 0x40024c, 23 bytes>
0x40024c:	mov	rax, qword ptr [rbp - 0x80]
0x400250:	add	rax, 0x63
0x400254:	mov	byte ptr [rax], 0
0x400257:	mov	rax, qword ptr [rbp - 0x80]
0x40025b:	mov	rdi, rax
0x40025e:	call	0x500010
<Block for 0x40021a, 22 bytes>
0x40021a:	lea	rax, [rbp - 0x70]
0x40021e:	mov	edx, 0x63
0x400223:	mov	esi, 0x43
0x400228:	mov	rdi, rax
0x40022b:	call	0x500000
<Block for 0x400263, 16 bytes>
0x400263:	nop	
0x400264:	mov	rax, qword ptr [rbp - 8]
0x400268:	xor	rax, qword ptr fs:[0x28]
0x400271:	je	0x400278
<Block for 0x400278, 2 bytes>
0x400278:	leave	
0x400279:	ret	
<Block for 0x400273, 5 bytes>
0x400273:	call	0x500018
