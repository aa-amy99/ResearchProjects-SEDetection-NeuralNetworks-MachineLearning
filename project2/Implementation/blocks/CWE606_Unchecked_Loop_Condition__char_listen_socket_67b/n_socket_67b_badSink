<Block for 0x400000, 67 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	qword ptr [rbp - 0x28], rdi
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 8], rax
0x40001d:	xor	eax, eax
0x40001f:	mov	rax, qword ptr [rbp - 0x28]
0x400023:	mov	qword ptr [rbp - 0x10], rax
0x400027:	lea	rdx, [rbp - 0x1c]
0x40002b:	mov	rax, qword ptr [rbp - 0x10]
0x40002f:	lea	rsi, [rip + 0x16f]
0x400036:	mov	rdi, rax
0x400039:	mov	eax, 0
0x40003e:	call	0x500000
<Block for 0x400043, 5 bytes>
0x400043:	cmp	eax, 1
0x400046:	jne	0x400072
<Block for 0x400048, 16 bytes>
0x400048:	mov	dword ptr [rbp - 0x14], 0
0x40004f:	mov	dword ptr [rbp - 0x18], 0
0x400056:	jmp	0x400060
<Block for 0x400072, 16 bytes>
0x400072:	nop	
0x400073:	mov	rax, qword ptr [rbp - 8]
0x400077:	xor	rax, qword ptr fs:[0x28]
0x400080:	je	0x400087
<Block for 0x400060, 8 bytes>
0x400060:	mov	eax, dword ptr [rbp - 0x1c]
0x400063:	cmp	dword ptr [rbp - 0x18], eax
0x400066:	jl	0x400058
<Block for 0x400087, 2 bytes>
0x400087:	leave	
0x400088:	ret	
<Block for 0x400082, 5 bytes>
0x400082:	call	0x500010
<Block for 0x400058, 16 bytes>
0x400058:	add	dword ptr [rbp - 0x14], 1
0x40005c:	add	dword ptr [rbp - 0x18], 1
0x400060:	mov	eax, dword ptr [rbp - 0x1c]
0x400063:	cmp	dword ptr [rbp - 0x18], eax
0x400066:	jl	0x400058
<Block for 0x400068, 10 bytes>
0x400068:	mov	eax, dword ptr [rbp - 0x14]
0x40006b:	mov	edi, eax
0x40006d:	call	0x500008
