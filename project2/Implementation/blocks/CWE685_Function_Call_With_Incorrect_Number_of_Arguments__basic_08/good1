<Block for 0x400089, 37 bytes>
0x400089:	endbr64	
0x40008d:	push	rbp
0x40008e:	mov	rbp, rsp
0x400091:	sub	rsp, 0x70
0x400095:	mov	rax, qword ptr fs:[0x28]
0x40009e:	mov	qword ptr [rbp - 8], rax
0x4000a2:	xor	eax, eax
0x4000a4:	mov	eax, 0
0x4000a9:	call	0x40000f
<Block for 0x4000ae, 4 bytes>
0x4000ae:	test	eax, eax
0x4000b0:	je	0x4000c0
<Block for 0x4000c0, 38 bytes>
0x4000c0:	lea	rax, [rbp - 0x70]
0x4000c4:	lea	rcx, [rip + 0xcf]
0x4000cb:	lea	rdx, [rip + 0xc8]
0x4000d2:	lea	rsi, [rip + 0xc5]
0x4000d9:	mov	rdi, rax
0x4000dc:	mov	eax, 0
0x4000e1:	call	0x500000
<Block for 0x4000b2, 12 bytes>
0x4000b2:	lea	rdi, [rip + 0xeb]
0x4000b9:	call	0x500008
<Block for 0x4000e6, 12 bytes>
0x4000e6:	lea	rax, [rbp - 0x70]
0x4000ea:	mov	rdi, rax
0x4000ed:	call	0x500008
<Block for 0x4000be, 2 bytes>
0x4000be:	jmp	0x4000f2
<Block for 0x4000f2, 16 bytes>
0x4000f2:	nop	
0x4000f3:	mov	rax, qword ptr [rbp - 8]
0x4000f7:	xor	rax, qword ptr fs:[0x28]
0x400100:	je	0x400107
<Block for 0x400107, 2 bytes>
0x400107:	leave	
0x400108:	ret	
<Block for 0x400102, 5 bytes>
0x400102:	call	0x500010
