<Block for 0x40029e, 81 bytes>
0x40029e:	endbr64	
0x4002a2:	push	rbp
0x4002a3:	mov	rbp, rsp
0x4002a6:	add	rsp, -0x80
0x4002aa:	mov	rax, qword ptr fs:[0x28]
0x4002b3:	mov	qword ptr [rbp - 8], rax
0x4002b7:	xor	eax, eax
0x4002b9:	mov	eax, 0x10
0x4002be:	sub	rax, 1
0x4002c2:	add	rax, 0x6c
0x4002c6:	mov	esi, 0x10
0x4002cb:	mov	edx, 0
0x4002d0:	div	rsi
0x4002d3:	imul	rax, rax, 0x10
0x4002d7:	mov	rdx, rax
0x4002da:	and	rdx, 0xfffffffffffff000
0x4002e1:	mov	rcx, rsp
0x4002e4:	sub	rcx, rdx
0x4002e7:	mov	rdx, rcx
0x4002ea:	cmp	rsp, rdx
0x4002ed:	je	0x400301
<Block for 0x400301, 26 bytes>
0x400301:	mov	rdx, rax
0x400304:	and	edx, 0xfff
0x40030a:	sub	rsp, rdx
0x40030d:	mov	rdx, rax
0x400310:	and	edx, 0xfff
0x400316:	test	rdx, rdx
0x400319:	je	0x40032b
<Block for 0x4002ef, 18 bytes>
0x4002ef:	sub	rsp, 0x1000
0x4002f6:	or	qword ptr [rsp + 0xff8], 0
0x4002ff:	jmp	0x4002ea
<Block for 0x40032b, 41 bytes>
0x40032b:	mov	rax, rsp
0x40032e:	add	rax, 0xf
0x400332:	shr	rax, 4
0x400336:	shl	rax, 4
0x40033a:	mov	qword ptr [rbp - 0x78], rax
0x40033e:	mov	rax, qword ptr [rbp - 0x78]
0x400342:	mov	edx, 0x63
0x400347:	mov	esi, 0x41
0x40034c:	mov	rdi, rax
0x40034f:	call	0x500000
<Block for 0x40031b, 57 bytes>
0x40031b:	and	eax, 0xfff
0x400320:	sub	rax, 8
0x400324:	add	rax, rsp
0x400327:	or	qword ptr [rax], 0
0x40032b:	mov	rax, rsp
0x40032e:	add	rax, 0xf
0x400332:	shr	rax, 4
0x400336:	shl	rax, 4
0x40033a:	mov	qword ptr [rbp - 0x78], rax
0x40033e:	mov	rax, qword ptr [rbp - 0x78]
0x400342:	mov	edx, 0x63
0x400347:	mov	esi, 0x41
0x40034c:	mov	rdi, rax
0x40034f:	call	0x500000
<Block for 0x4002ea, 5 bytes>
0x4002ea:	cmp	rsp, rdx
0x4002ed:	je	0x400301
<Block for 0x400354, 21 bytes>
0x400354:	mov	rax, qword ptr [rbp - 0x78]
0x400358:	add	rax, 0x63
0x40035c:	mov	byte ptr [rax], 0
0x40035f:	mov	eax, 0
0x400364:	call	0x400000
<Block for 0x400369, 4 bytes>
0x400369:	test	eax, eax
0x40036b:	je	0x400375
<Block for 0x400375, 22 bytes>
0x400375:	lea	rax, [rbp - 0x70]
0x400379:	mov	edx, 0x63
0x40037e:	mov	esi, 0x43
0x400383:	mov	rdi, rax
0x400386:	call	0x500000
<Block for 0x40036d, 30 bytes>
0x40036d:	mov	rax, qword ptr [rbp - 0x78]
0x400371:	mov	qword ptr [rbp - 0x80], rax
0x400375:	lea	rax, [rbp - 0x70]
0x400379:	mov	edx, 0x63
0x40037e:	mov	esi, 0x43
0x400383:	mov	rdi, rax
0x400386:	call	0x500000
<Block for 0x40038b, 28 bytes>
0x40038b:	mov	byte ptr [rbp - 0xd], 0
0x40038f:	lea	rcx, [rbp - 0x70]
0x400393:	mov	rax, qword ptr [rbp - 0x80]
0x400397:	mov	edx, 0x64
0x40039c:	mov	rsi, rcx
0x40039f:	mov	rdi, rax
0x4003a2:	call	0x500008
<Block for 0x4003a7, 23 bytes>
0x4003a7:	mov	rax, qword ptr [rbp - 0x80]
0x4003ab:	add	rax, 0x63
0x4003af:	mov	byte ptr [rax], 0
0x4003b2:	mov	rax, qword ptr [rbp - 0x80]
0x4003b6:	mov	rdi, rax
0x4003b9:	call	0x500010
<Block for 0x4003be, 16 bytes>
0x4003be:	nop	
0x4003bf:	mov	rax, qword ptr [rbp - 8]
0x4003c3:	xor	rax, qword ptr fs:[0x28]
0x4003cc:	je	0x4003d3
<Block for 0x4003d3, 2 bytes>
0x4003d3:	leave	
0x4003d4:	ret	
<Block for 0x4003ce, 5 bytes>
0x4003ce:	call	0x500018
