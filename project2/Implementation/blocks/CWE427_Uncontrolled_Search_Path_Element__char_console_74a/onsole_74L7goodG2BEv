<Block for 0x400282, 46 bytes>
0x400282:	endbr64	
0x400286:	push	rbp
0x400287:	mov	rbp, rsp
0x40028a:	push	rbx
0x40028b:	sub	rsp, 0x188
0x400292:	mov	rax, qword ptr fs:[0x28]
0x40029b:	mov	qword ptr [rbp - 0x18], rax
0x40029f:	xor	eax, eax
0x4002a1:	lea	rax, [rbp - 0x180]
0x4002a8:	mov	rdi, rax
0x4002ab:	call	0x4005ac
<Block for 0x4002b0, 52 bytes>
0x4002b0:	movabs	rax, 0x3d48544150
0x4002ba:	mov	edx, 0
0x4002bf:	mov	qword ptr [rbp - 0x120], rax
0x4002c6:	mov	qword ptr [rbp - 0x118], rdx
0x4002cd:	lea	rdx, [rbp - 0x110]
0x4002d4:	mov	eax, 0
0x4002d9:	mov	ecx, 0x1d
0x4002de:	mov	rdi, rdx
0x4002e1:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002e4, 51 bytes>
0x4002e4:	mov	rdx, rdi
0x4002e7:	mov	word ptr [rdx], ax
0x4002ea:	add	rdx, 2
0x4002ee:	lea	rax, [rbp - 0x120]
0x4002f5:	mov	qword ptr [rbp - 0x188], rax
0x4002fc:	mov	rax, qword ptr [rbp - 0x188]
0x400303:	mov	rcx, -1
0x40030a:	mov	rdx, rax
0x40030d:	mov	eax, 0
0x400312:	mov	rdi, rdx
0x400315:	repne scasb	al, byte ptr [rdi]
<Block for 0x4002e1, 3 bytes>
0x4002e1:	rep stosq	qword ptr [rdi], rax
<Block for 0x400317, 65 bytes>
0x400317:	mov	rax, rcx
0x40031a:	not	rax
0x40031d:	lea	rdx, [rax - 1]
0x400321:	mov	rax, qword ptr [rbp - 0x188]
0x400328:	add	rax, rdx
0x40032b:	mov	dword ptr [rax], 0x6e69622f
0x400331:	mov	byte ptr [rax + 4], 0
0x400335:	mov	dword ptr [rbp - 0x150], 0
0x40033f:	lea	rdx, [rbp - 0x150]
0x400346:	lea	rax, [rbp - 0x180]
0x40034d:	mov	rsi, rdx
0x400350:	mov	rdi, rax
0x400353:	call	0x400766
<Block for 0x400315, 2 bytes>
0x400315:	repne scasb	al, byte ptr [rdi]
<Block for 0x400358, 45 bytes>
0x400358:	mov	rdx, qword ptr [rbp - 0x188]
0x40035f:	mov	qword ptr [rax], rdx
0x400362:	mov	dword ptr [rbp - 0x150], 1
0x40036c:	lea	rdx, [rbp - 0x150]
0x400373:	lea	rax, [rbp - 0x180]
0x40037a:	mov	rsi, rdx
0x40037d:	mov	rdi, rax
0x400380:	call	0x400766
<Block for 0x400385, 45 bytes>
0x400385:	mov	rdx, qword ptr [rbp - 0x188]
0x40038c:	mov	qword ptr [rax], rdx
0x40038f:	mov	dword ptr [rbp - 0x150], 2
0x400399:	lea	rdx, [rbp - 0x150]
0x4003a0:	lea	rax, [rbp - 0x180]
0x4003a7:	mov	rsi, rdx
0x4003aa:	mov	rdi, rax
0x4003ad:	call	0x400766
<Block for 0x4003b2, 35 bytes>
0x4003b2:	mov	rdx, qword ptr [rbp - 0x188]
0x4003b9:	mov	qword ptr [rax], rdx
0x4003bc:	lea	rdx, [rbp - 0x180]
0x4003c3:	lea	rax, [rbp - 0x150]
0x4003ca:	mov	rsi, rdx
0x4003cd:	mov	rdi, rax
0x4003d0:	call	0x4005ec
<Block for 0x4003d5, 15 bytes>
0x4003d5:	lea	rax, [rbp - 0x150]
0x4003dc:	mov	rdi, rax
0x4003df:	call	0x500038
<Block for 0x4003e4, 15 bytes>
0x4003e4:	lea	rax, [rbp - 0x150]
0x4003eb:	mov	rdi, rax
0x4003ee:	call	0x4005cc
<Block for 0x4003f3, 15 bytes>
0x4003f3:	lea	rax, [rbp - 0x180]
0x4003fa:	mov	rdi, rax
0x4003fd:	call	0x4005cc
<Block for 0x400402, 16 bytes>
0x400402:	nop	
0x400403:	mov	rax, qword ptr [rbp - 0x18]
0x400407:	xor	rax, qword ptr fs:[0x28]
0x400410:	je	0x400452
<Block for 0x400452, 10 bytes>
0x400452:	add	rsp, 0x188
0x400459:	pop	rbx
0x40045a:	pop	rbp
0x40045b:	ret	
<Block for 0x400412, 2 bytes>
0x400412:	jmp	0x40044d
<Block for 0x40044d, 5 bytes>
0x40044d:	call	0x500030
