<Block for 0x400155, 84 bytes>
0x400155:	endbr64	
0x400159:	push	rbp
0x40015a:	mov	rbp, rsp
0x40015d:	sub	rsp, 0x90
0x400164:	mov	rax, qword ptr fs:[0x28]
0x40016d:	mov	qword ptr [rbp - 8], rax
0x400171:	xor	eax, eax
0x400173:	mov	eax, 0x10
0x400178:	sub	rax, 1
0x40017c:	add	rax, 0x6c
0x400180:	mov	esi, 0x10
0x400185:	mov	edx, 0
0x40018a:	div	rsi
0x40018d:	imul	rax, rax, 0x10
0x400191:	mov	rdx, rax
0x400194:	and	rdx, 0xfffffffffffff000
0x40019b:	mov	rcx, rsp
0x40019e:	sub	rcx, rdx
0x4001a1:	mov	rdx, rcx
0x4001a4:	cmp	rsp, rdx
0x4001a7:	je	0x4001bb
<Block for 0x4001bb, 26 bytes>
0x4001bb:	mov	rdx, rax
0x4001be:	and	edx, 0xfff
0x4001c4:	sub	rsp, rdx
0x4001c7:	mov	rdx, rax
0x4001ca:	and	edx, 0xfff
0x4001d0:	test	rdx, rdx
0x4001d3:	je	0x4001e5
<Block for 0x4001a9, 18 bytes>
0x4001a9:	sub	rsp, 0x1000
0x4001b0:	or	qword ptr [rsp + 0xff8], 0
0x4001b9:	jmp	0x4001a4
<Block for 0x4001e5, 47 bytes>
0x4001e5:	mov	rax, rsp
0x4001e8:	add	rax, 0xf
0x4001ec:	shr	rax, 4
0x4001f0:	shl	rax, 4
0x4001f4:	mov	qword ptr [rbp - 0x90], rax
0x4001fb:	mov	rax, qword ptr [rbp - 0x90]
0x400202:	mov	edx, 0x63
0x400207:	mov	esi, 0x41
0x40020c:	mov	rdi, rax
0x40020f:	call	0x500000
<Block for 0x4001d5, 63 bytes>
0x4001d5:	and	eax, 0xfff
0x4001da:	sub	rax, 8
0x4001de:	add	rax, rsp
0x4001e1:	or	qword ptr [rax], 0
0x4001e5:	mov	rax, rsp
0x4001e8:	add	rax, 0xf
0x4001ec:	shr	rax, 4
0x4001f0:	shl	rax, 4
0x4001f4:	mov	qword ptr [rbp - 0x90], rax
0x4001fb:	mov	rax, qword ptr [rbp - 0x90]
0x400202:	mov	edx, 0x63
0x400207:	mov	esi, 0x41
0x40020c:	mov	rdi, rax
0x40020f:	call	0x500000
<Block for 0x4001a4, 5 bytes>
0x4001a4:	cmp	rsp, rdx
0x4001a7:	je	0x4001bb
<Block for 0x400214, 69 bytes>
0x400214:	mov	rax, qword ptr [rbp - 0x90]
0x40021b:	add	rax, 0x63
0x40021f:	mov	byte ptr [rax], 0
0x400222:	mov	rax, qword ptr [rbp - 0x90]
0x400229:	mov	qword ptr [rbp - 0x88], rax
0x400230:	mov	rax, qword ptr [rbp - 0x88]
0x400237:	mov	qword ptr [rbp - 0x80], rax
0x40023b:	mov	rax, qword ptr [rbp - 0x80]
0x40023f:	mov	qword ptr [rbp - 0x78], rax
0x400243:	lea	rax, [rbp - 0x70]
0x400247:	mov	edx, 0x63
0x40024c:	mov	esi, 0x43
0x400251:	mov	rdi, rax
0x400254:	call	0x500000
<Block for 0x400259, 16 bytes>
0x400259:	mov	byte ptr [rbp - 0xd], 0
0x40025d:	lea	rax, [rbp - 0x70]
0x400261:	mov	rdi, rax
0x400264:	call	0x500008
<Block for 0x400269, 22 bytes>
0x400269:	mov	rdx, rax
0x40026c:	mov	rcx, qword ptr [rbp - 0x78]
0x400270:	lea	rax, [rbp - 0x70]
0x400274:	mov	rsi, rcx
0x400277:	mov	rdi, rax
0x40027a:	call	0x500010
<Block for 0x40027f, 16 bytes>
0x40027f:	mov	byte ptr [rbp - 0xd], 0
0x400283:	lea	rax, [rbp - 0x70]
0x400287:	mov	rdi, rax
0x40028a:	call	0x500018
<Block for 0x40028f, 16 bytes>
0x40028f:	nop	
0x400290:	mov	rax, qword ptr [rbp - 8]
0x400294:	xor	rax, qword ptr fs:[0x28]
0x40029d:	je	0x4002a4
<Block for 0x4002a4, 2 bytes>
0x4002a4:	leave	
0x4002a5:	ret	
<Block for 0x40029f, 5 bytes>
0x40029f:	call	0x500020
