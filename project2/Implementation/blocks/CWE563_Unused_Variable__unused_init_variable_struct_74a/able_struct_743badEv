<Block for 0x400000, 43 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x88
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 0x18], rax
0x40001d:	xor	eax, eax
0x40001f:	lea	rax, [rbp - 0x80]
0x400023:	mov	rdi, rax
0x400026:	call	0x4003ac
<Block for 0x40002b, 46 bytes>
0x40002b:	mov	dword ptr [rbp - 0x88], 0
0x400035:	mov	dword ptr [rbp - 0x84], 0
0x40003f:	mov	dword ptr [rbp - 0x50], 0
0x400046:	lea	rdx, [rbp - 0x50]
0x40004a:	lea	rax, [rbp - 0x80]
0x40004e:	mov	rsi, rdx
0x400051:	mov	rdi, rax
0x400054:	call	0x400562
<Block for 0x400059, 36 bytes>
0x400059:	mov	rdx, qword ptr [rbp - 0x88]
0x400060:	mov	qword ptr [rax], rdx
0x400063:	mov	dword ptr [rbp - 0x50], 1
0x40006a:	lea	rdx, [rbp - 0x50]
0x40006e:	lea	rax, [rbp - 0x80]
0x400072:	mov	rsi, rdx
0x400075:	mov	rdi, rax
0x400078:	call	0x400562
<Block for 0x40007d, 36 bytes>
0x40007d:	mov	rdx, qword ptr [rbp - 0x88]
0x400084:	mov	qword ptr [rax], rdx
0x400087:	mov	dword ptr [rbp - 0x50], 2
0x40008e:	lea	rdx, [rbp - 0x50]
0x400092:	lea	rax, [rbp - 0x80]
0x400096:	mov	rsi, rdx
0x400099:	mov	rdi, rax
0x40009c:	call	0x400562
<Block for 0x4000a1, 29 bytes>
0x4000a1:	mov	rdx, qword ptr [rbp - 0x88]
0x4000a8:	mov	qword ptr [rax], rdx
0x4000ab:	lea	rdx, [rbp - 0x80]
0x4000af:	lea	rax, [rbp - 0x50]
0x4000b3:	mov	rsi, rdx
0x4000b6:	mov	rdi, rax
0x4000b9:	call	0x4003ec
<Block for 0x4000be, 12 bytes>
0x4000be:	lea	rax, [rbp - 0x50]
0x4000c2:	mov	rdi, rax
0x4000c5:	call	0x500000
<Block for 0x4000ca, 12 bytes>
0x4000ca:	lea	rax, [rbp - 0x50]
0x4000ce:	mov	rdi, rax
0x4000d1:	call	0x4003cc
<Block for 0x4000d6, 12 bytes>
0x4000d6:	lea	rax, [rbp - 0x80]
0x4000da:	mov	rdi, rax
0x4000dd:	call	0x4003cc
<Block for 0x4000e2, 16 bytes>
0x4000e2:	nop	
0x4000e3:	mov	rax, qword ptr [rbp - 0x18]
0x4000e7:	xor	rax, qword ptr fs:[0x28]
0x4000f0:	je	0x40012c
<Block for 0x40012c, 10 bytes>
0x40012c:	add	rsp, 0x88
0x400133:	pop	rbx
0x400134:	pop	rbp
0x400135:	ret	
<Block for 0x4000f2, 2 bytes>
0x4000f2:	jmp	0x400127
<Block for 0x400127, 5 bytes>
0x400127:	call	0x500010
