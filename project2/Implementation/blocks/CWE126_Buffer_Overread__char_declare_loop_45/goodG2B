<Block for 0x40020c, 55 bytes>
0x40020c:	endbr64	
0x400210:	push	rbp
0x400211:	mov	rbp, rsp
0x400214:	sub	rsp, 0xc0
0x40021b:	mov	rax, qword ptr fs:[0x28]
0x400224:	mov	qword ptr [rbp - 8], rax
0x400228:	xor	eax, eax
0x40022a:	lea	rax, [rbp - 0xb0]
0x400231:	mov	edx, 0x31
0x400236:	mov	esi, 0x41
0x40023b:	mov	rdi, rax
0x40023e:	call	0x500000
<Block for 0x400243, 26 bytes>
0x400243:	mov	byte ptr [rbp - 0x7f], 0
0x400247:	lea	rax, [rbp - 0x70]
0x40024b:	mov	edx, 0x63
0x400250:	mov	esi, 0x41
0x400255:	mov	rdi, rax
0x400258:	call	0x500000
<Block for 0x40025d, 39 bytes>
0x40025d:	mov	byte ptr [rbp - 0xd], 0
0x400261:	lea	rax, [rbp - 0x70]
0x400265:	mov	qword ptr [rbp - 0xb8], rax
0x40026c:	mov	rax, qword ptr [rbp - 0xb8]
0x400273:	mov	qword ptr [rip + 0x3e], rax
0x40027a:	mov	eax, 0
0x40027f:	call	0x40014f
<Block for 0x400284, 16 bytes>
0x400284:	nop	
0x400285:	mov	rax, qword ptr [rbp - 8]
0x400289:	xor	rax, qword ptr fs:[0x28]
0x400292:	je	0x400299
<Block for 0x400299, 2 bytes>
0x400299:	leave	
0x40029a:	ret	
<Block for 0x400294, 5 bytes>
0x400294:	call	0x500018
