<Block for 0x40006d, 18 bytes>
0x40006d:	endbr64	
0x400071:	push	rbp
0x400072:	mov	rbp, rsp
0x400075:	mov	eax, 0
0x40007a:	call	0x500000
<Block for 0x40007f, 4 bytes>
0x40007f:	test	eax, eax
0x400081:	je	0x4000b7
<Block for 0x4000b7, 32 bytes>
0x4000b7:	mov	rax, qword ptr [rip + 0xfff4a]
0x4000be:	mov	rcx, rax
0x4000c1:	mov	edx, 6
0x4000c6:	mov	esi, 1
0x4000cb:	lea	rdi, [rip + 0x2f]
0x4000d2:	call	0x500010
<Block for 0x400083, 32 bytes>
0x400083:	mov	rax, qword ptr [rip + 0xfff7e]
0x40008a:	mov	rcx, rax
0x40008d:	mov	edx, 6
0x400092:	mov	esi, 1
0x400097:	lea	rdi, [rip + 0x63]
0x40009e:	call	0x500010
<Block for 0x4000d7, 6 bytes>
0x4000d7:	cmp	rax, 6
0x4000db:	je	0x4000e9
<Block for 0x4000a3, 6 bytes>
0x4000a3:	cmp	rax, 6
0x4000a7:	je	0x4000e9
<Block for 0x4000e9, 3 bytes>
0x4000e9:	nop	
0x4000ea:	pop	rbp
0x4000eb:	ret	
<Block for 0x4000dd, 12 bytes>
0x4000dd:	lea	rdi, [rip + 0x24]
0x4000e4:	call	0x500018
<Block for 0x4000a9, 12 bytes>
0x4000a9:	lea	rdi, [rip + 0x58]
0x4000b0:	call	0x500018
<Block for 0x4000b5, 2 bytes>
0x4000b5:	jmp	0x4000e9
