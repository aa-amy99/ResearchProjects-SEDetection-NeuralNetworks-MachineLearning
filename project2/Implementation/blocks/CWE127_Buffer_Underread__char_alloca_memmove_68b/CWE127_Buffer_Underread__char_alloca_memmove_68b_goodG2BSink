<Block for 0x40007f, 60 bytes>
0x40007f:	endbr64	
0x400083:	push	rbp
0x400084:	mov	rbp, rsp
0x400087:	add	rsp, -0x80
0x40008b:	mov	rax, qword ptr fs:[0x28]
0x400094:	mov	qword ptr [rbp - 8], rax
0x400098:	xor	eax, eax
0x40009a:	mov	rax, qword ptr [rip + 0xfff87]
0x4000a1:	mov	qword ptr [rbp - 0x78], rax
0x4000a5:	lea	rax, [rbp - 0x70]
0x4000a9:	mov	edx, 0x63
0x4000ae:	mov	esi, 0x43
0x4000b3:	mov	rdi, rax
0x4000b6:	call	0x500008
<Block for 0x4000bb, 28 bytes>
0x4000bb:	mov	byte ptr [rbp - 0xd], 0
0x4000bf:	mov	rcx, qword ptr [rbp - 0x78]
0x4000c3:	lea	rax, [rbp - 0x70]
0x4000c7:	mov	edx, 0x64
0x4000cc:	mov	rsi, rcx
0x4000cf:	mov	rdi, rax
0x4000d2:	call	0x500010
<Block for 0x4000d7, 16 bytes>
0x4000d7:	mov	byte ptr [rbp - 0xd], 0
0x4000db:	lea	rax, [rbp - 0x70]
0x4000df:	mov	rdi, rax
0x4000e2:	call	0x500018
<Block for 0x4000e7, 16 bytes>
0x4000e7:	nop	
0x4000e8:	mov	rax, qword ptr [rbp - 8]
0x4000ec:	xor	rax, qword ptr fs:[0x28]
0x4000f5:	je	0x4000fc
<Block for 0x4000fc, 2 bytes>
0x4000fc:	leave	
0x4000fd:	ret	
<Block for 0x4000f7, 5 bytes>
0x4000f7:	call	0x500020
