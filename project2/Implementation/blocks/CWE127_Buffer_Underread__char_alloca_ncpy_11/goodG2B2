<Block for 0x400286, 81 bytes>
0x400286:	endbr64	
0x40028a:	push	rbp
0x40028b:	mov	rbp, rsp
0x40028e:	add	rsp, -0x80
0x400292:	mov	rax, qword ptr fs:[0x28]
0x40029b:	mov	qword ptr [rbp - 8], rax
0x40029f:	xor	eax, eax
0x4002a1:	mov	eax, 0x10
0x4002a6:	sub	rax, 1
0x4002aa:	add	rax, 0x6c
0x4002ae:	mov	esi, 0x10
0x4002b3:	mov	edx, 0
0x4002b8:	div	rsi
0x4002bb:	imul	rax, rax, 0x10
0x4002bf:	mov	rdx, rax
0x4002c2:	and	rdx, 0xfffffffffffff000
0x4002c9:	mov	rcx, rsp
0x4002cc:	sub	rcx, rdx
0x4002cf:	mov	rdx, rcx
0x4002d2:	cmp	rsp, rdx
0x4002d5:	je	0x4002e9
<Block for 0x4002e9, 26 bytes>
0x4002e9:	mov	rdx, rax
0x4002ec:	and	edx, 0xfff
0x4002f2:	sub	rsp, rdx
0x4002f5:	mov	rdx, rax
0x4002f8:	and	edx, 0xfff
0x4002fe:	test	rdx, rdx
0x400301:	je	0x400313
<Block for 0x4002d7, 18 bytes>
0x4002d7:	sub	rsp, 0x1000
0x4002de:	or	qword ptr [rsp + 0xff8], 0
0x4002e7:	jmp	0x4002d2
<Block for 0x400313, 41 bytes>
0x400313:	mov	rax, rsp
0x400316:	add	rax, 0xf
0x40031a:	shr	rax, 4
0x40031e:	shl	rax, 4
0x400322:	mov	qword ptr [rbp - 0x78], rax
0x400326:	mov	rax, qword ptr [rbp - 0x78]
0x40032a:	mov	edx, 0x63
0x40032f:	mov	esi, 0x41
0x400334:	mov	rdi, rax
0x400337:	call	0x500000
<Block for 0x400303, 57 bytes>
0x400303:	and	eax, 0xfff
0x400308:	sub	rax, 8
0x40030c:	add	rax, rsp
0x40030f:	or	qword ptr [rax], 0
0x400313:	mov	rax, rsp
0x400316:	add	rax, 0xf
0x40031a:	shr	rax, 4
0x40031e:	shl	rax, 4
0x400322:	mov	qword ptr [rbp - 0x78], rax
0x400326:	mov	rax, qword ptr [rbp - 0x78]
0x40032a:	mov	edx, 0x63
0x40032f:	mov	esi, 0x41
0x400334:	mov	rdi, rax
0x400337:	call	0x500000
<Block for 0x4002d2, 5 bytes>
0x4002d2:	cmp	rsp, rdx
0x4002d5:	je	0x4002e9
<Block for 0x40033c, 21 bytes>
0x40033c:	mov	rax, qword ptr [rbp - 0x78]
0x400340:	add	rax, 0x63
0x400344:	mov	byte ptr [rax], 0
0x400347:	mov	eax, 0
0x40034c:	call	0x500008
<Block for 0x400351, 4 bytes>
0x400351:	test	eax, eax
0x400353:	je	0x40035d
<Block for 0x40035d, 22 bytes>
0x40035d:	lea	rax, [rbp - 0x70]
0x400361:	mov	edx, 0x63
0x400366:	mov	esi, 0x43
0x40036b:	mov	rdi, rax
0x40036e:	call	0x500000
<Block for 0x400355, 30 bytes>
0x400355:	mov	rax, qword ptr [rbp - 0x78]
0x400359:	mov	qword ptr [rbp - 0x80], rax
0x40035d:	lea	rax, [rbp - 0x70]
0x400361:	mov	edx, 0x63
0x400366:	mov	esi, 0x43
0x40036b:	mov	rdi, rax
0x40036e:	call	0x500000
<Block for 0x400373, 16 bytes>
0x400373:	mov	byte ptr [rbp - 0xd], 0
0x400377:	lea	rax, [rbp - 0x70]
0x40037b:	mov	rdi, rax
0x40037e:	call	0x500010
<Block for 0x400383, 22 bytes>
0x400383:	mov	rdx, rax
0x400386:	mov	rcx, qword ptr [rbp - 0x80]
0x40038a:	lea	rax, [rbp - 0x70]
0x40038e:	mov	rsi, rcx
0x400391:	mov	rdi, rax
0x400394:	call	0x500018
<Block for 0x400399, 16 bytes>
0x400399:	mov	byte ptr [rbp - 0xd], 0
0x40039d:	lea	rax, [rbp - 0x70]
0x4003a1:	mov	rdi, rax
0x4003a4:	call	0x500020
<Block for 0x4003a9, 16 bytes>
0x4003a9:	nop	
0x4003aa:	mov	rax, qword ptr [rbp - 8]
0x4003ae:	xor	rax, qword ptr fs:[0x28]
0x4003b7:	je	0x4003be
<Block for 0x4003be, 2 bytes>
0x4003be:	leave	
0x4003bf:	ret	
<Block for 0x4003b9, 5 bytes>
0x4003b9:	call	0x500028
