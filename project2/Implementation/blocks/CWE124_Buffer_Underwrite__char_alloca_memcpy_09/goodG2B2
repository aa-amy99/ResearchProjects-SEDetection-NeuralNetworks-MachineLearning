<Block for 0x40035a, 85 bytes>
0x40035a:	endbr64	
0x40035e:	push	rbp
0x40035f:	mov	rbp, rsp
0x400362:	push	rbx
0x400363:	sub	rsp, 0x88
0x40036a:	mov	rax, qword ptr fs:[0x28]
0x400373:	mov	qword ptr [rbp - 0x18], rax
0x400377:	xor	eax, eax
0x400379:	mov	eax, 0x10
0x40037e:	sub	rax, 1
0x400382:	add	rax, 0x6c
0x400386:	mov	esi, 0x10
0x40038b:	mov	edx, 0
0x400390:	div	rsi
0x400393:	imul	rax, rax, 0x10
0x400397:	mov	rdx, rax
0x40039a:	and	rdx, 0xfffffffffffff000
0x4003a1:	mov	rbx, rsp
0x4003a4:	sub	rbx, rdx
0x4003a7:	mov	rdx, rbx
0x4003aa:	cmp	rsp, rdx
0x4003ad:	je	0x4003c1
<Block for 0x4003c1, 26 bytes>
0x4003c1:	mov	rdx, rax
0x4003c4:	and	edx, 0xfff
0x4003ca:	sub	rsp, rdx
0x4003cd:	mov	rdx, rax
0x4003d0:	and	edx, 0xfff
0x4003d6:	test	rdx, rdx
0x4003d9:	je	0x4003eb
<Block for 0x4003af, 18 bytes>
0x4003af:	sub	rsp, 0x1000
0x4003b6:	or	qword ptr [rsp + 0xff8], 0
0x4003bf:	jmp	0x4003aa
<Block for 0x4003eb, 47 bytes>
0x4003eb:	mov	rax, rsp
0x4003ee:	add	rax, 0xf
0x4003f2:	shr	rax, 4
0x4003f6:	shl	rax, 4
0x4003fa:	mov	qword ptr [rbp - 0x88], rax
0x400401:	mov	rax, qword ptr [rbp - 0x88]
0x400408:	mov	edx, 0x63
0x40040d:	mov	esi, 0x41
0x400412:	mov	rdi, rax
0x400415:	call	0x500000
<Block for 0x4003db, 63 bytes>
0x4003db:	and	eax, 0xfff
0x4003e0:	sub	rax, 8
0x4003e4:	add	rax, rsp
0x4003e7:	or	qword ptr [rax], 0
0x4003eb:	mov	rax, rsp
0x4003ee:	add	rax, 0xf
0x4003f2:	shr	rax, 4
0x4003f6:	shl	rax, 4
0x4003fa:	mov	qword ptr [rbp - 0x88], rax
0x400401:	mov	rax, qword ptr [rbp - 0x88]
0x400408:	mov	edx, 0x63
0x40040d:	mov	esi, 0x41
0x400412:	mov	rdi, rax
0x400415:	call	0x500000
<Block for 0x4003aa, 5 bytes>
0x4003aa:	cmp	rsp, rdx
0x4003ad:	je	0x4003c1
<Block for 0x40041a, 24 bytes>
0x40041a:	mov	rax, qword ptr [rbp - 0x88]
0x400421:	add	rax, 0x63
0x400425:	mov	byte ptr [rax], 0
0x400428:	mov	eax, dword ptr [rip + 0xffbda]
0x40042e:	test	eax, eax
0x400430:	je	0x400440
<Block for 0x400440, 22 bytes>
0x400440:	lea	rax, [rbp - 0x80]
0x400444:	mov	edx, 0x63
0x400449:	mov	esi, 0x43
0x40044e:	mov	rdi, rax
0x400451:	call	0x500000
<Block for 0x400432, 36 bytes>
0x400432:	mov	rax, qword ptr [rbp - 0x88]
0x400439:	mov	qword ptr [rbp - 0x90], rax
0x400440:	lea	rax, [rbp - 0x80]
0x400444:	mov	edx, 0x63
0x400449:	mov	esi, 0x43
0x40044e:	mov	rdi, rax
0x400451:	call	0x500000
<Block for 0x400456, 141 bytes>
0x400456:	mov	byte ptr [rbp - 0x1d], 0
0x40045a:	mov	rax, qword ptr [rbp - 0x90]
0x400461:	mov	rcx, qword ptr [rbp - 0x80]
0x400465:	mov	rbx, qword ptr [rbp - 0x78]
0x400469:	mov	qword ptr [rax], rcx
0x40046c:	mov	qword ptr [rax + 8], rbx
0x400470:	mov	rcx, qword ptr [rbp - 0x70]
0x400474:	mov	rbx, qword ptr [rbp - 0x68]
0x400478:	mov	qword ptr [rax + 0x10], rcx
0x40047c:	mov	qword ptr [rax + 0x18], rbx
0x400480:	mov	rcx, qword ptr [rbp - 0x60]
0x400484:	mov	rbx, qword ptr [rbp - 0x58]
0x400488:	mov	qword ptr [rax + 0x20], rcx
0x40048c:	mov	qword ptr [rax + 0x28], rbx
0x400490:	mov	rcx, qword ptr [rbp - 0x50]
0x400494:	mov	rbx, qword ptr [rbp - 0x48]
0x400498:	mov	qword ptr [rax + 0x30], rcx
0x40049c:	mov	qword ptr [rax + 0x38], rbx
0x4004a0:	mov	rcx, qword ptr [rbp - 0x40]
0x4004a4:	mov	rbx, qword ptr [rbp - 0x38]
0x4004a8:	mov	qword ptr [rax + 0x40], rcx
0x4004ac:	mov	qword ptr [rax + 0x48], rbx
0x4004b0:	mov	rcx, qword ptr [rbp - 0x30]
0x4004b4:	mov	rbx, qword ptr [rbp - 0x28]
0x4004b8:	mov	qword ptr [rax + 0x50], rcx
0x4004bc:	mov	qword ptr [rax + 0x58], rbx
0x4004c0:	mov	edx, dword ptr [rbp - 0x20]
0x4004c3:	mov	dword ptr [rax + 0x60], edx
0x4004c6:	mov	rax, qword ptr [rbp - 0x90]
0x4004cd:	add	rax, 0x63
0x4004d1:	mov	byte ptr [rax], 0
0x4004d4:	mov	rax, qword ptr [rbp - 0x90]
0x4004db:	mov	rdi, rax
0x4004de:	call	0x500010
<Block for 0x4004e3, 16 bytes>
0x4004e3:	nop	
0x4004e4:	mov	rax, qword ptr [rbp - 0x18]
0x4004e8:	xor	rax, qword ptr fs:[0x28]
0x4004f1:	je	0x4004f8
<Block for 0x4004f8, 6 bytes>
0x4004f8:	mov	rbx, qword ptr [rbp - 8]
0x4004fc:	leave	
0x4004fd:	ret	
<Block for 0x4004f3, 5 bytes>
0x4004f3:	call	0x500018
