<Block for 0x40010a, 148 bytes>
0x40010a:	endbr64	
0x40010e:	push	rbp
0x40010f:	mov	rbp, rsp
0x400112:	add	rsp, -0x80
0x400116:	mov	rax, qword ptr fs:[0x28]
0x40011f:	mov	qword ptr [rbp - 8], rax
0x400123:	xor	eax, eax
0x400125:	mov	qword ptr [rbp - 0x70], 0
0x40012d:	mov	qword ptr [rbp - 0x68], 0
0x400135:	mov	qword ptr [rbp - 0x60], 0
0x40013d:	mov	qword ptr [rbp - 0x58], 0
0x400145:	mov	qword ptr [rbp - 0x50], 0
0x40014d:	mov	qword ptr [rbp - 0x48], 0
0x400155:	mov	qword ptr [rbp - 0x40], 0
0x40015d:	mov	qword ptr [rbp - 0x38], 0
0x400165:	mov	qword ptr [rbp - 0x30], 0
0x40016d:	mov	qword ptr [rbp - 0x28], 0
0x400175:	mov	qword ptr [rbp - 0x20], 0
0x40017d:	mov	qword ptr [rbp - 0x18], 0
0x400185:	mov	dword ptr [rbp - 0x10], 0
0x40018c:	lea	rax, [rbp - 0x70]
0x400190:	mov	qword ptr [rbp - 0x78], rax
0x400194:	mov	eax, 0
0x400199:	call	0x500000
<Block for 0x40019e, 4 bytes>
0x40019e:	test	eax, eax
0x4001a0:	je	0x4001c3
<Block for 0x4001c3, 43 bytes>
0x4001c3:	mov	rax, qword ptr [rbp - 0x78]
0x4001c7:	movabs	rsi, 0x6e69622f7273752f
0x4001d1:	movabs	rdi, 0x616c2d20736c2f
0x4001db:	mov	qword ptr [rax], rsi
0x4001de:	mov	qword ptr [rax + 8], rdi
0x4001e2:	mov	rax, qword ptr [rbp - 0x78]
0x4001e6:	mov	rdi, rax
0x4001e9:	call	0x500008
<Block for 0x4001a2, 33 bytes>
0x4001a2:	mov	rax, qword ptr [rbp - 0x78]
0x4001a6:	movabs	rdx, 0x6e69622f7273752f
0x4001b0:	movabs	rcx, 0x616c2d20736c2f
0x4001ba:	mov	qword ptr [rax], rdx
0x4001bd:	mov	qword ptr [rax + 8], rcx
0x4001c1:	jmp	0x4001e2
<Block for 0x4001ee, 4 bytes>
0x4001ee:	test	eax, eax
0x4001f0:	jg	0x400208
<Block for 0x4001e2, 12 bytes>
0x4001e2:	mov	rax, qword ptr [rbp - 0x78]
0x4001e6:	mov	rdi, rax
0x4001e9:	call	0x500008
<Block for 0x4001f2, 12 bytes>
0x4001f2:	lea	rdi, [rip + 0x3b]
0x4001f9:	call	0x500010
<Block for 0x400208, 16 bytes>
0x400208:	nop	
0x400209:	mov	rax, qword ptr [rbp - 8]
0x40020d:	xor	rax, qword ptr fs:[0x28]
0x400216:	je	0x40021d
<Block for 0x4001fe, 10 bytes>
0x4001fe:	mov	edi, 1
0x400203:	call	0x500018
<Block for 0x40021d, 2 bytes>
0x40021d:	leave	
0x40021e:	ret	
<Block for 0x400218, 5 bytes>
0x400218:	call	0x500020
