<Block for 0x4002a4, 81 bytes>
0x4002a4:	endbr64	
0x4002a8:	push	rbp
0x4002a9:	mov	rbp, rsp
0x4002ac:	add	rsp, -0x80
0x4002b0:	mov	rax, qword ptr fs:[0x28]
0x4002b9:	mov	qword ptr [rbp - 8], rax
0x4002bd:	xor	eax, eax
0x4002bf:	mov	eax, 0x10
0x4002c4:	sub	rax, 1
0x4002c8:	add	rax, 0x6c
0x4002cc:	mov	esi, 0x10
0x4002d1:	mov	edx, 0
0x4002d6:	div	rsi
0x4002d9:	imul	rax, rax, 0x10
0x4002dd:	mov	rdx, rax
0x4002e0:	and	rdx, 0xfffffffffffff000
0x4002e7:	mov	rcx, rsp
0x4002ea:	sub	rcx, rdx
0x4002ed:	mov	rdx, rcx
0x4002f0:	cmp	rsp, rdx
0x4002f3:	je	0x400307
<Block for 0x400307, 26 bytes>
0x400307:	mov	rdx, rax
0x40030a:	and	edx, 0xfff
0x400310:	sub	rsp, rdx
0x400313:	mov	rdx, rax
0x400316:	and	edx, 0xfff
0x40031c:	test	rdx, rdx
0x40031f:	je	0x400331
<Block for 0x4002f5, 18 bytes>
0x4002f5:	sub	rsp, 0x1000
0x4002fc:	or	qword ptr [rsp + 0xff8], 0
0x400305:	jmp	0x4002f0
<Block for 0x400331, 41 bytes>
0x400331:	mov	rax, rsp
0x400334:	add	rax, 0xf
0x400338:	shr	rax, 4
0x40033c:	shl	rax, 4
0x400340:	mov	qword ptr [rbp - 0x78], rax
0x400344:	mov	rax, qword ptr [rbp - 0x78]
0x400348:	mov	edx, 0x63
0x40034d:	mov	esi, 0x41
0x400352:	mov	rdi, rax
0x400355:	call	0x500000
<Block for 0x400321, 57 bytes>
0x400321:	and	eax, 0xfff
0x400326:	sub	rax, 8
0x40032a:	add	rax, rsp
0x40032d:	or	qword ptr [rax], 0
0x400331:	mov	rax, rsp
0x400334:	add	rax, 0xf
0x400338:	shr	rax, 4
0x40033c:	shl	rax, 4
0x400340:	mov	qword ptr [rbp - 0x78], rax
0x400344:	mov	rax, qword ptr [rbp - 0x78]
0x400348:	mov	edx, 0x63
0x40034d:	mov	esi, 0x41
0x400352:	mov	rdi, rax
0x400355:	call	0x500000
<Block for 0x4002f0, 5 bytes>
0x4002f0:	cmp	rsp, rdx
0x4002f3:	je	0x400307
<Block for 0x40035a, 21 bytes>
0x40035a:	mov	rax, qword ptr [rbp - 0x78]
0x40035e:	add	rax, 0x63
0x400362:	mov	byte ptr [rax], 0
0x400365:	mov	eax, 0
0x40036a:	call	0x400000
<Block for 0x40036f, 4 bytes>
0x40036f:	test	eax, eax
0x400371:	je	0x40037b
<Block for 0x40037b, 22 bytes>
0x40037b:	lea	rax, [rbp - 0x70]
0x40037f:	mov	edx, 0x63
0x400384:	mov	esi, 0x43
0x400389:	mov	rdi, rax
0x40038c:	call	0x500000
<Block for 0x400373, 30 bytes>
0x400373:	mov	rax, qword ptr [rbp - 0x78]
0x400377:	mov	qword ptr [rbp - 0x80], rax
0x40037b:	lea	rax, [rbp - 0x70]
0x40037f:	mov	edx, 0x63
0x400384:	mov	esi, 0x43
0x400389:	mov	rdi, rax
0x40038c:	call	0x500000
<Block for 0x400391, 16 bytes>
0x400391:	mov	byte ptr [rbp - 0xd], 0
0x400395:	lea	rax, [rbp - 0x70]
0x400399:	mov	rdi, rax
0x40039c:	call	0x500008
<Block for 0x4003a1, 22 bytes>
0x4003a1:	mov	rdx, rax
0x4003a4:	mov	rcx, qword ptr [rbp - 0x80]
0x4003a8:	lea	rax, [rbp - 0x70]
0x4003ac:	mov	rsi, rcx
0x4003af:	mov	rdi, rax
0x4003b2:	call	0x500010
<Block for 0x4003b7, 16 bytes>
0x4003b7:	mov	byte ptr [rbp - 0xd], 0
0x4003bb:	lea	rax, [rbp - 0x70]
0x4003bf:	mov	rdi, rax
0x4003c2:	call	0x500018
<Block for 0x4003c7, 16 bytes>
0x4003c7:	nop	
0x4003c8:	mov	rax, qword ptr [rbp - 8]
0x4003cc:	xor	rax, qword ptr fs:[0x28]
0x4003d5:	je	0x4003dc
<Block for 0x4003dc, 2 bytes>
0x4003dc:	leave	
0x4003dd:	ret	
<Block for 0x4003d7, 5 bytes>
0x4003d7:	call	0x500020
