<Block for 0x40014c, 84 bytes>
0x40014c:	endbr64	
0x400150:	push	rbp
0x400151:	mov	rbp, rsp
0x400154:	sub	rsp, 0x90
0x40015b:	mov	rax, qword ptr fs:[0x28]
0x400164:	mov	qword ptr [rbp - 8], rax
0x400168:	xor	eax, eax
0x40016a:	mov	eax, 0x10
0x40016f:	sub	rax, 1
0x400173:	add	rax, 0x6c
0x400177:	mov	esi, 0x10
0x40017c:	mov	edx, 0
0x400181:	div	rsi
0x400184:	imul	rax, rax, 0x10
0x400188:	mov	rdx, rax
0x40018b:	and	rdx, 0xfffffffffffff000
0x400192:	mov	rcx, rsp
0x400195:	sub	rcx, rdx
0x400198:	mov	rdx, rcx
0x40019b:	cmp	rsp, rdx
0x40019e:	je	0x4001b2
<Block for 0x4001b2, 26 bytes>
0x4001b2:	mov	rdx, rax
0x4001b5:	and	edx, 0xfff
0x4001bb:	sub	rsp, rdx
0x4001be:	mov	rdx, rax
0x4001c1:	and	edx, 0xfff
0x4001c7:	test	rdx, rdx
0x4001ca:	je	0x4001dc
<Block for 0x4001a0, 18 bytes>
0x4001a0:	sub	rsp, 0x1000
0x4001a7:	or	qword ptr [rsp + 0xff8], 0
0x4001b0:	jmp	0x40019b
<Block for 0x4001dc, 41 bytes>
0x4001dc:	mov	rax, rsp
0x4001df:	add	rax, 0xf
0x4001e3:	shr	rax, 4
0x4001e7:	shl	rax, 4
0x4001eb:	mov	qword ptr [rbp - 0x78], rax
0x4001ef:	mov	rax, qword ptr [rbp - 0x78]
0x4001f3:	mov	edx, 0x63
0x4001f8:	mov	esi, 0x41
0x4001fd:	mov	rdi, rax
0x400200:	call	0x500000
<Block for 0x4001cc, 57 bytes>
0x4001cc:	and	eax, 0xfff
0x4001d1:	sub	rax, 8
0x4001d5:	add	rax, rsp
0x4001d8:	or	qword ptr [rax], 0
0x4001dc:	mov	rax, rsp
0x4001df:	add	rax, 0xf
0x4001e3:	shr	rax, 4
0x4001e7:	shl	rax, 4
0x4001eb:	mov	qword ptr [rbp - 0x78], rax
0x4001ef:	mov	rax, qword ptr [rbp - 0x78]
0x4001f3:	mov	edx, 0x63
0x4001f8:	mov	esi, 0x41
0x4001fd:	mov	rdi, rax
0x400200:	call	0x500000
<Block for 0x40019b, 5 bytes>
0x40019b:	cmp	rsp, rdx
0x40019e:	je	0x4001b2
<Block for 0x400205, 23 bytes>
0x400205:	mov	rax, qword ptr [rbp - 0x78]
0x400209:	add	rax, 0x63
0x40020d:	mov	byte ptr [rax], 0
0x400210:	mov	dword ptr [rbp - 0x84], 0
0x40021a:	jmp	0x40022b
<Block for 0x40022b, 9 bytes>
0x40022b:	cmp	dword ptr [rbp - 0x84], 0
0x400232:	jle	0x40021c
<Block for 0x40021c, 24 bytes>
0x40021c:	mov	rax, qword ptr [rbp - 0x78]
0x400220:	mov	qword ptr [rbp - 0x80], rax
0x400224:	add	dword ptr [rbp - 0x84], 1
0x40022b:	cmp	dword ptr [rbp - 0x84], 0
0x400232:	jle	0x40021c
<Block for 0x400234, 22 bytes>
0x400234:	lea	rax, [rbp - 0x70]
0x400238:	mov	edx, 0x63
0x40023d:	mov	esi, 0x43
0x400242:	mov	rdi, rax
0x400245:	call	0x500000
<Block for 0x40024a, 28 bytes>
0x40024a:	mov	byte ptr [rbp - 0xd], 0
0x40024e:	lea	rcx, [rbp - 0x70]
0x400252:	mov	rax, qword ptr [rbp - 0x80]
0x400256:	mov	edx, 0x63
0x40025b:	mov	rsi, rcx
0x40025e:	mov	rdi, rax
0x400261:	call	0x500008
<Block for 0x400266, 23 bytes>
0x400266:	mov	rax, qword ptr [rbp - 0x80]
0x40026a:	add	rax, 0x63
0x40026e:	mov	byte ptr [rax], 0
0x400271:	mov	rax, qword ptr [rbp - 0x80]
0x400275:	mov	rdi, rax
0x400278:	call	0x500010
<Block for 0x40027d, 16 bytes>
0x40027d:	nop	
0x40027e:	mov	rax, qword ptr [rbp - 8]
0x400282:	xor	rax, qword ptr fs:[0x28]
0x40028b:	je	0x400292
<Block for 0x400292, 2 bytes>
0x400292:	leave	
0x400293:	ret	
<Block for 0x40028d, 5 bytes>
0x40028d:	call	0x500018
