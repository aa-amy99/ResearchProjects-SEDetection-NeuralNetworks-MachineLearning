<Block for 0x400000, 112 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xb0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xa8]
0x400025:	mov	qword ptr [rbp - 0xa0], rax
0x40002c:	lea	rax, [rbp - 0xa8]
0x400033:	mov	qword ptr [rbp - 0x98], rax
0x40003a:	mov	eax, 0x10
0x40003f:	sub	rax, 1
0x400043:	add	rax, 0x3a
0x400047:	mov	ecx, 0x10
0x40004c:	mov	edx, 0
0x400051:	div	rcx
0x400054:	imul	rax, rax, 0x10
0x400058:	mov	rdx, rax
0x40005b:	and	rdx, 0xfffffffffffff000
0x400062:	mov	rcx, rsp
0x400065:	sub	rcx, rdx
0x400068:	mov	rdx, rcx
0x40006b:	cmp	rsp, rdx
0x40006e:	je	0x400082
<Block for 0x400082, 26 bytes>
0x400082:	mov	rdx, rax
0x400085:	and	edx, 0xfff
0x40008b:	sub	rsp, rdx
0x40008e:	mov	rdx, rax
0x400091:	and	edx, 0xfff
0x400097:	test	rdx, rdx
0x40009a:	je	0x4000ac
<Block for 0x400070, 18 bytes>
0x400070:	sub	rsp, 0x1000
0x400077:	or	qword ptr [rsp + 0xff8], 0
0x400080:	jmp	0x40006b
<Block for 0x4000ac, 76 bytes>
0x4000ac:	mov	rax, rsp
0x4000af:	add	rax, 0xf
0x4000b3:	shr	rax, 4
0x4000b7:	shl	rax, 4
0x4000bb:	mov	qword ptr [rbp - 0x90], rax
0x4000c2:	mov	eax, 0x10
0x4000c7:	sub	rax, 1
0x4000cb:	add	rax, 0x6c
0x4000cf:	mov	edi, 0x10
0x4000d4:	mov	edx, 0
0x4000d9:	div	rdi
0x4000dc:	imul	rax, rax, 0x10
0x4000e0:	mov	rdx, rax
0x4000e3:	and	rdx, 0xfffffffffffff000
0x4000ea:	mov	rsi, rsp
0x4000ed:	sub	rsi, rdx
0x4000f0:	mov	rdx, rsi
0x4000f3:	cmp	rsp, rdx
0x4000f6:	je	0x40010a
<Block for 0x40009c, 92 bytes>
0x40009c:	and	eax, 0xfff
0x4000a1:	sub	rax, 8
0x4000a5:	add	rax, rsp
0x4000a8:	or	qword ptr [rax], 0
0x4000ac:	mov	rax, rsp
0x4000af:	add	rax, 0xf
0x4000b3:	shr	rax, 4
0x4000b7:	shl	rax, 4
0x4000bb:	mov	qword ptr [rbp - 0x90], rax
0x4000c2:	mov	eax, 0x10
0x4000c7:	sub	rax, 1
0x4000cb:	add	rax, 0x6c
0x4000cf:	mov	edi, 0x10
0x4000d4:	mov	edx, 0
0x4000d9:	div	rdi
0x4000dc:	imul	rax, rax, 0x10
0x4000e0:	mov	rdx, rax
0x4000e3:	and	rdx, 0xfffffffffffff000
0x4000ea:	mov	rsi, rsp
0x4000ed:	sub	rsi, rdx
0x4000f0:	mov	rdx, rsi
0x4000f3:	cmp	rsp, rdx
0x4000f6:	je	0x40010a
<Block for 0x40006b, 5 bytes>
0x40006b:	cmp	rsp, rdx
0x40006e:	je	0x400082
<Block for 0x40010a, 26 bytes>
0x40010a:	mov	rdx, rax
0x40010d:	and	edx, 0xfff
0x400113:	sub	rsp, rdx
0x400116:	mov	rdx, rax
0x400119:	and	edx, 0xfff
0x40011f:	test	rdx, rdx
0x400122:	je	0x400134
<Block for 0x4000f8, 18 bytes>
0x4000f8:	sub	rsp, 0x1000
0x4000ff:	or	qword ptr [rsp + 0xff8], 0
0x400108:	jmp	0x4000f3
<Block for 0x400134, 47 bytes>
0x400134:	mov	rax, rsp
0x400137:	add	rax, 0xf
0x40013b:	shr	rax, 4
0x40013f:	shl	rax, 4
0x400143:	mov	qword ptr [rbp - 0x88], rax
0x40014a:	mov	rax, qword ptr [rbp - 0x90]
0x400151:	mov	edx, 0x31
0x400156:	mov	esi, 0x41
0x40015b:	mov	rdi, rax
0x40015e:	call	0x500000
<Block for 0x400124, 63 bytes>
0x400124:	and	eax, 0xfff
0x400129:	sub	rax, 8
0x40012d:	add	rax, rsp
0x400130:	or	qword ptr [rax], 0
0x400134:	mov	rax, rsp
0x400137:	add	rax, 0xf
0x40013b:	shr	rax, 4
0x40013f:	shl	rax, 4
0x400143:	mov	qword ptr [rbp - 0x88], rax
0x40014a:	mov	rax, qword ptr [rbp - 0x90]
0x400151:	mov	edx, 0x31
0x400156:	mov	esi, 0x41
0x40015b:	mov	rdi, rax
0x40015e:	call	0x500000
<Block for 0x4000f3, 5 bytes>
0x4000f3:	cmp	rsp, rdx
0x4000f6:	je	0x40010a
<Block for 0x400163, 39 bytes>
0x400163:	mov	rax, qword ptr [rbp - 0x90]
0x40016a:	add	rax, 0x31
0x40016e:	mov	byte ptr [rax], 0
0x400171:	mov	rax, qword ptr [rbp - 0x88]
0x400178:	mov	edx, 0x63
0x40017d:	mov	esi, 0x41
0x400182:	mov	rdi, rax
0x400185:	call	0x500000
<Block for 0x40018a, 89 bytes>
0x40018a:	mov	rax, qword ptr [rbp - 0x88]
0x400191:	add	rax, 0x63
0x400195:	mov	byte ptr [rax], 0
0x400198:	mov	rax, qword ptr [rbp - 0xa0]
0x40019f:	mov	rax, qword ptr [rax]
0x4001a2:	mov	qword ptr [rbp - 0x80], rax
0x4001a6:	mov	rax, qword ptr [rbp - 0x90]
0x4001ad:	mov	qword ptr [rbp - 0x80], rax
0x4001b1:	mov	rax, qword ptr [rbp - 0xa0]
0x4001b8:	mov	rdx, qword ptr [rbp - 0x80]
0x4001bc:	mov	qword ptr [rax], rdx
0x4001bf:	mov	rax, qword ptr [rbp - 0x98]
0x4001c6:	mov	rax, qword ptr [rax]
0x4001c9:	mov	qword ptr [rbp - 0x78], rax
0x4001cd:	lea	rax, [rbp - 0x70]
0x4001d1:	mov	edx, 0x63
0x4001d6:	mov	esi, 0x43
0x4001db:	mov	rdi, rax
0x4001de:	call	0x500000
<Block for 0x4001e3, 16 bytes>
0x4001e3:	mov	byte ptr [rbp - 0xd], 0
0x4001e7:	lea	rax, [rbp - 0x70]
0x4001eb:	mov	rdi, rax
0x4001ee:	call	0x500008
<Block for 0x4001f3, 22 bytes>
0x4001f3:	mov	rdx, rax
0x4001f6:	mov	rcx, qword ptr [rbp - 0x78]
0x4001fa:	lea	rax, [rbp - 0x70]
0x4001fe:	mov	rsi, rcx
0x400201:	mov	rdi, rax
0x400204:	call	0x500010
<Block for 0x400209, 16 bytes>
0x400209:	mov	byte ptr [rbp - 0xd], 0
0x40020d:	lea	rax, [rbp - 0x70]
0x400211:	mov	rdi, rax
0x400214:	call	0x500018
<Block for 0x400219, 16 bytes>
0x400219:	nop	
0x40021a:	mov	rax, qword ptr [rbp - 8]
0x40021e:	xor	rax, qword ptr fs:[0x28]
0x400227:	je	0x40022e
<Block for 0x40022e, 2 bytes>
0x40022e:	leave	
0x40022f:	ret	
<Block for 0x400229, 5 bytes>
0x400229:	call	0x500020
