<Block for 0x400348, 85 bytes>
0x400348:	endbr64	
0x40034c:	push	rbp
0x40034d:	mov	rbp, rsp
0x400350:	push	rbx
0x400351:	sub	rsp, 0x88
0x400358:	mov	rax, qword ptr fs:[0x28]
0x400361:	mov	qword ptr [rbp - 0x18], rax
0x400365:	xor	eax, eax
0x400367:	mov	eax, 0x10
0x40036c:	sub	rax, 1
0x400370:	add	rax, 0x6c
0x400374:	mov	esi, 0x10
0x400379:	mov	edx, 0
0x40037e:	div	rsi
0x400381:	imul	rax, rax, 0x10
0x400385:	mov	rdx, rax
0x400388:	and	rdx, 0xfffffffffffff000
0x40038f:	mov	rbx, rsp
0x400392:	sub	rbx, rdx
0x400395:	mov	rdx, rbx
0x400398:	cmp	rsp, rdx
0x40039b:	je	0x4003af
<Block for 0x4003af, 26 bytes>
0x4003af:	mov	rdx, rax
0x4003b2:	and	edx, 0xfff
0x4003b8:	sub	rsp, rdx
0x4003bb:	mov	rdx, rax
0x4003be:	and	edx, 0xfff
0x4003c4:	test	rdx, rdx
0x4003c7:	je	0x4003d9
<Block for 0x40039d, 18 bytes>
0x40039d:	sub	rsp, 0x1000
0x4003a4:	or	qword ptr [rsp + 0xff8], 0
0x4003ad:	jmp	0x400398
<Block for 0x4003d9, 47 bytes>
0x4003d9:	mov	rax, rsp
0x4003dc:	add	rax, 0xf
0x4003e0:	shr	rax, 4
0x4003e4:	shl	rax, 4
0x4003e8:	mov	qword ptr [rbp - 0x88], rax
0x4003ef:	mov	rax, qword ptr [rbp - 0x88]
0x4003f6:	mov	edx, 0x63
0x4003fb:	mov	esi, 0x41
0x400400:	mov	rdi, rax
0x400403:	call	0x500000
<Block for 0x4003c9, 63 bytes>
0x4003c9:	and	eax, 0xfff
0x4003ce:	sub	rax, 8
0x4003d2:	add	rax, rsp
0x4003d5:	or	qword ptr [rax], 0
0x4003d9:	mov	rax, rsp
0x4003dc:	add	rax, 0xf
0x4003e0:	shr	rax, 4
0x4003e4:	shl	rax, 4
0x4003e8:	mov	qword ptr [rbp - 0x88], rax
0x4003ef:	mov	rax, qword ptr [rbp - 0x88]
0x4003f6:	mov	edx, 0x63
0x4003fb:	mov	esi, 0x41
0x400400:	mov	rdi, rax
0x400403:	call	0x500000
<Block for 0x400398, 5 bytes>
0x400398:	cmp	rsp, rdx
0x40039b:	je	0x4003af
<Block for 0x400408, 24 bytes>
0x400408:	mov	rax, qword ptr [rbp - 0x88]
0x40040f:	add	rax, 0x63
0x400413:	mov	byte ptr [rax], 0
0x400416:	mov	eax, 0
0x40041b:	call	0x500008
<Block for 0x400420, 4 bytes>
0x400420:	test	eax, eax
0x400422:	je	0x400432
<Block for 0x400432, 22 bytes>
0x400432:	lea	rax, [rbp - 0x80]
0x400436:	mov	edx, 0x63
0x40043b:	mov	esi, 0x43
0x400440:	mov	rdi, rax
0x400443:	call	0x500000
<Block for 0x400424, 36 bytes>
0x400424:	mov	rax, qword ptr [rbp - 0x88]
0x40042b:	mov	qword ptr [rbp - 0x90], rax
0x400432:	lea	rax, [rbp - 0x80]
0x400436:	mov	edx, 0x63
0x40043b:	mov	esi, 0x43
0x400440:	mov	rdi, rax
0x400443:	call	0x500000
<Block for 0x400448, 128 bytes>
0x400448:	mov	byte ptr [rbp - 0x1d], 0
0x40044c:	mov	rax, qword ptr [rbp - 0x90]
0x400453:	mov	rcx, qword ptr [rax]
0x400456:	mov	rbx, qword ptr [rax + 8]
0x40045a:	mov	qword ptr [rbp - 0x80], rcx
0x40045e:	mov	qword ptr [rbp - 0x78], rbx
0x400462:	mov	rcx, qword ptr [rax + 0x10]
0x400466:	mov	rbx, qword ptr [rax + 0x18]
0x40046a:	mov	qword ptr [rbp - 0x70], rcx
0x40046e:	mov	qword ptr [rbp - 0x68], rbx
0x400472:	mov	rcx, qword ptr [rax + 0x20]
0x400476:	mov	rbx, qword ptr [rax + 0x28]
0x40047a:	mov	qword ptr [rbp - 0x60], rcx
0x40047e:	mov	qword ptr [rbp - 0x58], rbx
0x400482:	mov	rcx, qword ptr [rax + 0x30]
0x400486:	mov	rbx, qword ptr [rax + 0x38]
0x40048a:	mov	qword ptr [rbp - 0x50], rcx
0x40048e:	mov	qword ptr [rbp - 0x48], rbx
0x400492:	mov	rcx, qword ptr [rax + 0x40]
0x400496:	mov	rbx, qword ptr [rax + 0x48]
0x40049a:	mov	qword ptr [rbp - 0x40], rcx
0x40049e:	mov	qword ptr [rbp - 0x38], rbx
0x4004a2:	mov	rcx, qword ptr [rax + 0x50]
0x4004a6:	mov	rbx, qword ptr [rax + 0x58]
0x4004aa:	mov	qword ptr [rbp - 0x30], rcx
0x4004ae:	mov	qword ptr [rbp - 0x28], rbx
0x4004b2:	mov	eax, dword ptr [rax + 0x60]
0x4004b5:	mov	dword ptr [rbp - 0x20], eax
0x4004b8:	mov	byte ptr [rbp - 0x1d], 0
0x4004bc:	lea	rax, [rbp - 0x80]
0x4004c0:	mov	rdi, rax
0x4004c3:	call	0x500010
<Block for 0x4004c8, 16 bytes>
0x4004c8:	nop	
0x4004c9:	mov	rax, qword ptr [rbp - 0x18]
0x4004cd:	xor	rax, qword ptr fs:[0x28]
0x4004d6:	je	0x4004dd
<Block for 0x4004dd, 6 bytes>
0x4004dd:	mov	rbx, qword ptr [rbp - 8]
0x4004e1:	leave	
0x4004e2:	ret	
<Block for 0x4004d8, 5 bytes>
0x4004d8:	call	0x500018
