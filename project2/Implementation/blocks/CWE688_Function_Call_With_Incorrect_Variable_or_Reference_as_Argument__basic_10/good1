<Block for 0x40006a, 37 bytes>
0x40006a:	endbr64	
0x40006e:	push	rbp
0x40006f:	mov	rbp, rsp
0x400072:	add	rsp, -0x80
0x400076:	mov	rax, qword ptr fs:[0x28]
0x40007f:	mov	qword ptr [rbp - 8], rax
0x400083:	xor	eax, eax
0x400085:	mov	eax, dword ptr [rip + 0xfff95]
0x40008b:	test	eax, eax
0x40008d:	je	0x40009d
<Block for 0x40009d, 34 bytes>
0x40009d:	mov	dword ptr [rbp - 0x74], 5
0x4000a4:	mov	edx, dword ptr [rbp - 0x74]
0x4000a7:	lea	rax, [rbp - 0x70]
0x4000ab:	lea	rsi, [rip + 0xd1]
0x4000b2:	mov	rdi, rax
0x4000b5:	mov	eax, 0
0x4000ba:	call	0x500008
<Block for 0x40008f, 12 bytes>
0x40008f:	lea	rdi, [rip + 0xd8]
0x400096:	call	0x500010
<Block for 0x4000bf, 12 bytes>
0x4000bf:	lea	rax, [rbp - 0x70]
0x4000c3:	mov	rdi, rax
0x4000c6:	call	0x500010
<Block for 0x40009b, 2 bytes>
0x40009b:	jmp	0x4000cb
<Block for 0x4000cb, 16 bytes>
0x4000cb:	nop	
0x4000cc:	mov	rax, qword ptr [rbp - 8]
0x4000d0:	xor	rax, qword ptr fs:[0x28]
0x4000d9:	je	0x4000e0
<Block for 0x4000e0, 2 bytes>
0x4000e0:	leave	
0x4000e1:	ret	
<Block for 0x4000db, 5 bytes>
0x4000db:	call	0x500018
