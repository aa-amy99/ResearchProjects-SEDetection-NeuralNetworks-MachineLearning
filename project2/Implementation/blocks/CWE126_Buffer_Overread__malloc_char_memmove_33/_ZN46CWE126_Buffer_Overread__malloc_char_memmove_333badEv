<Block for 0x400000, 62 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0x88]
0x400025:	mov	qword ptr [rbp - 0x80], rax
0x400029:	mov	qword ptr [rbp - 0x88], 0
0x400034:	mov	edi, 0x32
0x400039:	call	0x500000
<Block for 0x40003e, 19 bytes>
0x40003e:	mov	qword ptr [rbp - 0x88], rax
0x400045:	mov	rax, qword ptr [rbp - 0x88]
0x40004c:	test	rax, rax
0x40004f:	jne	0x40005b
<Block for 0x400051, 10 bytes>
0x400051:	mov	edi, 0xffffffff
0x400056:	call	0x500008
<Block for 0x40005b, 25 bytes>
0x40005b:	mov	rax, qword ptr [rbp - 0x88]
0x400062:	mov	edx, 0x31
0x400067:	mov	esi, 0x41
0x40006c:	mov	rdi, rax
0x40006f:	call	0x500010
<Block for 0x400074, 47 bytes>
0x400074:	mov	rax, qword ptr [rbp - 0x88]
0x40007b:	add	rax, 0x31
0x40007f:	mov	byte ptr [rax], 0
0x400082:	mov	rax, qword ptr [rbp - 0x80]
0x400086:	mov	rax, qword ptr [rax]
0x400089:	mov	qword ptr [rbp - 0x78], rax
0x40008d:	lea	rax, [rbp - 0x70]
0x400091:	mov	edx, 0x63
0x400096:	mov	esi, 0x43
0x40009b:	mov	rdi, rax
0x40009e:	call	0x500010
<Block for 0x4000a3, 16 bytes>
0x4000a3:	mov	byte ptr [rbp - 0xd], 0
0x4000a7:	lea	rax, [rbp - 0x70]
0x4000ab:	mov	rdi, rax
0x4000ae:	call	0x500018
<Block for 0x4000b3, 22 bytes>
0x4000b3:	mov	rdx, rax
0x4000b6:	mov	rcx, qword ptr [rbp - 0x78]
0x4000ba:	lea	rax, [rbp - 0x70]
0x4000be:	mov	rsi, rcx
0x4000c1:	mov	rdi, rax
0x4000c4:	call	0x500020
<Block for 0x4000c9, 16 bytes>
0x4000c9:	mov	byte ptr [rbp - 0xd], 0
0x4000cd:	lea	rax, [rbp - 0x70]
0x4000d1:	mov	rdi, rax
0x4000d4:	call	0x500028
<Block for 0x4000d9, 12 bytes>
0x4000d9:	mov	rax, qword ptr [rbp - 0x78]
0x4000dd:	mov	rdi, rax
0x4000e0:	call	0x500030
<Block for 0x4000e5, 16 bytes>
0x4000e5:	nop	
0x4000e6:	mov	rax, qword ptr [rbp - 8]
0x4000ea:	xor	rax, qword ptr fs:[0x28]
0x4000f3:	je	0x4000fa
<Block for 0x4000fa, 2 bytes>
0x4000fa:	leave	
0x4000fb:	ret	
<Block for 0x4000f5, 5 bytes>
0x4000f5:	call	0x500038
