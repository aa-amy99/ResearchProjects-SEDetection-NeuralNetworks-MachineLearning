<Block for 0x400000, 82 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x130
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	movabs	rax, 0x3d48544150
0x400028:	mov	edx, 0
0x40002d:	mov	qword ptr [rbp - 0x110], rax
0x400034:	mov	qword ptr [rbp - 0x108], rdx
0x40003b:	lea	rdx, [rbp - 0x100]
0x400042:	mov	eax, 0
0x400047:	mov	ecx, 0x1d
0x40004c:	mov	rdi, rdx
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400052, 35 bytes>
0x400052:	mov	rdx, rdi
0x400055:	mov	word ptr [rdx], ax
0x400058:	add	rdx, 2
0x40005c:	lea	rax, [rbp - 0x110]
0x400063:	mov	qword ptr [rbp - 0x128], rax
0x40006a:	mov	eax, dword ptr [rip + 0xfff90]
0x400070:	cmp	eax, 5
0x400073:	jne	0x4000da
<Block for 0x40004f, 3 bytes>
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400075, 15 bytes>
0x400075:	mov	rax, qword ptr [rbp - 0x128]
0x40007c:	mov	rdi, rax
0x40007f:	call	0x500008
<Block for 0x4000da, 15 bytes>
0x4000da:	mov	rax, qword ptr [rbp - 0x128]
0x4000e1:	mov	rdi, rax
0x4000e4:	call	0x500020
<Block for 0x400084, 19 bytes>
0x400084:	mov	qword ptr [rbp - 0x120], rax
0x40008b:	lea	rdi, [rip + 0x243]
0x400092:	call	0x500010
<Block for 0x4000e9, 16 bytes>
0x4000e9:	nop	
0x4000ea:	mov	rax, qword ptr [rbp - 8]
0x4000ee:	xor	rax, qword ptr fs:[0x28]
0x4000f7:	je	0x4000fe
<Block for 0x400097, 17 bytes>
0x400097:	mov	qword ptr [rbp - 0x118], rax
0x40009e:	cmp	qword ptr [rbp - 0x118], 0
0x4000a6:	je	0x4000da
<Block for 0x4000fe, 2 bytes>
0x4000fe:	leave	
0x4000ff:	ret	
<Block for 0x4000f9, 5 bytes>
0x4000f9:	call	0x500028
<Block for 0x4000a8, 50 bytes>
0x4000a8:	mov	eax, 0xf9
0x4000ad:	sub	rax, qword ptr [rbp - 0x120]
0x4000b4:	mov	rdx, rax
0x4000b7:	mov	rcx, qword ptr [rbp - 0x128]
0x4000be:	mov	rax, qword ptr [rbp - 0x120]
0x4000c5:	add	rcx, rax
0x4000c8:	mov	rax, qword ptr [rbp - 0x118]
0x4000cf:	mov	rsi, rax
0x4000d2:	mov	rdi, rcx
0x4000d5:	call	0x500018
