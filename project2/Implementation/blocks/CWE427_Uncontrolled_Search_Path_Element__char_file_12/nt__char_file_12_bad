<Block for 0x400000, 82 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x130
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	movabs	rax, 0x3d48544150
0x400028:	mov	edx, 0
0x40002d:	mov	qword ptr [rbp - 0x110], rax
0x400034:	mov	qword ptr [rbp - 0x108], rdx
0x40003b:	lea	rdx, [rbp - 0x100]
0x400042:	mov	eax, 0
0x400047:	mov	ecx, 0x1d
0x40004c:	mov	rdi, rdx
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400052, 34 bytes>
0x400052:	mov	rdx, rdi
0x400055:	mov	word ptr [rdx], ax
0x400058:	add	rdx, 2
0x40005c:	lea	rax, [rbp - 0x110]
0x400063:	mov	qword ptr [rbp - 0x128], rax
0x40006a:	mov	eax, 0
0x40006f:	call	0x500000
<Block for 0x40004f, 3 bytes>
0x40004f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400074, 8 bytes>
0x400074:	test	eax, eax
0x400076:	je	0x40013c
<Block for 0x40013c, 27 bytes>
0x40013c:	mov	rax, qword ptr [rbp - 0x128]
0x400143:	mov	rcx, -1
0x40014a:	mov	rdx, rax
0x40014d:	mov	eax, 0
0x400152:	mov	rdi, rdx
0x400155:	repne scasb	al, byte ptr [rdi]
<Block for 0x40007c, 15 bytes>
0x40007c:	mov	rax, qword ptr [rbp - 0x128]
0x400083:	mov	rdi, rax
0x400086:	call	0x500008
<Block for 0x400157, 45 bytes>
0x400157:	mov	rax, rcx
0x40015a:	not	rax
0x40015d:	lea	rdx, [rax - 1]
0x400161:	mov	rax, qword ptr [rbp - 0x128]
0x400168:	add	rax, rdx
0x40016b:	mov	dword ptr [rax], 0x6e69622f
0x400171:	mov	byte ptr [rax + 4], 0
0x400175:	mov	rax, qword ptr [rbp - 0x128]
0x40017c:	mov	rdi, rax
0x40017f:	call	0x500030
<Block for 0x400155, 2 bytes>
0x400155:	repne scasb	al, byte ptr [rdi]
<Block for 0x40008b, 29 bytes>
0x40008b:	mov	qword ptr [rbp - 0x120], rax
0x400092:	mov	eax, 0xfa
0x400097:	sub	rax, qword ptr [rbp - 0x120]
0x40009e:	cmp	rax, 1
0x4000a2:	jbe	0x400175
<Block for 0x400184, 16 bytes>
0x400184:	nop	
0x400185:	mov	rax, qword ptr [rbp - 8]
0x400189:	xor	rax, qword ptr fs:[0x28]
0x400192:	je	0x400199
<Block for 0x400175, 15 bytes>
0x400175:	mov	rax, qword ptr [rbp - 0x128]
0x40017c:	mov	rdi, rax
0x40017f:	call	0x500030
<Block for 0x4000a8, 19 bytes>
0x4000a8:	lea	rsi, [rip + 0x213]
0x4000af:	lea	rdi, [rip + 0x20e]
0x4000b6:	call	0x500010
<Block for 0x400199, 2 bytes>
0x400199:	leave	
0x40019a:	ret	
<Block for 0x400194, 5 bytes>
0x400194:	call	0x500038
<Block for 0x4000bb, 21 bytes>
0x4000bb:	mov	qword ptr [rbp - 0x118], rax
0x4000c2:	cmp	qword ptr [rbp - 0x118], 0
0x4000ca:	je	0x400175
<Block for 0x4000d0, 54 bytes>
0x4000d0:	mov	rax, qword ptr [rbp - 0x120]
0x4000d7:	mov	edx, 0xfa
0x4000dc:	sub	edx, eax
0x4000de:	mov	eax, edx
0x4000e0:	mov	esi, eax
0x4000e2:	mov	rdx, qword ptr [rbp - 0x128]
0x4000e9:	mov	rax, qword ptr [rbp - 0x120]
0x4000f0:	lea	rcx, [rdx + rax]
0x4000f4:	mov	rax, qword ptr [rbp - 0x118]
0x4000fb:	mov	rdx, rax
0x4000fe:	mov	rdi, rcx
0x400101:	call	0x500018
<Block for 0x400106, 5 bytes>
0x400106:	test	rax, rax
0x400109:	jne	0x40012b
<Block for 0x40010b, 12 bytes>
0x40010b:	lea	rdi, [rip + 0x1c0]
0x400112:	call	0x500020
<Block for 0x40012b, 15 bytes>
0x40012b:	mov	rax, qword ptr [rbp - 0x118]
0x400132:	mov	rdi, rax
0x400135:	call	0x500028
<Block for 0x400117, 35 bytes>
0x400117:	mov	rdx, qword ptr [rbp - 0x128]
0x40011e:	mov	rax, qword ptr [rbp - 0x120]
0x400125:	add	rax, rdx
0x400128:	mov	byte ptr [rax], 0
0x40012b:	mov	rax, qword ptr [rbp - 0x118]
0x400132:	mov	rdi, rax
0x400135:	call	0x500028
<Block for 0x40013a, 2 bytes>
0x40013a:	jmp	0x400175
