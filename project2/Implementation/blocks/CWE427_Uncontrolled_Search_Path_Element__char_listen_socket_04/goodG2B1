<Block for 0x40029e, 82 bytes>
0x40029e:	endbr64	
0x4002a2:	push	rbp
0x4002a3:	mov	rbp, rsp
0x4002a6:	sub	rsp, 0x120
0x4002ad:	mov	rax, qword ptr fs:[0x28]
0x4002b6:	mov	qword ptr [rbp - 8], rax
0x4002ba:	xor	eax, eax
0x4002bc:	movabs	rax, 0x3d48544150
0x4002c6:	mov	edx, 0
0x4002cb:	mov	qword ptr [rbp - 0x110], rax
0x4002d2:	mov	qword ptr [rbp - 0x108], rdx
0x4002d9:	lea	rdx, [rbp - 0x100]
0x4002e0:	mov	eax, 0
0x4002e5:	mov	ecx, 0x1d
0x4002ea:	mov	rdi, rdx
0x4002ed:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002f0, 33 bytes>
0x4002f0:	mov	rdx, rdi
0x4002f3:	mov	word ptr [rdx], ax
0x4002f6:	add	rdx, 2
0x4002fa:	lea	rax, [rbp - 0x110]
0x400301:	mov	qword ptr [rbp - 0x118], rax
0x400308:	mov	eax, 0
0x40030d:	test	eax, eax
0x40030f:	je	0x40031f
<Block for 0x4002ed, 3 bytes>
0x4002ed:	rep stosq	qword ptr [rdi], rax
<Block for 0x40031f, 27 bytes>
0x40031f:	mov	rax, qword ptr [rbp - 0x118]
0x400326:	mov	rcx, -1
0x40032d:	mov	rdx, rax
0x400330:	mov	eax, 0
0x400335:	mov	rdi, rdx
0x400338:	repne scasb	al, byte ptr [rdi]
<Block for 0x400311, 12 bytes>
0x400311:	lea	rdi, [rip + 0x160]
0x400318:	call	0x500060
<Block for 0x40033a, 45 bytes>
0x40033a:	mov	rax, rcx
0x40033d:	not	rax
0x400340:	lea	rdx, [rax - 1]
0x400344:	mov	rax, qword ptr [rbp - 0x118]
0x40034b:	add	rax, rdx
0x40034e:	mov	dword ptr [rax], 0x6e69622f
0x400354:	mov	byte ptr [rax + 4], 0
0x400358:	mov	rax, qword ptr [rbp - 0x118]
0x40035f:	mov	rdi, rax
0x400362:	call	0x500050
<Block for 0x400338, 2 bytes>
0x400338:	repne scasb	al, byte ptr [rdi]
<Block for 0x40031d, 2 bytes>
0x40031d:	jmp	0x400358
<Block for 0x400367, 16 bytes>
0x400367:	nop	
0x400368:	mov	rax, qword ptr [rbp - 8]
0x40036c:	xor	rax, qword ptr fs:[0x28]
0x400375:	je	0x40037c
<Block for 0x400358, 15 bytes>
0x400358:	mov	rax, qword ptr [rbp - 0x118]
0x40035f:	mov	rdi, rax
0x400362:	call	0x500050
<Block for 0x40037c, 2 bytes>
0x40037c:	leave	
0x40037d:	ret	
<Block for 0x400377, 5 bytes>
0x400377:	call	0x500058
