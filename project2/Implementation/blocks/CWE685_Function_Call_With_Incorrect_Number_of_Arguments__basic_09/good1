<Block for 0x400067, 37 bytes>
0x400067:	endbr64	
0x40006b:	push	rbp
0x40006c:	mov	rbp, rsp
0x40006f:	sub	rsp, 0x70
0x400073:	mov	rax, qword ptr fs:[0x28]
0x40007c:	mov	qword ptr [rbp - 8], rax
0x400080:	xor	eax, eax
0x400082:	mov	eax, dword ptr [rip + 0xfff98]
0x400088:	test	eax, eax
0x40008a:	je	0x40009a
<Block for 0x40009a, 38 bytes>
0x40009a:	lea	rax, [rbp - 0x70]
0x40009e:	lea	rcx, [rip + 0xcb]
0x4000a5:	lea	rdx, [rip + 0xc4]
0x4000ac:	lea	rsi, [rip + 0xc1]
0x4000b3:	mov	rdi, rax
0x4000b6:	mov	eax, 0
0x4000bb:	call	0x500008
<Block for 0x40008c, 12 bytes>
0x40008c:	lea	rdi, [rip + 0xe7]
0x400093:	call	0x500010
<Block for 0x4000c0, 12 bytes>
0x4000c0:	lea	rax, [rbp - 0x70]
0x4000c4:	mov	rdi, rax
0x4000c7:	call	0x500010
<Block for 0x400098, 2 bytes>
0x400098:	jmp	0x4000cc
<Block for 0x4000cc, 16 bytes>
0x4000cc:	nop	
0x4000cd:	mov	rax, qword ptr [rbp - 8]
0x4000d1:	xor	rax, qword ptr fs:[0x28]
0x4000da:	je	0x4000e1
<Block for 0x4000e1, 2 bytes>
0x4000e1:	leave	
0x4000e2:	ret	
<Block for 0x4000dc, 5 bytes>
0x4000dc:	call	0x500018
