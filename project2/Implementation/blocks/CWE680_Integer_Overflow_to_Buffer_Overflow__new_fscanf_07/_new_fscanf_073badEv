<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0x24], 0xffffffff
0x400022:	mov	eax, dword ptr [rip + 0x200]
0x400028:	cmp	eax, 5
0x40002b:	jne	0x40004c
<Block for 0x40002d, 31 bytes>
0x40002d:	mov	rax, qword ptr [rip + 0xfffcc]
0x400034:	lea	rdx, [rbp - 0x24]
0x400038:	lea	rsi, [rip + 0x1ed]
0x40003f:	mov	rdi, rax
0x400042:	mov	eax, 0
0x400047:	call	0x500008
<Block for 0x40004c, 25 bytes>
0x40004c:	mov	eax, dword ptr [rbp - 0x24]
0x40004f:	cdqe	
0x400051:	shl	rax, 2
0x400055:	mov	qword ptr [rbp - 0x18], rax
0x400059:	mov	rax, qword ptr [rbp - 0x18]
0x40005d:	mov	rdi, rax
0x400060:	call	0x500010
<Block for 0x400065, 23 bytes>
0x400065:	mov	qword ptr [rbp - 0x10], rax
0x400069:	mov	qword ptr [rbp - 0x20], 0
0x400071:	mov	eax, dword ptr [rbp - 0x24]
0x400074:	cdqe	
0x400076:	cmp	qword ptr [rbp - 0x20], rax
0x40007a:	jae	0x40009c
<Block for 0x40007c, 32 bytes>
0x40007c:	mov	rax, qword ptr [rbp - 0x20]
0x400080:	lea	rdx, [rax*4]
0x400088:	mov	rax, qword ptr [rbp - 0x10]
0x40008c:	add	rax, rdx
0x40008f:	mov	dword ptr [rax], 0
0x400095:	add	qword ptr [rbp - 0x20], 1
0x40009a:	jmp	0x400071
<Block for 0x40009c, 13 bytes>
0x40009c:	mov	rax, qword ptr [rbp - 0x10]
0x4000a0:	mov	eax, dword ptr [rax]
0x4000a2:	mov	edi, eax
0x4000a4:	call	0x500018
<Block for 0x400071, 11 bytes>
0x400071:	mov	eax, dword ptr [rbp - 0x24]
0x400074:	cdqe	
0x400076:	cmp	qword ptr [rbp - 0x20], rax
0x40007a:	jae	0x40009c
<Block for 0x4000a9, 7 bytes>
0x4000a9:	cmp	qword ptr [rbp - 0x10], 0
0x4000ae:	je	0x4000bc
<Block for 0x4000bc, 16 bytes>
0x4000bc:	nop	
0x4000bd:	mov	rax, qword ptr [rbp - 8]
0x4000c1:	xor	rax, qword ptr fs:[0x28]
0x4000ca:	je	0x4000d1
<Block for 0x4000b0, 12 bytes>
0x4000b0:	mov	rax, qword ptr [rbp - 0x10]
0x4000b4:	mov	rdi, rax
0x4000b7:	call	0x500020
<Block for 0x4000d1, 2 bytes>
0x4000d1:	leave	
0x4000d2:	ret	
<Block for 0x4000cc, 5 bytes>
0x4000cc:	call	0x500028
