<Block for 0x400000, 30 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	qword ptr [rbp - 8], 0
0x400014:	mov	edi, 0x190
0x400019:	call	0x500000
<Block for 0x40001e, 19 bytes>
0x40001e:	mov	qword ptr [rbp - 8], rax
0x400022:	mov	qword ptr [rbp - 0x10], 0
0x40002a:	cmp	qword ptr [rbp - 0x10], 0x63
0x40002f:	ja	0x400051
<Block for 0x400031, 32 bytes>
0x400031:	mov	rax, qword ptr [rbp - 0x10]
0x400035:	lea	rdx, [rax*4]
0x40003d:	mov	rax, qword ptr [rbp - 8]
0x400041:	add	rax, rdx
0x400044:	mov	dword ptr [rax], 5
0x40004a:	add	qword ptr [rbp - 0x10], 1
0x40004f:	jmp	0x40002a
<Block for 0x400051, 7 bytes>
0x400051:	cmp	qword ptr [rbp - 8], 0
0x400056:	je	0x400064
<Block for 0x40002a, 7 bytes>
0x40002a:	cmp	qword ptr [rbp - 0x10], 0x63
0x40002f:	ja	0x400051
<Block for 0x400064, 13 bytes>
0x400064:	mov	rax, qword ptr [rbp - 8]
0x400068:	mov	eax, dword ptr [rax]
0x40006a:	mov	edi, eax
0x40006c:	call	0x500010
<Block for 0x400058, 12 bytes>
0x400058:	mov	rax, qword ptr [rbp - 8]
0x40005c:	mov	rdi, rax
0x40005f:	call	0x500008
<Block for 0x400071, 3 bytes>
0x400071:	nop	
0x400072:	leave	
0x400073:	ret	
