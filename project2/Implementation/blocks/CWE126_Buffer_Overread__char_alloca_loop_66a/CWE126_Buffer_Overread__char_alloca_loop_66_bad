<Block for 0x400000, 81 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x50
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	eax, 0x10
0x400020:	sub	rax, 1
0x400024:	add	rax, 0x3a
0x400028:	mov	ecx, 0x10
0x40002d:	mov	edx, 0
0x400032:	div	rcx
0x400035:	imul	rax, rax, 0x10
0x400039:	mov	rdx, rax
0x40003c:	and	rdx, 0xfffffffffffff000
0x400043:	mov	rcx, rsp
0x400046:	sub	rcx, rdx
0x400049:	mov	rdx, rcx
0x40004c:	cmp	rsp, rdx
0x40004f:	je	0x400063
<Block for 0x400063, 26 bytes>
0x400063:	mov	rdx, rax
0x400066:	and	edx, 0xfff
0x40006c:	sub	rsp, rdx
0x40006f:	mov	rdx, rax
0x400072:	and	edx, 0xfff
0x400078:	test	rdx, rdx
0x40007b:	je	0x40008d
<Block for 0x400051, 18 bytes>
0x400051:	sub	rsp, 0x1000
0x400058:	or	qword ptr [rsp + 0xff8], 0
0x400061:	jmp	0x40004c
<Block for 0x40008d, 73 bytes>
0x40008d:	mov	rax, rsp
0x400090:	add	rax, 0xf
0x400094:	shr	rax, 4
0x400098:	shl	rax, 4
0x40009c:	mov	qword ptr [rbp - 0x48], rax
0x4000a0:	mov	eax, 0x10
0x4000a5:	sub	rax, 1
0x4000a9:	add	rax, 0x6c
0x4000ad:	mov	edi, 0x10
0x4000b2:	mov	edx, 0
0x4000b7:	div	rdi
0x4000ba:	imul	rax, rax, 0x10
0x4000be:	mov	rdx, rax
0x4000c1:	and	rdx, 0xfffffffffffff000
0x4000c8:	mov	rsi, rsp
0x4000cb:	sub	rsi, rdx
0x4000ce:	mov	rdx, rsi
0x4000d1:	cmp	rsp, rdx
0x4000d4:	je	0x4000e8
<Block for 0x40007d, 89 bytes>
0x40007d:	and	eax, 0xfff
0x400082:	sub	rax, 8
0x400086:	add	rax, rsp
0x400089:	or	qword ptr [rax], 0
0x40008d:	mov	rax, rsp
0x400090:	add	rax, 0xf
0x400094:	shr	rax, 4
0x400098:	shl	rax, 4
0x40009c:	mov	qword ptr [rbp - 0x48], rax
0x4000a0:	mov	eax, 0x10
0x4000a5:	sub	rax, 1
0x4000a9:	add	rax, 0x6c
0x4000ad:	mov	edi, 0x10
0x4000b2:	mov	edx, 0
0x4000b7:	div	rdi
0x4000ba:	imul	rax, rax, 0x10
0x4000be:	mov	rdx, rax
0x4000c1:	and	rdx, 0xfffffffffffff000
0x4000c8:	mov	rsi, rsp
0x4000cb:	sub	rsi, rdx
0x4000ce:	mov	rdx, rsi
0x4000d1:	cmp	rsp, rdx
0x4000d4:	je	0x4000e8
<Block for 0x40004c, 5 bytes>
0x40004c:	cmp	rsp, rdx
0x40004f:	je	0x400063
<Block for 0x4000e8, 26 bytes>
0x4000e8:	mov	rdx, rax
0x4000eb:	and	edx, 0xfff
0x4000f1:	sub	rsp, rdx
0x4000f4:	mov	rdx, rax
0x4000f7:	and	edx, 0xfff
0x4000fd:	test	rdx, rdx
0x400100:	je	0x400112
<Block for 0x4000d6, 18 bytes>
0x4000d6:	sub	rsp, 0x1000
0x4000dd:	or	qword ptr [rsp + 0xff8], 0
0x4000e6:	jmp	0x4000d1
<Block for 0x400112, 41 bytes>
0x400112:	mov	rax, rsp
0x400115:	add	rax, 0xf
0x400119:	shr	rax, 4
0x40011d:	shl	rax, 4
0x400121:	mov	qword ptr [rbp - 0x40], rax
0x400125:	mov	rax, qword ptr [rbp - 0x48]
0x400129:	mov	edx, 0x31
0x40012e:	mov	esi, 0x41
0x400133:	mov	rdi, rax
0x400136:	call	0x500000
<Block for 0x400102, 57 bytes>
0x400102:	and	eax, 0xfff
0x400107:	sub	rax, 8
0x40010b:	add	rax, rsp
0x40010e:	or	qword ptr [rax], 0
0x400112:	mov	rax, rsp
0x400115:	add	rax, 0xf
0x400119:	shr	rax, 4
0x40011d:	shl	rax, 4
0x400121:	mov	qword ptr [rbp - 0x40], rax
0x400125:	mov	rax, qword ptr [rbp - 0x48]
0x400129:	mov	edx, 0x31
0x40012e:	mov	esi, 0x41
0x400133:	mov	rdi, rax
0x400136:	call	0x500000
<Block for 0x4000d1, 5 bytes>
0x4000d1:	cmp	rsp, rdx
0x4000d4:	je	0x4000e8
<Block for 0x40013b, 33 bytes>
0x40013b:	mov	rax, qword ptr [rbp - 0x48]
0x40013f:	add	rax, 0x31
0x400143:	mov	byte ptr [rax], 0
0x400146:	mov	rax, qword ptr [rbp - 0x40]
0x40014a:	mov	edx, 0x63
0x40014f:	mov	esi, 0x41
0x400154:	mov	rdi, rax
0x400157:	call	0x500000
<Block for 0x40015c, 39 bytes>
0x40015c:	mov	rax, qword ptr [rbp - 0x40]
0x400160:	add	rax, 0x63
0x400164:	mov	byte ptr [rax], 0
0x400167:	mov	rax, qword ptr [rbp - 0x48]
0x40016b:	mov	qword ptr [rbp - 0x38], rax
0x40016f:	mov	rax, qword ptr [rbp - 0x38]
0x400173:	mov	qword ptr [rbp - 0x20], rax
0x400177:	lea	rax, [rbp - 0x30]
0x40017b:	mov	rdi, rax
0x40017e:	call	0x500008
<Block for 0x400183, 16 bytes>
0x400183:	nop	
0x400184:	mov	rax, qword ptr [rbp - 8]
0x400188:	xor	rax, qword ptr fs:[0x28]
0x400191:	je	0x400198
<Block for 0x400198, 2 bytes>
0x400198:	leave	
0x400199:	ret	
<Block for 0x400193, 5 bytes>
0x400193:	call	0x500010
