<Block for 0x4001c0, 48 bytes>
0x4001c0:	endbr64	
0x4001c4:	push	rbp
0x4001c5:	mov	rbp, rsp
0x4001c8:	sub	rsp, 0x90
0x4001cf:	mov	rax, qword ptr fs:[0x28]
0x4001d8:	mov	qword ptr [rbp - 8], rax
0x4001dc:	xor	eax, eax
0x4001de:	mov	qword ptr [rbp - 0x80], 0
0x4001e6:	mov	edi, 0x64
0x4001eb:	call	0x500000
<Block for 0x4001f0, 26 bytes>
0x4001f0:	mov	qword ptr [rbp - 0x78], rax
0x4001f4:	mov	rax, qword ptr [rbp - 0x78]
0x4001f8:	mov	edx, 0x63
0x4001fd:	mov	esi, 0x41
0x400202:	mov	rdi, rax
0x400205:	call	0x500008
<Block for 0x40020a, 41 bytes>
0x40020a:	mov	rax, qword ptr [rbp - 0x78]
0x40020e:	add	rax, 0x63
0x400212:	mov	byte ptr [rax], 0
0x400215:	mov	rax, qword ptr [rbp - 0x78]
0x400219:	mov	qword ptr [rbp - 0x80], rax
0x40021d:	lea	rax, [rbp - 0x70]
0x400221:	mov	edx, 0x63
0x400226:	mov	esi, 0x43
0x40022b:	mov	rdi, rax
0x40022e:	call	0x500008
<Block for 0x400233, 25 bytes>
0x400233:	mov	byte ptr [rbp - 0xd], 0
0x400237:	mov	qword ptr [rbp - 0x88], 0
0x400242:	cmp	qword ptr [rbp - 0x88], 0x63
0x40024a:	ja	0x400277
<Block for 0x40024c, 43 bytes>
0x40024c:	mov	rdx, qword ptr [rbp - 0x80]
0x400250:	mov	rax, qword ptr [rbp - 0x88]
0x400257:	add	rax, rdx
0x40025a:	movzx	eax, byte ptr [rax]
0x40025d:	lea	rcx, [rbp - 0x70]
0x400261:	mov	rdx, qword ptr [rbp - 0x88]
0x400268:	add	rdx, rcx
0x40026b:	mov	byte ptr [rdx], al
0x40026d:	add	qword ptr [rbp - 0x88], 1
0x400275:	jmp	0x400242
<Block for 0x400277, 16 bytes>
0x400277:	mov	byte ptr [rbp - 0xd], 0
0x40027b:	lea	rax, [rbp - 0x70]
0x40027f:	mov	rdi, rax
0x400282:	call	0x500010
<Block for 0x400242, 10 bytes>
0x400242:	cmp	qword ptr [rbp - 0x88], 0x63
0x40024a:	ja	0x400277
<Block for 0x400287, 16 bytes>
0x400287:	nop	
0x400288:	mov	rax, qword ptr [rbp - 8]
0x40028c:	xor	rax, qword ptr fs:[0x28]
0x400295:	je	0x40029c
<Block for 0x40029c, 2 bytes>
0x40029c:	leave	
0x40029d:	ret	
<Block for 0x400297, 5 bytes>
0x400297:	call	0x500018
