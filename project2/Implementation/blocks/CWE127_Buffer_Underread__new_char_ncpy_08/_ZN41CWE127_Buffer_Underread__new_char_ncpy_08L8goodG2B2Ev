<Block for 0x4001c6, 40 bytes>
0x4001c6:	endbr64	
0x4001ca:	push	rbp
0x4001cb:	mov	rbp, rsp
0x4001ce:	add	rsp, -0x80
0x4001d2:	mov	rax, qword ptr fs:[0x28]
0x4001db:	mov	qword ptr [rbp - 8], rax
0x4001df:	xor	eax, eax
0x4001e1:	mov	qword ptr [rbp - 0x80], 0
0x4001e9:	call	0x400000
<Block for 0x4001ee, 9 bytes>
0x4001ee:	test	eax, eax
0x4001f0:	setne	al
0x4001f3:	test	al, al
0x4001f5:	je	0x40022e
<Block for 0x40022e, 22 bytes>
0x40022e:	lea	rax, [rbp - 0x70]
0x400232:	mov	edx, 0x63
0x400237:	mov	esi, 0x43
0x40023c:	mov	rdi, rax
0x40023f:	call	0x500008
<Block for 0x4001f7, 10 bytes>
0x4001f7:	mov	edi, 0x64
0x4001fc:	call	0x500000
<Block for 0x400244, 16 bytes>
0x400244:	mov	byte ptr [rbp - 0xd], 0
0x400248:	lea	rax, [rbp - 0x70]
0x40024c:	mov	rdi, rax
0x40024f:	call	0x500010
<Block for 0x400201, 26 bytes>
0x400201:	mov	qword ptr [rbp - 0x78], rax
0x400205:	mov	rax, qword ptr [rbp - 0x78]
0x400209:	mov	edx, 0x63
0x40020e:	mov	esi, 0x41
0x400213:	mov	rdi, rax
0x400216:	call	0x500008
<Block for 0x400254, 22 bytes>
0x400254:	mov	rdx, rax
0x400257:	mov	rcx, qword ptr [rbp - 0x80]
0x40025b:	lea	rax, [rbp - 0x70]
0x40025f:	mov	rsi, rcx
0x400262:	mov	rdi, rax
0x400265:	call	0x500018
<Block for 0x40021b, 41 bytes>
0x40021b:	mov	rax, qword ptr [rbp - 0x78]
0x40021f:	add	rax, 0x63
0x400223:	mov	byte ptr [rax], 0
0x400226:	mov	rax, qword ptr [rbp - 0x78]
0x40022a:	mov	qword ptr [rbp - 0x80], rax
0x40022e:	lea	rax, [rbp - 0x70]
0x400232:	mov	edx, 0x63
0x400237:	mov	esi, 0x43
0x40023c:	mov	rdi, rax
0x40023f:	call	0x500008
<Block for 0x40026a, 16 bytes>
0x40026a:	mov	byte ptr [rbp - 0xd], 0
0x40026e:	lea	rax, [rbp - 0x70]
0x400272:	mov	rdi, rax
0x400275:	call	0x500020
<Block for 0x40027a, 16 bytes>
0x40027a:	nop	
0x40027b:	mov	rax, qword ptr [rbp - 8]
0x40027f:	xor	rax, qword ptr fs:[0x28]
0x400288:	je	0x40028f
<Block for 0x40028f, 2 bytes>
0x40028f:	leave	
0x400290:	ret	
<Block for 0x40028a, 5 bytes>
0x40028a:	call	0x500028
