<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x58
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x50]
0x400020:	mov	rdi, rax
0x400023:	call	0x400456
<Block for 0x400028, 10 bytes>
0x400028:	mov	edi, 0x64
0x40002d:	call	0x500000
<Block for 0x400032, 13 bytes>
0x400032:	mov	qword ptr [rbp - 0x60], rax
0x400036:	mov	rax, qword ptr [rbp - 0x60]
0x40003a:	test	rax, rax
0x40003d:	jne	0x400049
<Block for 0x40003f, 10 bytes>
0x40003f:	mov	edi, 0xffffffff
0x400044:	call	0x500008
<Block for 0x400049, 19 bytes>
0x400049:	mov	rax, qword ptr [rbp - 0x60]
0x40004d:	mov	byte ptr [rax], 0
0x400050:	mov	rax, qword ptr [rbp - 0x60]
0x400054:	mov	rdi, rax
0x400057:	call	0x500010
<Block for 0x40005c, 23 bytes>
0x40005c:	mov	qword ptr [rbp - 0x58], rax
0x400060:	mov	eax, 0x64
0x400065:	sub	rax, qword ptr [rbp - 0x58]
0x400069:	cmp	rax, 1
0x40006d:	jbe	0x400104
<Block for 0x400104, 19 bytes>
0x400104:	lea	rdx, [rbp - 0x60]
0x400108:	lea	rax, [rbp - 0x50]
0x40010c:	mov	rsi, rdx
0x40010f:	mov	rdi, rax
0x400112:	call	0x400550
<Block for 0x400073, 44 bytes>
0x400073:	mov	rax, qword ptr [rip + 0xfff9e]
0x40007a:	mov	rdx, qword ptr [rbp - 0x58]
0x40007e:	mov	ecx, 0x64
0x400083:	sub	ecx, edx
0x400085:	mov	edx, ecx
0x400087:	mov	esi, edx
0x400089:	mov	rcx, qword ptr [rbp - 0x60]
0x40008d:	mov	rdx, qword ptr [rbp - 0x58]
0x400091:	add	rcx, rdx
0x400094:	mov	rdx, rax
0x400097:	mov	rdi, rcx
0x40009a:	call	0x500020
<Block for 0x400117, 19 bytes>
0x400117:	lea	rdx, [rbp - 0x60]
0x40011b:	lea	rax, [rbp - 0x50]
0x40011f:	mov	rsi, rdx
0x400122:	mov	rdi, rax
0x400125:	call	0x400550
<Block for 0x40009f, 10 bytes>
0x40009f:	test	rax, rax
0x4000a2:	setne	al
0x4000a5:	test	al, al
0x4000a7:	je	0x4000ea
<Block for 0x40012a, 19 bytes>
0x40012a:	lea	rdx, [rbp - 0x60]
0x40012e:	lea	rax, [rbp - 0x50]
0x400132:	mov	rsi, rdx
0x400135:	mov	rdi, rax
0x400138:	call	0x400550
<Block for 0x4000ea, 12 bytes>
0x4000ea:	lea	rdi, [rip + 0x2c0]
0x4000f1:	call	0x500028
<Block for 0x4000a9, 12 bytes>
0x4000a9:	mov	rax, qword ptr [rbp - 0x60]
0x4000ad:	mov	rdi, rax
0x4000b0:	call	0x500010
<Block for 0x40013d, 19 bytes>
0x40013d:	lea	rdx, [rbp - 0x50]
0x400141:	lea	rax, [rbp - 0x30]
0x400145:	mov	rsi, rdx
0x400148:	mov	rdi, rax
0x40014b:	call	0x40058a
<Block for 0x4000f6, 33 bytes>
0x4000f6:	mov	rdx, qword ptr [rbp - 0x60]
0x4000fa:	mov	rax, qword ptr [rbp - 0x58]
0x4000fe:	add	rax, rdx
0x400101:	mov	byte ptr [rax], 0
0x400104:	lea	rdx, [rbp - 0x60]
0x400108:	lea	rax, [rbp - 0x50]
0x40010c:	mov	rsi, rdx
0x40010f:	mov	rdi, rax
0x400112:	call	0x400550
<Block for 0x4000b5, 11 bytes>
0x4000b5:	mov	qword ptr [rbp - 0x58], rax
0x4000b9:	cmp	qword ptr [rbp - 0x58], 0
0x4000be:	je	0x400104
<Block for 0x400150, 12 bytes>
0x400150:	lea	rax, [rbp - 0x30]
0x400154:	mov	rdi, rax
0x400157:	call	0x500030
<Block for 0x4000c0, 22 bytes>
0x4000c0:	mov	rax, qword ptr [rbp - 0x60]
0x4000c4:	mov	rdx, qword ptr [rbp - 0x58]
0x4000c8:	sub	rdx, 1
0x4000cc:	add	rax, rdx
0x4000cf:	movzx	eax, byte ptr [rax]
0x4000d2:	cmp	al, 0xa
0x4000d4:	jne	0x400104
<Block for 0x40015c, 12 bytes>
0x40015c:	lea	rax, [rbp - 0x30]
0x400160:	mov	rdi, rax
0x400163:	call	0x400476
<Block for 0x4000d6, 20 bytes>
0x4000d6:	mov	rax, qword ptr [rbp - 0x60]
0x4000da:	mov	rdx, qword ptr [rbp - 0x58]
0x4000de:	sub	rdx, 1
0x4000e2:	add	rax, rdx
0x4000e5:	mov	byte ptr [rax], 0
0x4000e8:	jmp	0x400104
<Block for 0x400168, 12 bytes>
0x400168:	lea	rax, [rbp - 0x50]
0x40016c:	mov	rdi, rax
0x40016f:	call	0x400476
<Block for 0x400174, 16 bytes>
0x400174:	nop	
0x400175:	mov	rax, qword ptr [rbp - 0x18]
0x400179:	xor	rax, qword ptr fs:[0x28]
0x400182:	je	0x4001be
<Block for 0x4001be, 7 bytes>
0x4001be:	add	rsp, 0x58
0x4001c2:	pop	rbx
0x4001c3:	pop	rbp
0x4001c4:	ret	
<Block for 0x400184, 2 bytes>
0x400184:	jmp	0x4001b9
<Block for 0x4001b9, 5 bytes>
0x4001b9:	call	0x500040
