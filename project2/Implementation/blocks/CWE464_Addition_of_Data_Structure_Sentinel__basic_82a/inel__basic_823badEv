<Block for 0x400000, 47 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x28
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	mov	byte ptr [rbp - 0x29], 0x20
0x400020:	mov	rax, qword ptr [rip + 0xfffd9]
0x400027:	mov	rdi, rax
0x40002a:	call	0x500008
<Block for 0x40002f, 19 bytes>
0x40002f:	mov	byte ptr [rbp - 0x1a], al
0x400032:	mov	byte ptr [rbp - 0x19], 0
0x400036:	lea	rax, [rbp - 0x1a]
0x40003a:	mov	rdi, rax
0x40003d:	call	0x500010
<Block for 0x400042, 13 bytes>
0x400042:	mov	byte ptr [rbp - 0x29], al
0x400045:	mov	edi, 8
0x40004a:	call	0x500018
<Block for 0x40004f, 11 bytes>
0x40004f:	mov	rbx, rax
0x400052:	mov	rdi, rbx
0x400055:	call	0x40013c
<Block for 0x40005a, 29 bytes>
0x40005a:	mov	qword ptr [rbp - 0x28], rbx
0x40005e:	mov	rax, qword ptr [rbp - 0x28]
0x400062:	mov	rax, qword ptr [rax]
0x400065:	mov	rcx, qword ptr [rax]
0x400068:	movsx	edx, byte ptr [rbp - 0x29]
0x40006c:	mov	rax, qword ptr [rbp - 0x28]
0x400070:	mov	esi, edx
0x400072:	mov	rdi, rax
0x400075:	call	rcx
<Block for 0x400077, 9 bytes>
0x400077:	mov	rax, qword ptr [rbp - 0x28]
0x40007b:	test	rax, rax
0x40007e:	je	0x40008d
<Block for 0x40008d, 16 bytes>
0x40008d:	nop	
0x40008e:	mov	rax, qword ptr [rbp - 0x18]
0x400092:	xor	rax, qword ptr fs:[0x28]
0x40009b:	je	0x4000a2
<Block for 0x400080, 13 bytes>
0x400080:	mov	esi, 8
0x400085:	mov	rdi, rax
0x400088:	call	0x500020
<Block for 0x4000a2, 7 bytes>
0x4000a2:	add	rsp, 0x28
0x4000a6:	pop	rbx
0x4000a7:	pop	rbp
0x4000a8:	ret	
<Block for 0x40009d, 5 bytes>
0x40009d:	call	0x500028
