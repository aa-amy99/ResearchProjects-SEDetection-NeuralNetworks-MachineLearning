<Block for 0x40008c, 70 bytes>
0x40008c:	endbr64	
0x400090:	push	rbp
0x400091:	mov	rbp, rsp
0x400094:	sub	rsp, 0x30
0x400098:	mov	qword ptr [rbp - 0x28], rdi
0x40009c:	mov	rax, qword ptr fs:[0x28]
0x4000a5:	mov	qword ptr [rbp - 8], rax
0x4000a9:	xor	eax, eax
0x4000ab:	mov	rax, qword ptr [rbp - 0x28]
0x4000af:	mov	rax, qword ptr [rax]
0x4000b2:	mov	qword ptr [rbp - 0x10], rax
0x4000b6:	lea	rdx, [rbp - 0x1c]
0x4000ba:	mov	rax, qword ptr [rbp - 0x10]
0x4000be:	lea	rsi, [rip + 0xe9]
0x4000c5:	mov	rdi, rax
0x4000c8:	mov	eax, 0
0x4000cd:	call	0x500000
<Block for 0x4000d2, 5 bytes>
0x4000d2:	cmp	eax, 1
0x4000d5:	jne	0x400101
<Block for 0x4000d7, 16 bytes>
0x4000d7:	mov	dword ptr [rbp - 0x14], 0
0x4000de:	mov	dword ptr [rbp - 0x18], 0
0x4000e5:	jmp	0x4000ef
<Block for 0x400101, 16 bytes>
0x400101:	nop	
0x400102:	mov	rax, qword ptr [rbp - 8]
0x400106:	xor	rax, qword ptr fs:[0x28]
0x40010f:	je	0x400116
<Block for 0x4000ef, 8 bytes>
0x4000ef:	mov	eax, dword ptr [rbp - 0x1c]
0x4000f2:	cmp	dword ptr [rbp - 0x18], eax
0x4000f5:	jl	0x4000e7
<Block for 0x400116, 2 bytes>
0x400116:	leave	
0x400117:	ret	
<Block for 0x400111, 5 bytes>
0x400111:	call	0x500010
<Block for 0x4000e7, 16 bytes>
0x4000e7:	add	dword ptr [rbp - 0x14], 1
0x4000eb:	add	dword ptr [rbp - 0x18], 1
0x4000ef:	mov	eax, dword ptr [rbp - 0x1c]
0x4000f2:	cmp	dword ptr [rbp - 0x18], eax
0x4000f5:	jl	0x4000e7
<Block for 0x4000f7, 10 bytes>
0x4000f7:	mov	eax, dword ptr [rbp - 0x14]
0x4000fa:	mov	edi, eax
0x4000fc:	call	0x500008
