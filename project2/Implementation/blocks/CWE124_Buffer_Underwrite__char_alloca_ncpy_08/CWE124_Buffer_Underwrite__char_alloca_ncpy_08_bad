<Block for 0x40001e, 81 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	add	rsp, -0x80
0x40002a:	mov	rax, qword ptr fs:[0x28]
0x400033:	mov	qword ptr [rbp - 8], rax
0x400037:	xor	eax, eax
0x400039:	mov	eax, 0x10
0x40003e:	sub	rax, 1
0x400042:	add	rax, 0x6c
0x400046:	mov	esi, 0x10
0x40004b:	mov	edx, 0
0x400050:	div	rsi
0x400053:	imul	rax, rax, 0x10
0x400057:	mov	rdx, rax
0x40005a:	and	rdx, 0xfffffffffffff000
0x400061:	mov	rcx, rsp
0x400064:	sub	rcx, rdx
0x400067:	mov	rdx, rcx
0x40006a:	cmp	rsp, rdx
0x40006d:	je	0x400081
<Block for 0x400081, 26 bytes>
0x400081:	mov	rdx, rax
0x400084:	and	edx, 0xfff
0x40008a:	sub	rsp, rdx
0x40008d:	mov	rdx, rax
0x400090:	and	edx, 0xfff
0x400096:	test	rdx, rdx
0x400099:	je	0x4000ab
<Block for 0x40006f, 18 bytes>
0x40006f:	sub	rsp, 0x1000
0x400076:	or	qword ptr [rsp + 0xff8], 0
0x40007f:	jmp	0x40006a
<Block for 0x4000ab, 41 bytes>
0x4000ab:	mov	rax, rsp
0x4000ae:	add	rax, 0xf
0x4000b2:	shr	rax, 4
0x4000b6:	shl	rax, 4
0x4000ba:	mov	qword ptr [rbp - 0x78], rax
0x4000be:	mov	rax, qword ptr [rbp - 0x78]
0x4000c2:	mov	edx, 0x63
0x4000c7:	mov	esi, 0x41
0x4000cc:	mov	rdi, rax
0x4000cf:	call	0x500000
<Block for 0x40009b, 57 bytes>
0x40009b:	and	eax, 0xfff
0x4000a0:	sub	rax, 8
0x4000a4:	add	rax, rsp
0x4000a7:	or	qword ptr [rax], 0
0x4000ab:	mov	rax, rsp
0x4000ae:	add	rax, 0xf
0x4000b2:	shr	rax, 4
0x4000b6:	shl	rax, 4
0x4000ba:	mov	qword ptr [rbp - 0x78], rax
0x4000be:	mov	rax, qword ptr [rbp - 0x78]
0x4000c2:	mov	edx, 0x63
0x4000c7:	mov	esi, 0x41
0x4000cc:	mov	rdi, rax
0x4000cf:	call	0x500000
<Block for 0x40006a, 5 bytes>
0x40006a:	cmp	rsp, rdx
0x40006d:	je	0x400081
<Block for 0x4000d4, 21 bytes>
0x4000d4:	mov	rax, qword ptr [rbp - 0x78]
0x4000d8:	add	rax, 0x63
0x4000dc:	mov	byte ptr [rax], 0
0x4000df:	mov	eax, 0
0x4000e4:	call	0x400000
<Block for 0x4000e9, 4 bytes>
0x4000e9:	test	eax, eax
0x4000eb:	je	0x4000f9
<Block for 0x4000f9, 22 bytes>
0x4000f9:	lea	rax, [rbp - 0x70]
0x4000fd:	mov	edx, 0x63
0x400102:	mov	esi, 0x43
0x400107:	mov	rdi, rax
0x40010a:	call	0x500000
<Block for 0x4000ed, 34 bytes>
0x4000ed:	mov	rax, qword ptr [rbp - 0x78]
0x4000f1:	sub	rax, 8
0x4000f5:	mov	qword ptr [rbp - 0x80], rax
0x4000f9:	lea	rax, [rbp - 0x70]
0x4000fd:	mov	edx, 0x63
0x400102:	mov	esi, 0x43
0x400107:	mov	rdi, rax
0x40010a:	call	0x500000
<Block for 0x40010f, 28 bytes>
0x40010f:	mov	byte ptr [rbp - 0xd], 0
0x400113:	lea	rcx, [rbp - 0x70]
0x400117:	mov	rax, qword ptr [rbp - 0x80]
0x40011b:	mov	edx, 0x63
0x400120:	mov	rsi, rcx
0x400123:	mov	rdi, rax
0x400126:	call	0x500008
<Block for 0x40012b, 23 bytes>
0x40012b:	mov	rax, qword ptr [rbp - 0x80]
0x40012f:	add	rax, 0x63
0x400133:	mov	byte ptr [rax], 0
0x400136:	mov	rax, qword ptr [rbp - 0x80]
0x40013a:	mov	rdi, rax
0x40013d:	call	0x500010
<Block for 0x400142, 16 bytes>
0x400142:	nop	
0x400143:	mov	rax, qword ptr [rbp - 8]
0x400147:	xor	rax, qword ptr fs:[0x28]
0x400150:	je	0x400157
<Block for 0x400157, 2 bytes>
0x400157:	leave	
0x400158:	ret	
<Block for 0x400152, 5 bytes>
0x400152:	call	0x500018
