<Block for 0x400130, 81 bytes>
0x400130:	endbr64	
0x400134:	push	rbp
0x400135:	mov	rbp, rsp
0x400138:	add	rsp, -0x80
0x40013c:	mov	rax, qword ptr fs:[0x28]
0x400145:	mov	qword ptr [rbp - 8], rax
0x400149:	xor	eax, eax
0x40014b:	mov	eax, 0x10
0x400150:	sub	rax, 1
0x400154:	add	rax, 0x6c
0x400158:	mov	esi, 0x10
0x40015d:	mov	edx, 0
0x400162:	div	rsi
0x400165:	imul	rax, rax, 0x10
0x400169:	mov	rdx, rax
0x40016c:	and	rdx, 0xfffffffffffff000
0x400173:	mov	rcx, rsp
0x400176:	sub	rcx, rdx
0x400179:	mov	rdx, rcx
0x40017c:	cmp	rsp, rdx
0x40017f:	je	0x400193
<Block for 0x400193, 26 bytes>
0x400193:	mov	rdx, rax
0x400196:	and	edx, 0xfff
0x40019c:	sub	rsp, rdx
0x40019f:	mov	rdx, rax
0x4001a2:	and	edx, 0xfff
0x4001a8:	test	rdx, rdx
0x4001ab:	je	0x4001bd
<Block for 0x400181, 18 bytes>
0x400181:	sub	rsp, 0x1000
0x400188:	or	qword ptr [rsp + 0xff8], 0
0x400191:	jmp	0x40017c
<Block for 0x4001bd, 41 bytes>
0x4001bd:	mov	rax, rsp
0x4001c0:	add	rax, 0xf
0x4001c4:	shr	rax, 4
0x4001c8:	shl	rax, 4
0x4001cc:	mov	qword ptr [rbp - 0x78], rax
0x4001d0:	mov	rax, qword ptr [rbp - 0x78]
0x4001d4:	mov	edx, 0x63
0x4001d9:	mov	esi, 0x41
0x4001de:	mov	rdi, rax
0x4001e1:	call	0x500000
<Block for 0x4001ad, 57 bytes>
0x4001ad:	and	eax, 0xfff
0x4001b2:	sub	rax, 8
0x4001b6:	add	rax, rsp
0x4001b9:	or	qword ptr [rax], 0
0x4001bd:	mov	rax, rsp
0x4001c0:	add	rax, 0xf
0x4001c4:	shr	rax, 4
0x4001c8:	shl	rax, 4
0x4001cc:	mov	qword ptr [rbp - 0x78], rax
0x4001d0:	mov	rax, qword ptr [rbp - 0x78]
0x4001d4:	mov	edx, 0x63
0x4001d9:	mov	esi, 0x41
0x4001de:	mov	rdi, rax
0x4001e1:	call	0x500000
<Block for 0x40017c, 5 bytes>
0x40017c:	cmp	rsp, rdx
0x40017f:	je	0x400193
<Block for 0x4001e6, 21 bytes>
0x4001e6:	mov	rax, qword ptr [rbp - 0x78]
0x4001ea:	add	rax, 0x63
0x4001ee:	mov	byte ptr [rax], 0
0x4001f1:	mov	eax, dword ptr [rip + 0x1c5]
0x4001f7:	test	eax, eax
0x4001f9:	je	0x400209
<Block for 0x400209, 30 bytes>
0x400209:	mov	rax, qword ptr [rbp - 0x78]
0x40020d:	mov	qword ptr [rbp - 0x80], rax
0x400211:	lea	rax, [rbp - 0x70]
0x400215:	mov	edx, 0x63
0x40021a:	mov	esi, 0x43
0x40021f:	mov	rdi, rax
0x400222:	call	0x500000
<Block for 0x4001fb, 12 bytes>
0x4001fb:	lea	rdi, [rip + 0x1be]
0x400202:	call	0x500010
<Block for 0x400227, 28 bytes>
0x400227:	mov	byte ptr [rbp - 0xd], 0
0x40022b:	mov	rcx, qword ptr [rbp - 0x80]
0x40022f:	lea	rax, [rbp - 0x70]
0x400233:	mov	edx, 0x64
0x400238:	mov	rsi, rcx
0x40023b:	mov	rdi, rax
0x40023e:	call	0x500008
<Block for 0x400207, 2 bytes>
0x400207:	jmp	0x400211
<Block for 0x400243, 16 bytes>
0x400243:	mov	byte ptr [rbp - 0xd], 0
0x400247:	lea	rax, [rbp - 0x70]
0x40024b:	mov	rdi, rax
0x40024e:	call	0x500010
<Block for 0x400211, 22 bytes>
0x400211:	lea	rax, [rbp - 0x70]
0x400215:	mov	edx, 0x63
0x40021a:	mov	esi, 0x43
0x40021f:	mov	rdi, rax
0x400222:	call	0x500000
<Block for 0x400253, 16 bytes>
0x400253:	nop	
0x400254:	mov	rax, qword ptr [rbp - 8]
0x400258:	xor	rax, qword ptr fs:[0x28]
0x400261:	je	0x400268
<Block for 0x400268, 2 bytes>
0x400268:	leave	
0x400269:	ret	
<Block for 0x400263, 5 bytes>
0x400263:	call	0x500018
