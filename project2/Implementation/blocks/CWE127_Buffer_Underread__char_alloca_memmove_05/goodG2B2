<Block for 0x40026a, 81 bytes>
0x40026a:	endbr64	
0x40026e:	push	rbp
0x40026f:	mov	rbp, rsp
0x400272:	add	rsp, -0x80
0x400276:	mov	rax, qword ptr fs:[0x28]
0x40027f:	mov	qword ptr [rbp - 8], rax
0x400283:	xor	eax, eax
0x400285:	mov	eax, 0x10
0x40028a:	sub	rax, 1
0x40028e:	add	rax, 0x6c
0x400292:	mov	esi, 0x10
0x400297:	mov	edx, 0
0x40029c:	div	rsi
0x40029f:	imul	rax, rax, 0x10
0x4002a3:	mov	rdx, rax
0x4002a6:	and	rdx, 0xfffffffffffff000
0x4002ad:	mov	rcx, rsp
0x4002b0:	sub	rcx, rdx
0x4002b3:	mov	rdx, rcx
0x4002b6:	cmp	rsp, rdx
0x4002b9:	je	0x4002cd
<Block for 0x4002cd, 26 bytes>
0x4002cd:	mov	rdx, rax
0x4002d0:	and	edx, 0xfff
0x4002d6:	sub	rsp, rdx
0x4002d9:	mov	rdx, rax
0x4002dc:	and	edx, 0xfff
0x4002e2:	test	rdx, rdx
0x4002e5:	je	0x4002f7
<Block for 0x4002bb, 18 bytes>
0x4002bb:	sub	rsp, 0x1000
0x4002c2:	or	qword ptr [rsp + 0xff8], 0
0x4002cb:	jmp	0x4002b6
<Block for 0x4002f7, 41 bytes>
0x4002f7:	mov	rax, rsp
0x4002fa:	add	rax, 0xf
0x4002fe:	shr	rax, 4
0x400302:	shl	rax, 4
0x400306:	mov	qword ptr [rbp - 0x78], rax
0x40030a:	mov	rax, qword ptr [rbp - 0x78]
0x40030e:	mov	edx, 0x63
0x400313:	mov	esi, 0x41
0x400318:	mov	rdi, rax
0x40031b:	call	0x500000
<Block for 0x4002e7, 57 bytes>
0x4002e7:	and	eax, 0xfff
0x4002ec:	sub	rax, 8
0x4002f0:	add	rax, rsp
0x4002f3:	or	qword ptr [rax], 0
0x4002f7:	mov	rax, rsp
0x4002fa:	add	rax, 0xf
0x4002fe:	shr	rax, 4
0x400302:	shl	rax, 4
0x400306:	mov	qword ptr [rbp - 0x78], rax
0x40030a:	mov	rax, qword ptr [rbp - 0x78]
0x40030e:	mov	edx, 0x63
0x400313:	mov	esi, 0x41
0x400318:	mov	rdi, rax
0x40031b:	call	0x500000
<Block for 0x4002b6, 5 bytes>
0x4002b6:	cmp	rsp, rdx
0x4002b9:	je	0x4002cd
<Block for 0x400320, 21 bytes>
0x400320:	mov	rax, qword ptr [rbp - 0x78]
0x400324:	add	rax, 0x63
0x400328:	mov	byte ptr [rax], 0
0x40032b:	mov	eax, dword ptr [rip + 0x87]
0x400331:	test	eax, eax
0x400333:	je	0x40033d
<Block for 0x40033d, 22 bytes>
0x40033d:	lea	rax, [rbp - 0x70]
0x400341:	mov	edx, 0x63
0x400346:	mov	esi, 0x43
0x40034b:	mov	rdi, rax
0x40034e:	call	0x500000
<Block for 0x400335, 30 bytes>
0x400335:	mov	rax, qword ptr [rbp - 0x78]
0x400339:	mov	qword ptr [rbp - 0x80], rax
0x40033d:	lea	rax, [rbp - 0x70]
0x400341:	mov	edx, 0x63
0x400346:	mov	esi, 0x43
0x40034b:	mov	rdi, rax
0x40034e:	call	0x500000
<Block for 0x400353, 28 bytes>
0x400353:	mov	byte ptr [rbp - 0xd], 0
0x400357:	mov	rcx, qword ptr [rbp - 0x80]
0x40035b:	lea	rax, [rbp - 0x70]
0x40035f:	mov	edx, 0x64
0x400364:	mov	rsi, rcx
0x400367:	mov	rdi, rax
0x40036a:	call	0x500008
<Block for 0x40036f, 16 bytes>
0x40036f:	mov	byte ptr [rbp - 0xd], 0
0x400373:	lea	rax, [rbp - 0x70]
0x400377:	mov	rdi, rax
0x40037a:	call	0x500010
<Block for 0x40037f, 16 bytes>
0x40037f:	nop	
0x400380:	mov	rax, qword ptr [rbp - 8]
0x400384:	xor	rax, qword ptr fs:[0x28]
0x40038d:	je	0x400394
<Block for 0x400394, 2 bytes>
0x400394:	leave	
0x400395:	ret	
<Block for 0x40038f, 5 bytes>
0x40038f:	call	0x500018
