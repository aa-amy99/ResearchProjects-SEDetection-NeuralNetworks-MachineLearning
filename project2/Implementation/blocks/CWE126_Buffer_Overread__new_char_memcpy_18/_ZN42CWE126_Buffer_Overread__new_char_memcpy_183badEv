<Block for 0x400000, 50 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x78], 0
0x400023:	nop	
0x400024:	endbr64	
0x400028:	mov	edi, 0x32
0x40002d:	call	0x500000
<Block for 0x400032, 26 bytes>
0x400032:	mov	qword ptr [rbp - 0x78], rax
0x400036:	mov	rax, qword ptr [rbp - 0x78]
0x40003a:	mov	edx, 0x31
0x40003f:	mov	esi, 0x41
0x400044:	mov	rdi, rax
0x400047:	call	0x500008
<Block for 0x40004c, 33 bytes>
0x40004c:	mov	rax, qword ptr [rbp - 0x78]
0x400050:	add	rax, 0x31
0x400054:	mov	byte ptr [rax], 0
0x400057:	lea	rax, [rbp - 0x70]
0x40005b:	mov	edx, 0x63
0x400060:	mov	esi, 0x43
0x400065:	mov	rdi, rax
0x400068:	call	0x500008
<Block for 0x40006d, 16 bytes>
0x40006d:	mov	byte ptr [rbp - 0xd], 0
0x400071:	lea	rax, [rbp - 0x70]
0x400075:	mov	rdi, rax
0x400078:	call	0x500010
<Block for 0x40007d, 22 bytes>
0x40007d:	mov	rdx, rax
0x400080:	mov	rcx, qword ptr [rbp - 0x78]
0x400084:	lea	rax, [rbp - 0x70]
0x400088:	mov	rsi, rcx
0x40008b:	mov	rdi, rax
0x40008e:	call	0x500018
<Block for 0x400093, 16 bytes>
0x400093:	mov	byte ptr [rbp - 0xd], 0
0x400097:	lea	rax, [rbp - 0x70]
0x40009b:	mov	rdi, rax
0x40009e:	call	0x500020
<Block for 0x4000a3, 7 bytes>
0x4000a3:	cmp	qword ptr [rbp - 0x78], 0
0x4000a8:	je	0x4000b6
<Block for 0x4000b6, 16 bytes>
0x4000b6:	nop	
0x4000b7:	mov	rax, qword ptr [rbp - 8]
0x4000bb:	xor	rax, qword ptr fs:[0x28]
0x4000c4:	je	0x4000cb
<Block for 0x4000aa, 12 bytes>
0x4000aa:	mov	rax, qword ptr [rbp - 0x78]
0x4000ae:	mov	rdi, rax
0x4000b1:	call	0x500028
<Block for 0x4000cb, 2 bytes>
0x4000cb:	leave	
0x4000cc:	ret	
<Block for 0x4000c6, 5 bytes>
0x4000c6:	call	0x500030
