<Block for 0x400000, 51 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	byte ptr [rbp - 0xd], 0x20
0x40001f:	nop	
0x400020:	endbr64	
0x400024:	mov	rax, qword ptr [rip + 0xfffd5]
0x40002b:	mov	rdi, rax
0x40002e:	call	0x500008
<Block for 0x400033, 19 bytes>
0x400033:	mov	byte ptr [rbp - 0xc], al
0x400036:	mov	byte ptr [rbp - 0xb], 0
0x40003a:	lea	rax, [rbp - 0xc]
0x40003e:	mov	rdi, rax
0x400041:	call	0x500010
<Block for 0x400046, 34 bytes>
0x400046:	mov	byte ptr [rbp - 0xd], al
0x400049:	mov	byte ptr [rbp - 0xc], 0x78
0x40004d:	movzx	eax, byte ptr [rbp - 0xd]
0x400051:	mov	byte ptr [rbp - 0xb], al
0x400054:	mov	byte ptr [rbp - 0xa], 0x7a
0x400058:	mov	byte ptr [rbp - 9], 0
0x40005c:	lea	rax, [rbp - 0xc]
0x400060:	mov	rdi, rax
0x400063:	call	0x500018
<Block for 0x400068, 16 bytes>
0x400068:	nop	
0x400069:	mov	rax, qword ptr [rbp - 8]
0x40006d:	xor	rax, qword ptr fs:[0x28]
0x400076:	je	0x40007d
<Block for 0x40007d, 2 bytes>
0x40007d:	leave	
0x40007e:	ret	
<Block for 0x400078, 5 bytes>
0x400078:	call	0x500020
