<Block for 0x4000d2, 45 bytes>
0x4000d2:	endbr64	
0x4000d6:	push	rbp
0x4000d7:	mov	rbp, rsp
0x4000da:	add	rsp, -0x80
0x4000de:	mov	rax, qword ptr fs:[0x28]
0x4000e7:	mov	qword ptr [rbp - 8], rax
0x4000eb:	xor	eax, eax
0x4000ed:	mov	qword ptr [rbp - 0x80], 0
0x4000f5:	mov	eax, dword ptr [rip + 0xfff3d]
0x4000fb:	test	eax, eax
0x4000fd:	je	0x40010d
<Block for 0x40010d, 10 bytes>
0x40010d:	mov	edi, 0x64
0x400112:	call	0x500008
<Block for 0x4000ff, 12 bytes>
0x4000ff:	lea	rdi, [rip + 0x195]
0x400106:	call	0x500028
<Block for 0x400117, 11 bytes>
0x400117:	mov	qword ptr [rbp - 0x78], rax
0x40011b:	cmp	qword ptr [rbp - 0x78], 0
0x400120:	jne	0x40012c
<Block for 0x40010b, 2 bytes>
0x40010b:	jmp	0x400155
<Block for 0x400122, 10 bytes>
0x400122:	mov	edi, 0xffffffff
0x400127:	call	0x500010
<Block for 0x40012c, 22 bytes>
0x40012c:	mov	rax, qword ptr [rbp - 0x78]
0x400130:	mov	edx, 0x63
0x400135:	mov	esi, 0x41
0x40013a:	mov	rdi, rax
0x40013d:	call	0x500018
<Block for 0x400155, 22 bytes>
0x400155:	lea	rax, [rbp - 0x70]
0x400159:	mov	edx, 0x63
0x40015e:	mov	esi, 0x43
0x400163:	mov	rdi, rax
0x400166:	call	0x500018
<Block for 0x400142, 41 bytes>
0x400142:	mov	rax, qword ptr [rbp - 0x78]
0x400146:	add	rax, 0x63
0x40014a:	mov	byte ptr [rax], 0
0x40014d:	mov	rax, qword ptr [rbp - 0x78]
0x400151:	mov	qword ptr [rbp - 0x80], rax
0x400155:	lea	rax, [rbp - 0x70]
0x400159:	mov	edx, 0x63
0x40015e:	mov	esi, 0x43
0x400163:	mov	rdi, rax
0x400166:	call	0x500018
<Block for 0x40016b, 28 bytes>
0x40016b:	mov	byte ptr [rbp - 0xd], 0
0x40016f:	mov	rcx, qword ptr [rbp - 0x80]
0x400173:	lea	rax, [rbp - 0x70]
0x400177:	mov	edx, 0x64
0x40017c:	mov	rsi, rcx
0x40017f:	mov	rdi, rax
0x400182:	call	0x500020
<Block for 0x400187, 16 bytes>
0x400187:	mov	byte ptr [rbp - 0xd], 0
0x40018b:	lea	rax, [rbp - 0x70]
0x40018f:	mov	rdi, rax
0x400192:	call	0x500028
<Block for 0x400197, 16 bytes>
0x400197:	nop	
0x400198:	mov	rax, qword ptr [rbp - 8]
0x40019c:	xor	rax, qword ptr fs:[0x28]
0x4001a5:	je	0x4001ac
<Block for 0x4001ac, 2 bytes>
0x4001ac:	leave	
0x4001ad:	ret	
<Block for 0x4001a7, 5 bytes>
0x4001a7:	call	0x500030
