<Block for 0x400136, 81 bytes>
0x400136:	endbr64	
0x40013a:	push	rbp
0x40013b:	mov	rbp, rsp
0x40013e:	add	rsp, -0x80
0x400142:	mov	rax, qword ptr fs:[0x28]
0x40014b:	mov	qword ptr [rbp - 8], rax
0x40014f:	xor	eax, eax
0x400151:	mov	eax, 0x10
0x400156:	sub	rax, 1
0x40015a:	add	rax, 0x6c
0x40015e:	mov	esi, 0x10
0x400163:	mov	edx, 0
0x400168:	div	rsi
0x40016b:	imul	rax, rax, 0x10
0x40016f:	mov	rdx, rax
0x400172:	and	rdx, 0xfffffffffffff000
0x400179:	mov	rcx, rsp
0x40017c:	sub	rcx, rdx
0x40017f:	mov	rdx, rcx
0x400182:	cmp	rsp, rdx
0x400185:	je	0x400199
<Block for 0x400199, 26 bytes>
0x400199:	mov	rdx, rax
0x40019c:	and	edx, 0xfff
0x4001a2:	sub	rsp, rdx
0x4001a5:	mov	rdx, rax
0x4001a8:	and	edx, 0xfff
0x4001ae:	test	rdx, rdx
0x4001b1:	je	0x4001c3
<Block for 0x400187, 18 bytes>
0x400187:	sub	rsp, 0x1000
0x40018e:	or	qword ptr [rsp + 0xff8], 0
0x400197:	jmp	0x400182
<Block for 0x4001c3, 41 bytes>
0x4001c3:	mov	rax, rsp
0x4001c6:	add	rax, 0xf
0x4001ca:	shr	rax, 4
0x4001ce:	shl	rax, 4
0x4001d2:	mov	qword ptr [rbp - 0x78], rax
0x4001d6:	mov	rax, qword ptr [rbp - 0x78]
0x4001da:	mov	edx, 0x63
0x4001df:	mov	esi, 0x41
0x4001e4:	mov	rdi, rax
0x4001e7:	call	0x500000
<Block for 0x4001b3, 57 bytes>
0x4001b3:	and	eax, 0xfff
0x4001b8:	sub	rax, 8
0x4001bc:	add	rax, rsp
0x4001bf:	or	qword ptr [rax], 0
0x4001c3:	mov	rax, rsp
0x4001c6:	add	rax, 0xf
0x4001ca:	shr	rax, 4
0x4001ce:	shl	rax, 4
0x4001d2:	mov	qword ptr [rbp - 0x78], rax
0x4001d6:	mov	rax, qword ptr [rbp - 0x78]
0x4001da:	mov	edx, 0x63
0x4001df:	mov	esi, 0x41
0x4001e4:	mov	rdi, rax
0x4001e7:	call	0x500000
<Block for 0x400182, 5 bytes>
0x400182:	cmp	rsp, rdx
0x400185:	je	0x400199
<Block for 0x4001ec, 20 bytes>
0x4001ec:	mov	rax, qword ptr [rbp - 0x78]
0x4001f0:	add	rax, 0x63
0x4001f4:	mov	byte ptr [rax], 0
0x4001f7:	mov	eax, 0
0x4001fc:	test	eax, eax
0x4001fe:	je	0x40020e
<Block for 0x40020e, 30 bytes>
0x40020e:	mov	rax, qword ptr [rbp - 0x78]
0x400212:	mov	qword ptr [rbp - 0x80], rax
0x400216:	lea	rax, [rbp - 0x70]
0x40021a:	mov	edx, 0x63
0x40021f:	mov	esi, 0x43
0x400224:	mov	rdi, rax
0x400227:	call	0x500000
<Block for 0x400200, 12 bytes>
0x400200:	lea	rdi, [rip + 0x1c9]
0x400207:	call	0x500010
<Block for 0x40022c, 28 bytes>
0x40022c:	mov	byte ptr [rbp - 0xd], 0
0x400230:	lea	rcx, [rbp - 0x70]
0x400234:	mov	rax, qword ptr [rbp - 0x80]
0x400238:	mov	edx, 0x64
0x40023d:	mov	rsi, rcx
0x400240:	mov	rdi, rax
0x400243:	call	0x500008
<Block for 0x40020c, 2 bytes>
0x40020c:	jmp	0x400216
<Block for 0x400248, 23 bytes>
0x400248:	mov	rax, qword ptr [rbp - 0x80]
0x40024c:	add	rax, 0x63
0x400250:	mov	byte ptr [rax], 0
0x400253:	mov	rax, qword ptr [rbp - 0x80]
0x400257:	mov	rdi, rax
0x40025a:	call	0x500010
<Block for 0x400216, 22 bytes>
0x400216:	lea	rax, [rbp - 0x70]
0x40021a:	mov	edx, 0x63
0x40021f:	mov	esi, 0x43
0x400224:	mov	rdi, rax
0x400227:	call	0x500000
<Block for 0x40025f, 16 bytes>
0x40025f:	nop	
0x400260:	mov	rax, qword ptr [rbp - 8]
0x400264:	xor	rax, qword ptr fs:[0x28]
0x40026d:	je	0x400274
<Block for 0x400274, 2 bytes>
0x400274:	leave	
0x400275:	ret	
<Block for 0x40026f, 5 bytes>
0x40026f:	call	0x500018
