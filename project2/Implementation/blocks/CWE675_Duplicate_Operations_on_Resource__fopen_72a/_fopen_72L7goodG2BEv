<Block for 0x400198, 40 bytes>
0x400198:	endbr64	
0x40019c:	push	rbp
0x40019d:	mov	rbp, rsp
0x4001a0:	push	rbx
0x4001a1:	sub	rsp, 0x58
0x4001a5:	mov	rax, qword ptr fs:[0x28]
0x4001ae:	mov	qword ptr [rbp - 0x18], rax
0x4001b2:	xor	eax, eax
0x4001b4:	lea	rax, [rbp - 0x50]
0x4001b8:	mov	rdi, rax
0x4001bb:	call	0x40056c
<Block for 0x4001c0, 27 bytes>
0x4001c0:	mov	qword ptr [rbp - 0x60], 0
0x4001c8:	lea	rsi, [rip + 0x319]
0x4001cf:	lea	rdi, [rip + 0x329]
0x4001d6:	call	0x500000
<Block for 0x4001db, 16 bytes>
0x4001db:	mov	qword ptr [rbp - 0x60], rax
0x4001df:	lea	rax, [rbp - 0x50]
0x4001e3:	mov	rdi, rax
0x4001e6:	call	0x400712
<Block for 0x4001eb, 23 bytes>
0x4001eb:	mov	qword ptr [rbp - 0x58], rax
0x4001ef:	lea	rdx, [rbp - 0x58]
0x4001f3:	lea	rax, [rbp - 0x30]
0x4001f7:	mov	rsi, rdx
0x4001fa:	mov	rdi, rax
0x4001fd:	call	0x400762
<Block for 0x400202, 28 bytes>
0x400202:	lea	rdx, [rbp - 0x60]
0x400206:	mov	rsi, qword ptr [rbp - 0x30]
0x40020a:	lea	rax, [rbp - 0x50]
0x40020e:	mov	rcx, rdx
0x400211:	mov	edx, 1
0x400216:	mov	rdi, rax
0x400219:	call	0x400790
<Block for 0x40021e, 12 bytes>
0x40021e:	lea	rax, [rbp - 0x50]
0x400222:	mov	rdi, rax
0x400225:	call	0x400712
<Block for 0x40022a, 23 bytes>
0x40022a:	mov	qword ptr [rbp - 0x58], rax
0x40022e:	lea	rdx, [rbp - 0x58]
0x400232:	lea	rax, [rbp - 0x30]
0x400236:	mov	rsi, rdx
0x400239:	mov	rdi, rax
0x40023c:	call	0x400762
<Block for 0x400241, 28 bytes>
0x400241:	lea	rdx, [rbp - 0x60]
0x400245:	mov	rsi, qword ptr [rbp - 0x30]
0x400249:	lea	rax, [rbp - 0x50]
0x40024d:	mov	rcx, rdx
0x400250:	mov	edx, 1
0x400255:	mov	rdi, rax
0x400258:	call	0x400790
<Block for 0x40025d, 12 bytes>
0x40025d:	lea	rax, [rbp - 0x50]
0x400261:	mov	rdi, rax
0x400264:	call	0x400712
<Block for 0x400269, 23 bytes>
0x400269:	mov	qword ptr [rbp - 0x58], rax
0x40026d:	lea	rdx, [rbp - 0x58]
0x400271:	lea	rax, [rbp - 0x30]
0x400275:	mov	rsi, rdx
0x400278:	mov	rdi, rax
0x40027b:	call	0x400762
<Block for 0x400280, 28 bytes>
0x400280:	lea	rdx, [rbp - 0x60]
0x400284:	mov	rsi, qword ptr [rbp - 0x30]
0x400288:	lea	rax, [rbp - 0x50]
0x40028c:	mov	rcx, rdx
0x40028f:	mov	edx, 1
0x400294:	mov	rdi, rax
0x400297:	call	0x400790
<Block for 0x40029c, 19 bytes>
0x40029c:	lea	rdx, [rbp - 0x50]
0x4002a0:	lea	rax, [rbp - 0x30]
0x4002a4:	mov	rsi, rdx
0x4002a7:	mov	rdi, rax
0x4002aa:	call	0x400856
<Block for 0x4002af, 12 bytes>
0x4002af:	lea	rax, [rbp - 0x30]
0x4002b3:	mov	rdi, rax
0x4002b6:	call	0x500028
<Block for 0x4002bb, 12 bytes>
0x4002bb:	lea	rax, [rbp - 0x30]
0x4002bf:	mov	rdi, rax
0x4002c2:	call	0x4006ca
<Block for 0x4002c7, 12 bytes>
0x4002c7:	lea	rax, [rbp - 0x50]
0x4002cb:	mov	rdi, rax
0x4002ce:	call	0x4006ca
<Block for 0x4002d3, 16 bytes>
0x4002d3:	nop	
0x4002d4:	mov	rax, qword ptr [rbp - 0x18]
0x4002d8:	xor	rax, qword ptr fs:[0x28]
0x4002e1:	je	0x40031d
<Block for 0x40031d, 7 bytes>
0x40031d:	add	rsp, 0x58
0x400321:	pop	rbx
0x400322:	pop	rbp
0x400323:	ret	
<Block for 0x4002e3, 2 bytes>
0x4002e3:	jmp	0x400318
<Block for 0x400318, 5 bytes>
0x400318:	call	0x500020
