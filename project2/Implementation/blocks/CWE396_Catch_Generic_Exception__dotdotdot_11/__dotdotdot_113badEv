<Block for 0x400000, 16 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r12
0x40000a:	push	rbx
0x40000b:	call	0x500000
<Block for 0x400010, 13 bytes>
0x400010:	test	eax, eax
0x400012:	setne	al
0x400015:	test	al, al
0x400017:	je	0x400115
<Block for 0x400115, 6 bytes>
0x400115:	nop	
0x400116:	pop	rbx
0x400117:	pop	r12
0x400119:	pop	rbp
0x40011a:	ret	
<Block for 0x40001d, 5 bytes>
0x40001d:	call	0x500008
<Block for 0x400022, 12 bytes>
0x400022:	and	eax, 1
0x400025:	test	eax, eax
0x400027:	sete	al
0x40002a:	test	al, al
0x40002c:	je	0x400063
<Block for 0x400063, 5 bytes>
0x400063:	call	0x500008
<Block for 0x40002e, 10 bytes>
0x40002e:	mov	edi, 0x10
0x400033:	call	0x500010
<Block for 0x400068, 12 bytes>
0x400068:	and	eax, 1
0x40006b:	test	eax, eax
0x40006d:	sete	al
0x400070:	test	al, al
0x400072:	je	0x4000a9
<Block for 0x400038, 18 bytes>
0x400038:	mov	rbx, rax
0x40003b:	lea	rsi, [rip + 0x402]
0x400042:	mov	rdi, rbx
0x400045:	call	0x500018
<Block for 0x4000a9, 12 bytes>
0x4000a9:	lea	rdi, [rip + 0x39e]
0x4000b0:	call	0x500060
<Block for 0x400074, 10 bytes>
0x400074:	mov	edi, 0x10
0x400079:	call	0x500010
<Block for 0x40004a, 25 bytes>
0x40004a:	mov	rax, qword ptr [rip + 0xfffd7]
0x400051:	mov	rdx, rax
0x400054:	lea	rsi, [rip + 0xfffd5]
0x40005b:	mov	rdi, rbx
0x40005e:	call	0x500038
<Block for 0x4000b5, 2 bytes>
0x4000b5:	jmp	0x400115
<Block for 0x40007e, 18 bytes>
0x40007e:	mov	rbx, rax
0x400081:	lea	rsi, [rip + 0x3c1]
0x400088:	mov	rdi, rbx
0x40008b:	call	0x500040
<Block for 0x400090, 25 bytes>
0x400090:	mov	rax, qword ptr [rip + 0xfffb9]
0x400097:	mov	rdx, rax
0x40009a:	lea	rsi, [rip + 0xfffb7]
0x4000a1:	mov	rdi, rbx
0x4000a4:	call	0x500038
