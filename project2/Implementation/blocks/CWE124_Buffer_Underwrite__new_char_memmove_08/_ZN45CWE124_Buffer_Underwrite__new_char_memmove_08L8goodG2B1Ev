<Block for 0x4000ea, 40 bytes>
0x4000ea:	endbr64	
0x4000ee:	push	rbp
0x4000ef:	mov	rbp, rsp
0x4000f2:	add	rsp, -0x80
0x4000f6:	mov	rax, qword ptr fs:[0x28]
0x4000ff:	mov	qword ptr [rbp - 8], rax
0x400103:	xor	eax, eax
0x400105:	mov	qword ptr [rbp - 0x80], 0
0x40010d:	call	0x40000f
<Block for 0x400112, 9 bytes>
0x400112:	test	eax, eax
0x400114:	setne	al
0x400117:	test	al, al
0x400119:	je	0x400129
<Block for 0x400129, 10 bytes>
0x400129:	mov	edi, 0x64
0x40012e:	call	0x500000
<Block for 0x40011b, 12 bytes>
0x40011b:	lea	rdi, [rip + 0x17b]
0x400122:	call	0x500018
<Block for 0x400133, 26 bytes>
0x400133:	mov	qword ptr [rbp - 0x78], rax
0x400137:	mov	rax, qword ptr [rbp - 0x78]
0x40013b:	mov	edx, 0x63
0x400140:	mov	esi, 0x41
0x400145:	mov	rdi, rax
0x400148:	call	0x500008
<Block for 0x400127, 2 bytes>
0x400127:	jmp	0x400160
<Block for 0x40014d, 41 bytes>
0x40014d:	mov	rax, qword ptr [rbp - 0x78]
0x400151:	add	rax, 0x63
0x400155:	mov	byte ptr [rax], 0
0x400158:	mov	rax, qword ptr [rbp - 0x78]
0x40015c:	mov	qword ptr [rbp - 0x80], rax
0x400160:	lea	rax, [rbp - 0x70]
0x400164:	mov	edx, 0x63
0x400169:	mov	esi, 0x43
0x40016e:	mov	rdi, rax
0x400171:	call	0x500008
<Block for 0x400160, 22 bytes>
0x400160:	lea	rax, [rbp - 0x70]
0x400164:	mov	edx, 0x63
0x400169:	mov	esi, 0x43
0x40016e:	mov	rdi, rax
0x400171:	call	0x500008
<Block for 0x400176, 28 bytes>
0x400176:	mov	byte ptr [rbp - 0xd], 0
0x40017a:	lea	rcx, [rbp - 0x70]
0x40017e:	mov	rax, qword ptr [rbp - 0x80]
0x400182:	mov	edx, 0x64
0x400187:	mov	rsi, rcx
0x40018a:	mov	rdi, rax
0x40018d:	call	0x500010
<Block for 0x400192, 23 bytes>
0x400192:	mov	rax, qword ptr [rbp - 0x80]
0x400196:	add	rax, 0x63
0x40019a:	mov	byte ptr [rax], 0
0x40019d:	mov	rax, qword ptr [rbp - 0x80]
0x4001a1:	mov	rdi, rax
0x4001a4:	call	0x500018
<Block for 0x4001a9, 16 bytes>
0x4001a9:	nop	
0x4001aa:	mov	rax, qword ptr [rbp - 8]
0x4001ae:	xor	rax, qword ptr fs:[0x28]
0x4001b7:	je	0x4001be
<Block for 0x4001be, 2 bytes>
0x4001be:	leave	
0x4001bf:	ret	
<Block for 0x4001b9, 5 bytes>
0x4001b9:	call	0x500020
