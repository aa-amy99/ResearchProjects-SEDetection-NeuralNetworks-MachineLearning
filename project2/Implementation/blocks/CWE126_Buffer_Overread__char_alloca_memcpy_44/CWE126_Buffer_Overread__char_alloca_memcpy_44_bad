<Block for 0x400082, 92 bytes>
0x400082:	endbr64	
0x400086:	push	rbp
0x400087:	mov	rbp, rsp
0x40008a:	sub	rsp, 0x30
0x40008e:	mov	rax, qword ptr fs:[0x28]
0x400097:	mov	qword ptr [rbp - 8], rax
0x40009b:	xor	eax, eax
0x40009d:	lea	rax, [rip - 0xa4]
0x4000a4:	mov	qword ptr [rbp - 0x28], rax
0x4000a8:	mov	eax, 0x10
0x4000ad:	sub	rax, 1
0x4000b1:	add	rax, 0x3a
0x4000b5:	mov	ecx, 0x10
0x4000ba:	mov	edx, 0
0x4000bf:	div	rcx
0x4000c2:	imul	rax, rax, 0x10
0x4000c6:	mov	rdx, rax
0x4000c9:	and	rdx, 0xfffffffffffff000
0x4000d0:	mov	rcx, rsp
0x4000d3:	sub	rcx, rdx
0x4000d6:	mov	rdx, rcx
0x4000d9:	cmp	rsp, rdx
0x4000dc:	je	0x4000f0
<Block for 0x4000f0, 26 bytes>
0x4000f0:	mov	rdx, rax
0x4000f3:	and	edx, 0xfff
0x4000f9:	sub	rsp, rdx
0x4000fc:	mov	rdx, rax
0x4000ff:	and	edx, 0xfff
0x400105:	test	rdx, rdx
0x400108:	je	0x40011a
<Block for 0x4000de, 18 bytes>
0x4000de:	sub	rsp, 0x1000
0x4000e5:	or	qword ptr [rsp + 0xff8], 0
0x4000ee:	jmp	0x4000d9
<Block for 0x40011a, 73 bytes>
0x40011a:	mov	rax, rsp
0x40011d:	add	rax, 0xf
0x400121:	shr	rax, 4
0x400125:	shl	rax, 4
0x400129:	mov	qword ptr [rbp - 0x20], rax
0x40012d:	mov	eax, 0x10
0x400132:	sub	rax, 1
0x400136:	add	rax, 0x6c
0x40013a:	mov	edi, 0x10
0x40013f:	mov	edx, 0
0x400144:	div	rdi
0x400147:	imul	rax, rax, 0x10
0x40014b:	mov	rdx, rax
0x40014e:	and	rdx, 0xfffffffffffff000
0x400155:	mov	rsi, rsp
0x400158:	sub	rsi, rdx
0x40015b:	mov	rdx, rsi
0x40015e:	cmp	rsp, rdx
0x400161:	je	0x400175
<Block for 0x40010a, 89 bytes>
0x40010a:	and	eax, 0xfff
0x40010f:	sub	rax, 8
0x400113:	add	rax, rsp
0x400116:	or	qword ptr [rax], 0
0x40011a:	mov	rax, rsp
0x40011d:	add	rax, 0xf
0x400121:	shr	rax, 4
0x400125:	shl	rax, 4
0x400129:	mov	qword ptr [rbp - 0x20], rax
0x40012d:	mov	eax, 0x10
0x400132:	sub	rax, 1
0x400136:	add	rax, 0x6c
0x40013a:	mov	edi, 0x10
0x40013f:	mov	edx, 0
0x400144:	div	rdi
0x400147:	imul	rax, rax, 0x10
0x40014b:	mov	rdx, rax
0x40014e:	and	rdx, 0xfffffffffffff000
0x400155:	mov	rsi, rsp
0x400158:	sub	rsi, rdx
0x40015b:	mov	rdx, rsi
0x40015e:	cmp	rsp, rdx
0x400161:	je	0x400175
<Block for 0x4000d9, 5 bytes>
0x4000d9:	cmp	rsp, rdx
0x4000dc:	je	0x4000f0
<Block for 0x400175, 26 bytes>
0x400175:	mov	rdx, rax
0x400178:	and	edx, 0xfff
0x40017e:	sub	rsp, rdx
0x400181:	mov	rdx, rax
0x400184:	and	edx, 0xfff
0x40018a:	test	rdx, rdx
0x40018d:	je	0x40019f
<Block for 0x400163, 18 bytes>
0x400163:	sub	rsp, 0x1000
0x40016a:	or	qword ptr [rsp + 0xff8], 0
0x400173:	jmp	0x40015e
<Block for 0x40019f, 41 bytes>
0x40019f:	mov	rax, rsp
0x4001a2:	add	rax, 0xf
0x4001a6:	shr	rax, 4
0x4001aa:	shl	rax, 4
0x4001ae:	mov	qword ptr [rbp - 0x18], rax
0x4001b2:	mov	rax, qword ptr [rbp - 0x20]
0x4001b6:	mov	edx, 0x31
0x4001bb:	mov	esi, 0x41
0x4001c0:	mov	rdi, rax
0x4001c3:	call	0x500000
<Block for 0x40018f, 57 bytes>
0x40018f:	and	eax, 0xfff
0x400194:	sub	rax, 8
0x400198:	add	rax, rsp
0x40019b:	or	qword ptr [rax], 0
0x40019f:	mov	rax, rsp
0x4001a2:	add	rax, 0xf
0x4001a6:	shr	rax, 4
0x4001aa:	shl	rax, 4
0x4001ae:	mov	qword ptr [rbp - 0x18], rax
0x4001b2:	mov	rax, qword ptr [rbp - 0x20]
0x4001b6:	mov	edx, 0x31
0x4001bb:	mov	esi, 0x41
0x4001c0:	mov	rdi, rax
0x4001c3:	call	0x500000
<Block for 0x40015e, 5 bytes>
0x40015e:	cmp	rsp, rdx
0x400161:	je	0x400175
<Block for 0x4001c8, 33 bytes>
0x4001c8:	mov	rax, qword ptr [rbp - 0x20]
0x4001cc:	add	rax, 0x31
0x4001d0:	mov	byte ptr [rax], 0
0x4001d3:	mov	rax, qword ptr [rbp - 0x18]
0x4001d7:	mov	edx, 0x63
0x4001dc:	mov	esi, 0x41
0x4001e1:	mov	rdi, rax
0x4001e4:	call	0x500000
<Block for 0x4001e9, 32 bytes>
0x4001e9:	mov	rax, qword ptr [rbp - 0x18]
0x4001ed:	add	rax, 0x63
0x4001f1:	mov	byte ptr [rax], 0
0x4001f4:	mov	rax, qword ptr [rbp - 0x20]
0x4001f8:	mov	qword ptr [rbp - 0x10], rax
0x4001fc:	mov	rax, qword ptr [rbp - 0x10]
0x400200:	mov	rdx, qword ptr [rbp - 0x28]
0x400204:	mov	rdi, rax
0x400207:	call	rdx
<Block for 0x400209, 16 bytes>
0x400209:	nop	
0x40020a:	mov	rax, qword ptr [rbp - 8]
0x40020e:	xor	rax, qword ptr fs:[0x28]
0x400217:	je	0x40021e
<Block for 0x40021e, 2 bytes>
0x40021e:	leave	
0x40021f:	ret	
<Block for 0x400219, 5 bytes>
0x400219:	call	0x500020
