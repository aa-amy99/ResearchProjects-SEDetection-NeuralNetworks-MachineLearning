<Block for 0x4002a2, 92 bytes>
0x4002a2:	endbr64	
0x4002a6:	push	rbp
0x4002a7:	mov	rbp, rsp
0x4002aa:	sub	rsp, 0x30
0x4002ae:	mov	rax, qword ptr fs:[0x28]
0x4002b7:	mov	qword ptr [rbp - 8], rax
0x4002bb:	xor	eax, eax
0x4002bd:	lea	rax, [rip - 0xa4]
0x4002c4:	mov	qword ptr [rbp - 0x28], rax
0x4002c8:	mov	eax, 0x10
0x4002cd:	sub	rax, 1
0x4002d1:	add	rax, 0x3a
0x4002d5:	mov	ecx, 0x10
0x4002da:	mov	edx, 0
0x4002df:	div	rcx
0x4002e2:	imul	rax, rax, 0x10
0x4002e6:	mov	rdx, rax
0x4002e9:	and	rdx, 0xfffffffffffff000
0x4002f0:	mov	rcx, rsp
0x4002f3:	sub	rcx, rdx
0x4002f6:	mov	rdx, rcx
0x4002f9:	cmp	rsp, rdx
0x4002fc:	je	0x400310
<Block for 0x400310, 26 bytes>
0x400310:	mov	rdx, rax
0x400313:	and	edx, 0xfff
0x400319:	sub	rsp, rdx
0x40031c:	mov	rdx, rax
0x40031f:	and	edx, 0xfff
0x400325:	test	rdx, rdx
0x400328:	je	0x40033a
<Block for 0x4002fe, 18 bytes>
0x4002fe:	sub	rsp, 0x1000
0x400305:	or	qword ptr [rsp + 0xff8], 0
0x40030e:	jmp	0x4002f9
<Block for 0x40033a, 73 bytes>
0x40033a:	mov	rax, rsp
0x40033d:	add	rax, 0xf
0x400341:	shr	rax, 4
0x400345:	shl	rax, 4
0x400349:	mov	qword ptr [rbp - 0x20], rax
0x40034d:	mov	eax, 0x10
0x400352:	sub	rax, 1
0x400356:	add	rax, 0x6c
0x40035a:	mov	edi, 0x10
0x40035f:	mov	edx, 0
0x400364:	div	rdi
0x400367:	imul	rax, rax, 0x10
0x40036b:	mov	rdx, rax
0x40036e:	and	rdx, 0xfffffffffffff000
0x400375:	mov	rsi, rsp
0x400378:	sub	rsi, rdx
0x40037b:	mov	rdx, rsi
0x40037e:	cmp	rsp, rdx
0x400381:	je	0x400395
<Block for 0x40032a, 89 bytes>
0x40032a:	and	eax, 0xfff
0x40032f:	sub	rax, 8
0x400333:	add	rax, rsp
0x400336:	or	qword ptr [rax], 0
0x40033a:	mov	rax, rsp
0x40033d:	add	rax, 0xf
0x400341:	shr	rax, 4
0x400345:	shl	rax, 4
0x400349:	mov	qword ptr [rbp - 0x20], rax
0x40034d:	mov	eax, 0x10
0x400352:	sub	rax, 1
0x400356:	add	rax, 0x6c
0x40035a:	mov	edi, 0x10
0x40035f:	mov	edx, 0
0x400364:	div	rdi
0x400367:	imul	rax, rax, 0x10
0x40036b:	mov	rdx, rax
0x40036e:	and	rdx, 0xfffffffffffff000
0x400375:	mov	rsi, rsp
0x400378:	sub	rsi, rdx
0x40037b:	mov	rdx, rsi
0x40037e:	cmp	rsp, rdx
0x400381:	je	0x400395
<Block for 0x4002f9, 5 bytes>
0x4002f9:	cmp	rsp, rdx
0x4002fc:	je	0x400310
<Block for 0x400395, 26 bytes>
0x400395:	mov	rdx, rax
0x400398:	and	edx, 0xfff
0x40039e:	sub	rsp, rdx
0x4003a1:	mov	rdx, rax
0x4003a4:	and	edx, 0xfff
0x4003aa:	test	rdx, rdx
0x4003ad:	je	0x4003bf
<Block for 0x400383, 18 bytes>
0x400383:	sub	rsp, 0x1000
0x40038a:	or	qword ptr [rsp + 0xff8], 0
0x400393:	jmp	0x40037e
<Block for 0x4003bf, 41 bytes>
0x4003bf:	mov	rax, rsp
0x4003c2:	add	rax, 0xf
0x4003c6:	shr	rax, 4
0x4003ca:	shl	rax, 4
0x4003ce:	mov	qword ptr [rbp - 0x18], rax
0x4003d2:	mov	rax, qword ptr [rbp - 0x20]
0x4003d6:	mov	edx, 0x31
0x4003db:	mov	esi, 0x41
0x4003e0:	mov	rdi, rax
0x4003e3:	call	0x500000
<Block for 0x4003af, 57 bytes>
0x4003af:	and	eax, 0xfff
0x4003b4:	sub	rax, 8
0x4003b8:	add	rax, rsp
0x4003bb:	or	qword ptr [rax], 0
0x4003bf:	mov	rax, rsp
0x4003c2:	add	rax, 0xf
0x4003c6:	shr	rax, 4
0x4003ca:	shl	rax, 4
0x4003ce:	mov	qword ptr [rbp - 0x18], rax
0x4003d2:	mov	rax, qword ptr [rbp - 0x20]
0x4003d6:	mov	edx, 0x31
0x4003db:	mov	esi, 0x41
0x4003e0:	mov	rdi, rax
0x4003e3:	call	0x500000
<Block for 0x40037e, 5 bytes>
0x40037e:	cmp	rsp, rdx
0x400381:	je	0x400395
<Block for 0x4003e8, 33 bytes>
0x4003e8:	mov	rax, qword ptr [rbp - 0x20]
0x4003ec:	add	rax, 0x31
0x4003f0:	mov	byte ptr [rax], 0
0x4003f3:	mov	rax, qword ptr [rbp - 0x18]
0x4003f7:	mov	edx, 0x63
0x4003fc:	mov	esi, 0x41
0x400401:	mov	rdi, rax
0x400404:	call	0x500000
<Block for 0x400409, 32 bytes>
0x400409:	mov	rax, qword ptr [rbp - 0x18]
0x40040d:	add	rax, 0x63
0x400411:	mov	byte ptr [rax], 0
0x400414:	mov	rax, qword ptr [rbp - 0x18]
0x400418:	mov	qword ptr [rbp - 0x10], rax
0x40041c:	mov	rax, qword ptr [rbp - 0x10]
0x400420:	mov	rdx, qword ptr [rbp - 0x28]
0x400424:	mov	rdi, rax
0x400427:	call	rdx
<Block for 0x400429, 16 bytes>
0x400429:	nop	
0x40042a:	mov	rax, qword ptr [rbp - 8]
0x40042e:	xor	rax, qword ptr fs:[0x28]
0x400437:	je	0x40043e
<Block for 0x40043e, 2 bytes>
0x40043e:	leave	
0x40043f:	ret	
<Block for 0x400439, 5 bytes>
0x400439:	call	0x500020
