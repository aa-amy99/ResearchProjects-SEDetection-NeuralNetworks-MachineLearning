<Block for 0x400000, 66 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	rax, qword ptr [rip + 0x516]
0x400022:	mov	qword ptr [rbp - 0x10], rax
0x400026:	lea	rdx, [rbp - 0x1c]
0x40002a:	mov	rax, qword ptr [rbp - 0x10]
0x40002e:	lea	rsi, [rip + 0x51b]
0x400035:	mov	rdi, rax
0x400038:	mov	eax, 0
0x40003d:	call	0x500000
<Block for 0x400042, 5 bytes>
0x400042:	cmp	eax, 1
0x400045:	jne	0x400071
<Block for 0x400047, 16 bytes>
0x400047:	mov	dword ptr [rbp - 0x14], 0
0x40004e:	mov	dword ptr [rbp - 0x18], 0
0x400055:	jmp	0x40005f
<Block for 0x400071, 16 bytes>
0x400071:	nop	
0x400072:	mov	rax, qword ptr [rbp - 8]
0x400076:	xor	rax, qword ptr fs:[0x28]
0x40007f:	je	0x400086
<Block for 0x40005f, 8 bytes>
0x40005f:	mov	eax, dword ptr [rbp - 0x1c]
0x400062:	cmp	dword ptr [rbp - 0x18], eax
0x400065:	jl	0x400057
<Block for 0x400086, 2 bytes>
0x400086:	leave	
0x400087:	ret	
<Block for 0x400081, 5 bytes>
0x400081:	call	0x500010
<Block for 0x400057, 16 bytes>
0x400057:	add	dword ptr [rbp - 0x14], 1
0x40005b:	add	dword ptr [rbp - 0x18], 1
0x40005f:	mov	eax, dword ptr [rbp - 0x1c]
0x400062:	cmp	dword ptr [rbp - 0x18], eax
0x400065:	jl	0x400057
<Block for 0x400067, 10 bytes>
0x400067:	mov	eax, dword ptr [rbp - 0x14]
0x40006a:	mov	edi, eax
0x40006c:	call	0x500008
