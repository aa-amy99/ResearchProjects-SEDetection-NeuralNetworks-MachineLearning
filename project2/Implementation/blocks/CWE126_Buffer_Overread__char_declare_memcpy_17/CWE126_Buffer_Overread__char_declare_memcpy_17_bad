<Block for 0x400000, 55 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x130
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0x120]
0x400025:	mov	edx, 0x31
0x40002a:	mov	esi, 0x41
0x40002f:	mov	rdi, rax
0x400032:	call	0x500000
<Block for 0x400037, 32 bytes>
0x400037:	mov	byte ptr [rbp - 0xef], 0
0x40003e:	lea	rax, [rbp - 0xe0]
0x400045:	mov	edx, 0x63
0x40004a:	mov	esi, 0x41
0x40004f:	mov	rdi, rax
0x400052:	call	0x500000
<Block for 0x400057, 16 bytes>
0x400057:	mov	byte ptr [rbp - 0x7d], 0
0x40005b:	mov	dword ptr [rbp - 0x12c], 0
0x400065:	jmp	0x40007c
<Block for 0x40007c, 9 bytes>
0x40007c:	cmp	dword ptr [rbp - 0x12c], 0
0x400083:	jle	0x400067
<Block for 0x400067, 30 bytes>
0x400067:	lea	rax, [rbp - 0x120]
0x40006e:	mov	qword ptr [rbp - 0x128], rax
0x400075:	add	dword ptr [rbp - 0x12c], 1
0x40007c:	cmp	dword ptr [rbp - 0x12c], 0
0x400083:	jle	0x400067
<Block for 0x400085, 22 bytes>
0x400085:	lea	rax, [rbp - 0x70]
0x400089:	mov	edx, 0x63
0x40008e:	mov	esi, 0x43
0x400093:	mov	rdi, rax
0x400096:	call	0x500000
<Block for 0x40009b, 16 bytes>
0x40009b:	mov	byte ptr [rbp - 0xd], 0
0x40009f:	lea	rax, [rbp - 0x70]
0x4000a3:	mov	rdi, rax
0x4000a6:	call	0x500008
<Block for 0x4000ab, 25 bytes>
0x4000ab:	mov	rdx, rax
0x4000ae:	mov	rcx, qword ptr [rbp - 0x128]
0x4000b5:	lea	rax, [rbp - 0x70]
0x4000b9:	mov	rsi, rcx
0x4000bc:	mov	rdi, rax
0x4000bf:	call	0x500010
<Block for 0x4000c4, 16 bytes>
0x4000c4:	mov	byte ptr [rbp - 0xd], 0
0x4000c8:	lea	rax, [rbp - 0x70]
0x4000cc:	mov	rdi, rax
0x4000cf:	call	0x500018
<Block for 0x4000d4, 16 bytes>
0x4000d4:	nop	
0x4000d5:	mov	rax, qword ptr [rbp - 8]
0x4000d9:	xor	rax, qword ptr fs:[0x28]
0x4000e2:	je	0x4000e9
<Block for 0x4000e9, 2 bytes>
0x4000e9:	leave	
0x4000ea:	ret	
<Block for 0x4000e4, 5 bytes>
0x4000e4:	call	0x500020
