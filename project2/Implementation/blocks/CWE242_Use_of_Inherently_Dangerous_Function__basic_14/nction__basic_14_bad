<Block for 0x400000, 38 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	eax, dword ptr [rip + 0xfffdf]
0x400021:	cmp	eax, 5
0x400024:	jne	0x40006a
<Block for 0x400026, 17 bytes>
0x400026:	lea	rax, [rbp - 0x12]
0x40002a:	mov	rdi, rax
0x40002d:	mov	eax, 0
0x400032:	call	0x500008
<Block for 0x40006a, 16 bytes>
0x40006a:	nop	
0x40006b:	mov	rax, qword ptr [rbp - 8]
0x40006f:	xor	rax, qword ptr fs:[0x28]
0x400078:	je	0x40007f
<Block for 0x400037, 13 bytes>
0x400037:	cdqe	
0x400039:	mov	qword ptr [rbp - 0x20], rax
0x40003d:	cmp	qword ptr [rbp - 0x20], 0
0x400042:	jne	0x40005a
<Block for 0x40007f, 2 bytes>
0x40007f:	leave	
0x400080:	ret	
<Block for 0x40007a, 5 bytes>
0x40007a:	call	0x500020
<Block for 0x400044, 12 bytes>
0x400044:	lea	rdi, [rip + 0x175]
0x40004b:	call	0x500010
<Block for 0x40005a, 16 bytes>
0x40005a:	mov	byte ptr [rbp - 9], 0
0x40005e:	lea	rax, [rbp - 0x12]
0x400062:	mov	rdi, rax
0x400065:	call	0x500010
<Block for 0x400050, 10 bytes>
0x400050:	mov	edi, 1
0x400055:	call	0x500018
