<Block for 0x40001e, 37 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	add	rsp, -0x80
0x40002a:	mov	rax, qword ptr fs:[0x28]
0x400033:	mov	qword ptr [rbp - 8], rax
0x400037:	xor	eax, eax
0x400039:	mov	eax, 0
0x40003e:	call	0x400000
<Block for 0x400043, 4 bytes>
0x400043:	test	eax, eax
0x400045:	je	0x400086
<Block for 0x400086, 16 bytes>
0x400086:	nop	
0x400087:	mov	rax, qword ptr [rbp - 8]
0x40008b:	xor	rax, qword ptr fs:[0x28]
0x400094:	je	0x40009b
<Block for 0x400047, 36 bytes>
0x400047:	mov	qword ptr [rbp - 0x78], 0
0x40004f:	mov	byte ptr [rbp - 0x70], 0
0x400053:	lea	rax, [rbp - 0x70]
0x400057:	mov	edx, 0x64
0x40005c:	lea	rsi, [rip + 0x1c1]
0x400063:	mov	rdi, rax
0x400066:	call	0x500000
<Block for 0x40009b, 2 bytes>
0x40009b:	leave	
0x40009c:	ret	
<Block for 0x400096, 5 bytes>
0x400096:	call	0x500018
<Block for 0x40006b, 15 bytes>
0x40006b:	mov	qword ptr [rbp - 0x78], rax
0x40006f:	mov	rax, qword ptr [rbp - 0x78]
0x400073:	mov	edi, eax
0x400075:	call	0x500008
<Block for 0x40007a, 12 bytes>
0x40007a:	lea	rax, [rbp - 0x70]
0x40007e:	mov	rdi, rax
0x400081:	call	0x500010
