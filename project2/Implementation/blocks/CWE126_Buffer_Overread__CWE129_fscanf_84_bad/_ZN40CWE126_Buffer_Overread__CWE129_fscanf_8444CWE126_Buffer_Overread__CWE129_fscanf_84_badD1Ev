<Block for 0x40003e, 81 bytes>
0x40003e:	endbr64	
0x400042:	push	rbp
0x400043:	mov	rbp, rsp
0x400046:	sub	rsp, 0x40
0x40004a:	mov	qword ptr [rbp - 0x38], rdi
0x40004e:	mov	rax, qword ptr fs:[0x28]
0x400057:	mov	qword ptr [rbp - 8], rax
0x40005b:	xor	eax, eax
0x40005d:	mov	qword ptr [rbp - 0x30], 0
0x400065:	mov	qword ptr [rbp - 0x28], 0
0x40006d:	mov	qword ptr [rbp - 0x20], 0
0x400075:	mov	qword ptr [rbp - 0x18], 0
0x40007d:	mov	qword ptr [rbp - 0x10], 0
0x400085:	mov	rax, qword ptr [rbp - 0x38]
0x400089:	mov	eax, dword ptr [rax]
0x40008b:	test	eax, eax
0x40008d:	js	0x4000a4
<Block for 0x4000a4, 12 bytes>
0x4000a4:	lea	rdi, [rip + 0x25]
0x4000ab:	call	0x500018
<Block for 0x40008f, 19 bytes>
0x40008f:	mov	rax, qword ptr [rbp - 0x38]
0x400093:	mov	eax, dword ptr [rax]
0x400095:	cdqe	
0x400097:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x40009b:	mov	edi, eax
0x40009d:	call	0x500010
<Block for 0x4000b0, 16 bytes>
0x4000b0:	nop	
0x4000b1:	mov	rax, qword ptr [rbp - 8]
0x4000b5:	xor	rax, qword ptr fs:[0x28]
0x4000be:	je	0x4000c5
<Block for 0x4000a2, 2 bytes>
0x4000a2:	jmp	0x4000b0
<Block for 0x4000c5, 2 bytes>
0x4000c5:	leave	
0x4000c6:	ret	
<Block for 0x4000c0, 5 bytes>
0x4000c0:	call	0x500020
