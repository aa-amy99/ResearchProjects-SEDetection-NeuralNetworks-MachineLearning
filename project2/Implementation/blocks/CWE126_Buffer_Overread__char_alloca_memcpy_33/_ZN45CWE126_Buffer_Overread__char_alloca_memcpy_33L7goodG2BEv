<Block for 0x400200, 98 bytes>
0x400200:	endbr64	
0x400204:	push	rbp
0x400205:	mov	rbp, rsp
0x400208:	sub	rsp, 0xa0
0x40020f:	mov	rax, qword ptr fs:[0x28]
0x400218:	mov	qword ptr [rbp - 8], rax
0x40021c:	xor	eax, eax
0x40021e:	lea	rax, [rbp - 0x98]
0x400225:	mov	qword ptr [rbp - 0x90], rax
0x40022c:	mov	eax, 0x10
0x400231:	sub	rax, 1
0x400235:	add	rax, 0x3a
0x400239:	mov	ecx, 0x10
0x40023e:	mov	edx, 0
0x400243:	div	rcx
0x400246:	imul	rax, rax, 0x10
0x40024a:	mov	rdx, rax
0x40024d:	and	rdx, 0xfffffffffffff000
0x400254:	mov	rcx, rsp
0x400257:	sub	rcx, rdx
0x40025a:	mov	rdx, rcx
0x40025d:	cmp	rsp, rdx
0x400260:	je	0x400274
<Block for 0x400274, 26 bytes>
0x400274:	mov	rdx, rax
0x400277:	and	edx, 0xfff
0x40027d:	sub	rsp, rdx
0x400280:	mov	rdx, rax
0x400283:	and	edx, 0xfff
0x400289:	test	rdx, rdx
0x40028c:	je	0x40029e
<Block for 0x400262, 18 bytes>
0x400262:	sub	rsp, 0x1000
0x400269:	or	qword ptr [rsp + 0xff8], 0
0x400272:	jmp	0x40025d
<Block for 0x40029e, 76 bytes>
0x40029e:	mov	rax, rsp
0x4002a1:	add	rax, 0xf
0x4002a5:	shr	rax, 4
0x4002a9:	shl	rax, 4
0x4002ad:	mov	qword ptr [rbp - 0x88], rax
0x4002b4:	mov	eax, 0x10
0x4002b9:	sub	rax, 1
0x4002bd:	add	rax, 0x6c
0x4002c1:	mov	edi, 0x10
0x4002c6:	mov	edx, 0
0x4002cb:	div	rdi
0x4002ce:	imul	rax, rax, 0x10
0x4002d2:	mov	rdx, rax
0x4002d5:	and	rdx, 0xfffffffffffff000
0x4002dc:	mov	rsi, rsp
0x4002df:	sub	rsi, rdx
0x4002e2:	mov	rdx, rsi
0x4002e5:	cmp	rsp, rdx
0x4002e8:	je	0x4002fc
<Block for 0x40028e, 92 bytes>
0x40028e:	and	eax, 0xfff
0x400293:	sub	rax, 8
0x400297:	add	rax, rsp
0x40029a:	or	qword ptr [rax], 0
0x40029e:	mov	rax, rsp
0x4002a1:	add	rax, 0xf
0x4002a5:	shr	rax, 4
0x4002a9:	shl	rax, 4
0x4002ad:	mov	qword ptr [rbp - 0x88], rax
0x4002b4:	mov	eax, 0x10
0x4002b9:	sub	rax, 1
0x4002bd:	add	rax, 0x6c
0x4002c1:	mov	edi, 0x10
0x4002c6:	mov	edx, 0
0x4002cb:	div	rdi
0x4002ce:	imul	rax, rax, 0x10
0x4002d2:	mov	rdx, rax
0x4002d5:	and	rdx, 0xfffffffffffff000
0x4002dc:	mov	rsi, rsp
0x4002df:	sub	rsi, rdx
0x4002e2:	mov	rdx, rsi
0x4002e5:	cmp	rsp, rdx
0x4002e8:	je	0x4002fc
<Block for 0x40025d, 5 bytes>
0x40025d:	cmp	rsp, rdx
0x400260:	je	0x400274
<Block for 0x4002fc, 26 bytes>
0x4002fc:	mov	rdx, rax
0x4002ff:	and	edx, 0xfff
0x400305:	sub	rsp, rdx
0x400308:	mov	rdx, rax
0x40030b:	and	edx, 0xfff
0x400311:	test	rdx, rdx
0x400314:	je	0x400326
<Block for 0x4002ea, 18 bytes>
0x4002ea:	sub	rsp, 0x1000
0x4002f1:	or	qword ptr [rsp + 0xff8], 0
0x4002fa:	jmp	0x4002e5
<Block for 0x400326, 44 bytes>
0x400326:	mov	rax, rsp
0x400329:	add	rax, 0xf
0x40032d:	shr	rax, 4
0x400331:	shl	rax, 4
0x400335:	mov	qword ptr [rbp - 0x80], rax
0x400339:	mov	rax, qword ptr [rbp - 0x88]
0x400340:	mov	edx, 0x31
0x400345:	mov	esi, 0x41
0x40034a:	mov	rdi, rax
0x40034d:	call	0x500000
<Block for 0x400316, 60 bytes>
0x400316:	and	eax, 0xfff
0x40031b:	sub	rax, 8
0x40031f:	add	rax, rsp
0x400322:	or	qword ptr [rax], 0
0x400326:	mov	rax, rsp
0x400329:	add	rax, 0xf
0x40032d:	shr	rax, 4
0x400331:	shl	rax, 4
0x400335:	mov	qword ptr [rbp - 0x80], rax
0x400339:	mov	rax, qword ptr [rbp - 0x88]
0x400340:	mov	edx, 0x31
0x400345:	mov	esi, 0x41
0x40034a:	mov	rdi, rax
0x40034d:	call	0x500000
<Block for 0x4002e5, 5 bytes>
0x4002e5:	cmp	rsp, rdx
0x4002e8:	je	0x4002fc
<Block for 0x400352, 36 bytes>
0x400352:	mov	rax, qword ptr [rbp - 0x88]
0x400359:	add	rax, 0x31
0x40035d:	mov	byte ptr [rax], 0
0x400360:	mov	rax, qword ptr [rbp - 0x80]
0x400364:	mov	edx, 0x63
0x400369:	mov	esi, 0x41
0x40036e:	mov	rdi, rax
0x400371:	call	0x500000
<Block for 0x400376, 58 bytes>
0x400376:	mov	rax, qword ptr [rbp - 0x80]
0x40037a:	add	rax, 0x63
0x40037e:	mov	byte ptr [rax], 0
0x400381:	mov	rax, qword ptr [rbp - 0x80]
0x400385:	mov	qword ptr [rbp - 0x98], rax
0x40038c:	mov	rax, qword ptr [rbp - 0x90]
0x400393:	mov	rax, qword ptr [rax]
0x400396:	mov	qword ptr [rbp - 0x78], rax
0x40039a:	lea	rax, [rbp - 0x70]
0x40039e:	mov	edx, 0x63
0x4003a3:	mov	esi, 0x43
0x4003a8:	mov	rdi, rax
0x4003ab:	call	0x500000
<Block for 0x4003b0, 16 bytes>
0x4003b0:	mov	byte ptr [rbp - 0xd], 0
0x4003b4:	lea	rax, [rbp - 0x70]
0x4003b8:	mov	rdi, rax
0x4003bb:	call	0x500008
<Block for 0x4003c0, 22 bytes>
0x4003c0:	mov	rdx, rax
0x4003c3:	mov	rcx, qword ptr [rbp - 0x78]
0x4003c7:	lea	rax, [rbp - 0x70]
0x4003cb:	mov	rsi, rcx
0x4003ce:	mov	rdi, rax
0x4003d1:	call	0x500010
<Block for 0x4003d6, 16 bytes>
0x4003d6:	mov	byte ptr [rbp - 0xd], 0
0x4003da:	lea	rax, [rbp - 0x70]
0x4003de:	mov	rdi, rax
0x4003e1:	call	0x500018
<Block for 0x4003e6, 16 bytes>
0x4003e6:	nop	
0x4003e7:	mov	rax, qword ptr [rbp - 8]
0x4003eb:	xor	rax, qword ptr fs:[0x28]
0x4003f4:	je	0x4003fb
<Block for 0x4003fb, 2 bytes>
0x4003fb:	leave	
0x4003fc:	ret	
<Block for 0x4003f6, 5 bytes>
0x4003f6:	call	0x500020
