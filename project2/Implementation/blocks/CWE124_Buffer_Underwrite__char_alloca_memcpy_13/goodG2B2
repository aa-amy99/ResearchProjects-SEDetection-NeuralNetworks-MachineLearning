<Block for 0x40035c, 85 bytes>
0x40035c:	endbr64	
0x400360:	push	rbp
0x400361:	mov	rbp, rsp
0x400364:	push	rbx
0x400365:	sub	rsp, 0x88
0x40036c:	mov	rax, qword ptr fs:[0x28]
0x400375:	mov	qword ptr [rbp - 0x18], rax
0x400379:	xor	eax, eax
0x40037b:	mov	eax, 0x10
0x400380:	sub	rax, 1
0x400384:	add	rax, 0x6c
0x400388:	mov	esi, 0x10
0x40038d:	mov	edx, 0
0x400392:	div	rsi
0x400395:	imul	rax, rax, 0x10
0x400399:	mov	rdx, rax
0x40039c:	and	rdx, 0xfffffffffffff000
0x4003a3:	mov	rbx, rsp
0x4003a6:	sub	rbx, rdx
0x4003a9:	mov	rdx, rbx
0x4003ac:	cmp	rsp, rdx
0x4003af:	je	0x4003c3
<Block for 0x4003c3, 26 bytes>
0x4003c3:	mov	rdx, rax
0x4003c6:	and	edx, 0xfff
0x4003cc:	sub	rsp, rdx
0x4003cf:	mov	rdx, rax
0x4003d2:	and	edx, 0xfff
0x4003d8:	test	rdx, rdx
0x4003db:	je	0x4003ed
<Block for 0x4003b1, 18 bytes>
0x4003b1:	sub	rsp, 0x1000
0x4003b8:	or	qword ptr [rsp + 0xff8], 0
0x4003c1:	jmp	0x4003ac
<Block for 0x4003ed, 47 bytes>
0x4003ed:	mov	rax, rsp
0x4003f0:	add	rax, 0xf
0x4003f4:	shr	rax, 4
0x4003f8:	shl	rax, 4
0x4003fc:	mov	qword ptr [rbp - 0x88], rax
0x400403:	mov	rax, qword ptr [rbp - 0x88]
0x40040a:	mov	edx, 0x63
0x40040f:	mov	esi, 0x41
0x400414:	mov	rdi, rax
0x400417:	call	0x500000
<Block for 0x4003dd, 63 bytes>
0x4003dd:	and	eax, 0xfff
0x4003e2:	sub	rax, 8
0x4003e6:	add	rax, rsp
0x4003e9:	or	qword ptr [rax], 0
0x4003ed:	mov	rax, rsp
0x4003f0:	add	rax, 0xf
0x4003f4:	shr	rax, 4
0x4003f8:	shl	rax, 4
0x4003fc:	mov	qword ptr [rbp - 0x88], rax
0x400403:	mov	rax, qword ptr [rbp - 0x88]
0x40040a:	mov	edx, 0x63
0x40040f:	mov	esi, 0x41
0x400414:	mov	rdi, rax
0x400417:	call	0x500000
<Block for 0x4003ac, 5 bytes>
0x4003ac:	cmp	rsp, rdx
0x4003af:	je	0x4003c3
<Block for 0x40041c, 25 bytes>
0x40041c:	mov	rax, qword ptr [rbp - 0x88]
0x400423:	add	rax, 0x63
0x400427:	mov	byte ptr [rax], 0
0x40042a:	mov	eax, dword ptr [rip + 0xffbd8]
0x400430:	cmp	eax, 5
0x400433:	jne	0x400443
<Block for 0x400435, 36 bytes>
0x400435:	mov	rax, qword ptr [rbp - 0x88]
0x40043c:	mov	qword ptr [rbp - 0x90], rax
0x400443:	lea	rax, [rbp - 0x80]
0x400447:	mov	edx, 0x63
0x40044c:	mov	esi, 0x43
0x400451:	mov	rdi, rax
0x400454:	call	0x500000
<Block for 0x400443, 22 bytes>
0x400443:	lea	rax, [rbp - 0x80]
0x400447:	mov	edx, 0x63
0x40044c:	mov	esi, 0x43
0x400451:	mov	rdi, rax
0x400454:	call	0x500000
<Block for 0x400459, 141 bytes>
0x400459:	mov	byte ptr [rbp - 0x1d], 0
0x40045d:	mov	rax, qword ptr [rbp - 0x90]
0x400464:	mov	rcx, qword ptr [rbp - 0x80]
0x400468:	mov	rbx, qword ptr [rbp - 0x78]
0x40046c:	mov	qword ptr [rax], rcx
0x40046f:	mov	qword ptr [rax + 8], rbx
0x400473:	mov	rcx, qword ptr [rbp - 0x70]
0x400477:	mov	rbx, qword ptr [rbp - 0x68]
0x40047b:	mov	qword ptr [rax + 0x10], rcx
0x40047f:	mov	qword ptr [rax + 0x18], rbx
0x400483:	mov	rcx, qword ptr [rbp - 0x60]
0x400487:	mov	rbx, qword ptr [rbp - 0x58]
0x40048b:	mov	qword ptr [rax + 0x20], rcx
0x40048f:	mov	qword ptr [rax + 0x28], rbx
0x400493:	mov	rcx, qword ptr [rbp - 0x50]
0x400497:	mov	rbx, qword ptr [rbp - 0x48]
0x40049b:	mov	qword ptr [rax + 0x30], rcx
0x40049f:	mov	qword ptr [rax + 0x38], rbx
0x4004a3:	mov	rcx, qword ptr [rbp - 0x40]
0x4004a7:	mov	rbx, qword ptr [rbp - 0x38]
0x4004ab:	mov	qword ptr [rax + 0x40], rcx
0x4004af:	mov	qword ptr [rax + 0x48], rbx
0x4004b3:	mov	rcx, qword ptr [rbp - 0x30]
0x4004b7:	mov	rbx, qword ptr [rbp - 0x28]
0x4004bb:	mov	qword ptr [rax + 0x50], rcx
0x4004bf:	mov	qword ptr [rax + 0x58], rbx
0x4004c3:	mov	edx, dword ptr [rbp - 0x20]
0x4004c6:	mov	dword ptr [rax + 0x60], edx
0x4004c9:	mov	rax, qword ptr [rbp - 0x90]
0x4004d0:	add	rax, 0x63
0x4004d4:	mov	byte ptr [rax], 0
0x4004d7:	mov	rax, qword ptr [rbp - 0x90]
0x4004de:	mov	rdi, rax
0x4004e1:	call	0x500010
<Block for 0x4004e6, 16 bytes>
0x4004e6:	nop	
0x4004e7:	mov	rax, qword ptr [rbp - 0x18]
0x4004eb:	xor	rax, qword ptr fs:[0x28]
0x4004f4:	je	0x4004fb
<Block for 0x4004fb, 6 bytes>
0x4004fb:	mov	rbx, qword ptr [rbp - 8]
0x4004ff:	leave	
0x400500:	ret	
<Block for 0x4004f6, 5 bytes>
0x4004f6:	call	0x500018
