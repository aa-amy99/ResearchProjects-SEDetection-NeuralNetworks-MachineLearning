<Block for 0x40001e, 40 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	add	rsp, -0x80
0x40002a:	mov	rax, qword ptr fs:[0x28]
0x400033:	mov	qword ptr [rbp - 8], rax
0x400037:	xor	eax, eax
0x400039:	mov	qword ptr [rbp - 0x78], 0
0x400041:	call	0x400000
<Block for 0x400046, 9 bytes>
0x400046:	test	eax, eax
0x400048:	setne	al
0x40004b:	test	al, al
0x40004d:	je	0x40007e
<Block for 0x40007e, 22 bytes>
0x40007e:	lea	rax, [rbp - 0x70]
0x400082:	mov	edx, 0x63
0x400087:	mov	esi, 0x43
0x40008c:	mov	rdi, rax
0x40008f:	call	0x500008
<Block for 0x40004f, 10 bytes>
0x40004f:	mov	edi, 0x32
0x400054:	call	0x500000
<Block for 0x400094, 16 bytes>
0x400094:	mov	byte ptr [rbp - 0xd], 0
0x400098:	lea	rax, [rbp - 0x70]
0x40009c:	mov	rdi, rax
0x40009f:	call	0x500010
<Block for 0x400059, 26 bytes>
0x400059:	mov	qword ptr [rbp - 0x78], rax
0x40005d:	mov	rax, qword ptr [rbp - 0x78]
0x400061:	mov	edx, 0x31
0x400066:	mov	esi, 0x41
0x40006b:	mov	rdi, rax
0x40006e:	call	0x500008
<Block for 0x4000a4, 22 bytes>
0x4000a4:	mov	rdx, rax
0x4000a7:	mov	rcx, qword ptr [rbp - 0x78]
0x4000ab:	lea	rax, [rbp - 0x70]
0x4000af:	mov	rsi, rcx
0x4000b2:	mov	rdi, rax
0x4000b5:	call	0x500018
<Block for 0x400073, 33 bytes>
0x400073:	mov	rax, qword ptr [rbp - 0x78]
0x400077:	add	rax, 0x31
0x40007b:	mov	byte ptr [rax], 0
0x40007e:	lea	rax, [rbp - 0x70]
0x400082:	mov	edx, 0x63
0x400087:	mov	esi, 0x43
0x40008c:	mov	rdi, rax
0x40008f:	call	0x500008
<Block for 0x4000ba, 16 bytes>
0x4000ba:	mov	byte ptr [rbp - 0xd], 0
0x4000be:	lea	rax, [rbp - 0x70]
0x4000c2:	mov	rdi, rax
0x4000c5:	call	0x500020
<Block for 0x4000ca, 7 bytes>
0x4000ca:	cmp	qword ptr [rbp - 0x78], 0
0x4000cf:	je	0x4000dd
<Block for 0x4000dd, 16 bytes>
0x4000dd:	nop	
0x4000de:	mov	rax, qword ptr [rbp - 8]
0x4000e2:	xor	rax, qword ptr fs:[0x28]
0x4000eb:	je	0x4000f2
<Block for 0x4000d1, 12 bytes>
0x4000d1:	mov	rax, qword ptr [rbp - 0x78]
0x4000d5:	mov	rdi, rax
0x4000d8:	call	0x500028
<Block for 0x4000f2, 2 bytes>
0x4000f2:	leave	
0x4000f3:	ret	
<Block for 0x4000ed, 5 bytes>
0x4000ed:	call	0x500030
