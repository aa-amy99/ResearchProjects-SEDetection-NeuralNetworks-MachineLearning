<Block for 0x400192, 81 bytes>
0x400192:	endbr64	
0x400196:	push	rbp
0x400197:	mov	rbp, rsp
0x40019a:	sub	rsp, 0x20
0x40019e:	mov	rax, qword ptr fs:[0x28]
0x4001a7:	mov	qword ptr [rbp - 8], rax
0x4001ab:	xor	eax, eax
0x4001ad:	mov	eax, 0x10
0x4001b2:	sub	rax, 1
0x4001b6:	add	rax, 0x3a
0x4001ba:	mov	ecx, 0x10
0x4001bf:	mov	edx, 0
0x4001c4:	div	rcx
0x4001c7:	imul	rax, rax, 0x10
0x4001cb:	mov	rdx, rax
0x4001ce:	and	rdx, 0xfffffffffffff000
0x4001d5:	mov	rcx, rsp
0x4001d8:	sub	rcx, rdx
0x4001db:	mov	rdx, rcx
0x4001de:	cmp	rsp, rdx
0x4001e1:	je	0x4001f5
<Block for 0x4001f5, 26 bytes>
0x4001f5:	mov	rdx, rax
0x4001f8:	and	edx, 0xfff
0x4001fe:	sub	rsp, rdx
0x400201:	mov	rdx, rax
0x400204:	and	edx, 0xfff
0x40020a:	test	rdx, rdx
0x40020d:	je	0x40021f
<Block for 0x4001e3, 18 bytes>
0x4001e3:	sub	rsp, 0x1000
0x4001ea:	or	qword ptr [rsp + 0xff8], 0
0x4001f3:	jmp	0x4001de
<Block for 0x40021f, 73 bytes>
0x40021f:	mov	rax, rsp
0x400222:	add	rax, 0xf
0x400226:	shr	rax, 4
0x40022a:	shl	rax, 4
0x40022e:	mov	qword ptr [rbp - 0x18], rax
0x400232:	mov	eax, 0x10
0x400237:	sub	rax, 1
0x40023b:	add	rax, 0x6c
0x40023f:	mov	edi, 0x10
0x400244:	mov	edx, 0
0x400249:	div	rdi
0x40024c:	imul	rax, rax, 0x10
0x400250:	mov	rdx, rax
0x400253:	and	rdx, 0xfffffffffffff000
0x40025a:	mov	rsi, rsp
0x40025d:	sub	rsi, rdx
0x400260:	mov	rdx, rsi
0x400263:	cmp	rsp, rdx
0x400266:	je	0x40027a
<Block for 0x40020f, 89 bytes>
0x40020f:	and	eax, 0xfff
0x400214:	sub	rax, 8
0x400218:	add	rax, rsp
0x40021b:	or	qword ptr [rax], 0
0x40021f:	mov	rax, rsp
0x400222:	add	rax, 0xf
0x400226:	shr	rax, 4
0x40022a:	shl	rax, 4
0x40022e:	mov	qword ptr [rbp - 0x18], rax
0x400232:	mov	eax, 0x10
0x400237:	sub	rax, 1
0x40023b:	add	rax, 0x6c
0x40023f:	mov	edi, 0x10
0x400244:	mov	edx, 0
0x400249:	div	rdi
0x40024c:	imul	rax, rax, 0x10
0x400250:	mov	rdx, rax
0x400253:	and	rdx, 0xfffffffffffff000
0x40025a:	mov	rsi, rsp
0x40025d:	sub	rsi, rdx
0x400260:	mov	rdx, rsi
0x400263:	cmp	rsp, rdx
0x400266:	je	0x40027a
<Block for 0x4001de, 5 bytes>
0x4001de:	cmp	rsp, rdx
0x4001e1:	je	0x4001f5
<Block for 0x40027a, 26 bytes>
0x40027a:	mov	rdx, rax
0x40027d:	and	edx, 0xfff
0x400283:	sub	rsp, rdx
0x400286:	mov	rdx, rax
0x400289:	and	edx, 0xfff
0x40028f:	test	rdx, rdx
0x400292:	je	0x4002a4
<Block for 0x400268, 18 bytes>
0x400268:	sub	rsp, 0x1000
0x40026f:	or	qword ptr [rsp + 0xff8], 0
0x400278:	jmp	0x400263
<Block for 0x4002a4, 41 bytes>
0x4002a4:	mov	rax, rsp
0x4002a7:	add	rax, 0xf
0x4002ab:	shr	rax, 4
0x4002af:	shl	rax, 4
0x4002b3:	mov	qword ptr [rbp - 0x10], rax
0x4002b7:	mov	rax, qword ptr [rbp - 0x18]
0x4002bb:	mov	edx, 0x31
0x4002c0:	mov	esi, 0x41
0x4002c5:	mov	rdi, rax
0x4002c8:	call	0x500000
<Block for 0x400294, 57 bytes>
0x400294:	and	eax, 0xfff
0x400299:	sub	rax, 8
0x40029d:	add	rax, rsp
0x4002a0:	or	qword ptr [rax], 0
0x4002a4:	mov	rax, rsp
0x4002a7:	add	rax, 0xf
0x4002ab:	shr	rax, 4
0x4002af:	shl	rax, 4
0x4002b3:	mov	qword ptr [rbp - 0x10], rax
0x4002b7:	mov	rax, qword ptr [rbp - 0x18]
0x4002bb:	mov	edx, 0x31
0x4002c0:	mov	esi, 0x41
0x4002c5:	mov	rdi, rax
0x4002c8:	call	0x500000
<Block for 0x400263, 5 bytes>
0x400263:	cmp	rsp, rdx
0x400266:	je	0x40027a
<Block for 0x4002cd, 33 bytes>
0x4002cd:	mov	rax, qword ptr [rbp - 0x18]
0x4002d1:	add	rax, 0x31
0x4002d5:	mov	byte ptr [rax], 0
0x4002d8:	mov	rax, qword ptr [rbp - 0x10]
0x4002dc:	mov	edx, 0x63
0x4002e1:	mov	esi, 0x41
0x4002e6:	mov	rdi, rax
0x4002e9:	call	0x500000
<Block for 0x4002ee, 31 bytes>
0x4002ee:	mov	rax, qword ptr [rbp - 0x10]
0x4002f2:	add	rax, 0x63
0x4002f6:	mov	byte ptr [rax], 0
0x4002f9:	mov	rax, qword ptr [rbp - 0x10]
0x4002fd:	mov	qword ptr [rbp - 0x20], rax
0x400301:	lea	rax, [rbp - 0x20]
0x400305:	mov	rdi, rax
0x400308:	call	0x500018
<Block for 0x40030d, 16 bytes>
0x40030d:	nop	
0x40030e:	mov	rax, qword ptr [rbp - 8]
0x400312:	xor	rax, qword ptr fs:[0x28]
0x40031b:	je	0x400322
<Block for 0x400322, 2 bytes>
0x400322:	leave	
0x400323:	ret	
<Block for 0x40031d, 5 bytes>
0x40031d:	call	0x500010
