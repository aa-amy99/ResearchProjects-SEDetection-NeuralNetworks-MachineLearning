<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0xc], 0xffffffff
0x400022:	mov	eax, dword ptr [rip + 0x12c]
0x400028:	cmp	eax, 5
0x40002b:	jne	0x40004c
<Block for 0x40002d, 31 bytes>
0x40002d:	mov	rax, qword ptr [rip + 0xfffcc]
0x400034:	lea	rdx, [rbp - 0xc]
0x400038:	lea	rsi, [rip + 0x121]
0x40003f:	mov	rdi, rax
0x400042:	mov	eax, 0
0x400047:	call	0x500008
<Block for 0x40004c, 8 bytes>
0x40004c:	mov	eax, dword ptr [rbp - 0xc]
0x40004f:	cmp	eax, 5
0x400052:	jg	0x400073
<Block for 0x400054, 31 bytes>
0x400054:	lea	rcx, [rip + 0x165]
0x40005b:	mov	edx, 0x2a
0x400060:	lea	rsi, [rip + 0x101]
0x400067:	lea	rdi, [rip + 0x122]
0x40006e:	call	0x500010
<Block for 0x400073, 16 bytes>
0x400073:	nop	
0x400074:	mov	rax, qword ptr [rbp - 8]
0x400078:	xor	rax, qword ptr fs:[0x28]
0x400081:	je	0x400088
<Block for 0x400088, 2 bytes>
0x400088:	leave	
0x400089:	ret	
<Block for 0x400083, 5 bytes>
0x400083:	call	0x500018
