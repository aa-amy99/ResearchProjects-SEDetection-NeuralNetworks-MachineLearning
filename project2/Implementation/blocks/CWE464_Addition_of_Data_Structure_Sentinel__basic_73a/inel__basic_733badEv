<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x68
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x60]
0x400020:	mov	rdi, rax
0x400023:	call	0x4002c0
<Block for 0x400028, 19 bytes>
0x400028:	mov	byte ptr [rbp - 0x61], 0x20
0x40002c:	mov	rax, qword ptr [rip + 0xfffcd]
0x400033:	mov	rdi, rax
0x400036:	call	0x500008
<Block for 0x40003b, 19 bytes>
0x40003b:	mov	byte ptr [rbp - 0x1a], al
0x40003e:	mov	byte ptr [rbp - 0x19], 0
0x400042:	lea	rax, [rbp - 0x1a]
0x400046:	mov	rdi, rax
0x400049:	call	0x500010
<Block for 0x40004e, 22 bytes>
0x40004e:	mov	byte ptr [rbp - 0x61], al
0x400051:	lea	rdx, [rbp - 0x61]
0x400055:	lea	rax, [rbp - 0x60]
0x400059:	mov	rsi, rdx
0x40005c:	mov	rdi, rax
0x40005f:	call	0x4003b6
<Block for 0x400064, 19 bytes>
0x400064:	lea	rdx, [rbp - 0x61]
0x400068:	lea	rax, [rbp - 0x60]
0x40006c:	mov	rsi, rdx
0x40006f:	mov	rdi, rax
0x400072:	call	0x4003b6
<Block for 0x400077, 19 bytes>
0x400077:	lea	rdx, [rbp - 0x61]
0x40007b:	lea	rax, [rbp - 0x60]
0x40007f:	mov	rsi, rdx
0x400082:	mov	rdi, rax
0x400085:	call	0x4003b6
<Block for 0x40008a, 19 bytes>
0x40008a:	lea	rdx, [rbp - 0x60]
0x40008e:	lea	rax, [rbp - 0x40]
0x400092:	mov	rsi, rdx
0x400095:	mov	rdi, rax
0x400098:	call	0x4003f0
<Block for 0x40009d, 12 bytes>
0x40009d:	lea	rax, [rbp - 0x40]
0x4000a1:	mov	rdi, rax
0x4000a4:	call	0x500018
<Block for 0x4000a9, 12 bytes>
0x4000a9:	lea	rax, [rbp - 0x40]
0x4000ad:	mov	rdi, rax
0x4000b0:	call	0x4002e0
<Block for 0x4000b5, 12 bytes>
0x4000b5:	lea	rax, [rbp - 0x60]
0x4000b9:	mov	rdi, rax
0x4000bc:	call	0x4002e0
<Block for 0x4000c1, 16 bytes>
0x4000c1:	nop	
0x4000c2:	mov	rax, qword ptr [rbp - 0x18]
0x4000c6:	xor	rax, qword ptr fs:[0x28]
0x4000cf:	je	0x40010b
<Block for 0x40010b, 7 bytes>
0x40010b:	add	rsp, 0x68
0x40010f:	pop	rbx
0x400110:	pop	rbp
0x400111:	ret	
<Block for 0x4000d1, 2 bytes>
0x4000d1:	jmp	0x400106
<Block for 0x400106, 5 bytes>
0x400106:	call	0x500028
