<Block for 0x400000, 51 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xa0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	qword ptr [rbp - 0x88], 0
0x400029:	mov	edi, 0x64
0x40002e:	call	0x500000
<Block for 0x400033, 26 bytes>
0x400033:	mov	qword ptr [rbp - 0x80], rax
0x400037:	mov	rax, qword ptr [rbp - 0x80]
0x40003b:	mov	edx, 0x63
0x400040:	mov	esi, 0x41
0x400045:	mov	rdi, rax
0x400048:	call	0x500008
<Block for 0x40004d, 73 bytes>
0x40004d:	mov	rax, qword ptr [rbp - 0x80]
0x400051:	add	rax, 0x63
0x400055:	mov	byte ptr [rax], 0
0x400058:	mov	rax, qword ptr [rbp - 0x80]
0x40005c:	sub	rax, 8
0x400060:	mov	qword ptr [rbp - 0x88], rax
0x400067:	mov	rax, qword ptr [rbp - 0x88]
0x40006e:	mov	qword ptr [rbp - 0x98], rax
0x400075:	mov	rax, qword ptr [rbp - 0x98]
0x40007c:	mov	qword ptr [rbp - 0x78], rax
0x400080:	lea	rax, [rbp - 0x70]
0x400084:	mov	edx, 0x63
0x400089:	mov	esi, 0x43
0x40008e:	mov	rdi, rax
0x400091:	call	0x500008
<Block for 0x400096, 25 bytes>
0x400096:	mov	byte ptr [rbp - 0xd], 0
0x40009a:	mov	qword ptr [rbp - 0x90], 0
0x4000a5:	cmp	qword ptr [rbp - 0x90], 0x63
0x4000ad:	ja	0x4000da
<Block for 0x4000af, 43 bytes>
0x4000af:	mov	rdx, qword ptr [rbp - 0x78]
0x4000b3:	mov	rax, qword ptr [rbp - 0x90]
0x4000ba:	add	rax, rdx
0x4000bd:	movzx	eax, byte ptr [rax]
0x4000c0:	lea	rcx, [rbp - 0x70]
0x4000c4:	mov	rdx, qword ptr [rbp - 0x90]
0x4000cb:	add	rdx, rcx
0x4000ce:	mov	byte ptr [rdx], al
0x4000d0:	add	qword ptr [rbp - 0x90], 1
0x4000d8:	jmp	0x4000a5
<Block for 0x4000da, 16 bytes>
0x4000da:	mov	byte ptr [rbp - 0xd], 0
0x4000de:	lea	rax, [rbp - 0x70]
0x4000e2:	mov	rdi, rax
0x4000e5:	call	0x500010
<Block for 0x4000a5, 10 bytes>
0x4000a5:	cmp	qword ptr [rbp - 0x90], 0x63
0x4000ad:	ja	0x4000da
<Block for 0x4000ea, 16 bytes>
0x4000ea:	nop	
0x4000eb:	mov	rax, qword ptr [rbp - 8]
0x4000ef:	xor	rax, qword ptr fs:[0x28]
0x4000f8:	je	0x4000ff
<Block for 0x4000ff, 2 bytes>
0x4000ff:	leave	
0x400100:	ret	
<Block for 0x4000fa, 5 bytes>
0x4000fa:	call	0x500018
