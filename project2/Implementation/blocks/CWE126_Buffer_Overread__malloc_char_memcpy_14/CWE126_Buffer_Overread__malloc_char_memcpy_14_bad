<Block for 0x400000, 46 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x78], 0
0x400023:	mov	eax, dword ptr [rip + 0xfffd7]
0x400029:	cmp	eax, 5
0x40002c:	jne	0x40006e
<Block for 0x40002e, 10 bytes>
0x40002e:	mov	edi, 0x32
0x400033:	call	0x500008
<Block for 0x40006e, 22 bytes>
0x40006e:	lea	rax, [rbp - 0x70]
0x400072:	mov	edx, 0x63
0x400077:	mov	esi, 0x43
0x40007c:	mov	rdi, rax
0x40007f:	call	0x500018
<Block for 0x400038, 11 bytes>
0x400038:	mov	qword ptr [rbp - 0x78], rax
0x40003c:	cmp	qword ptr [rbp - 0x78], 0
0x400041:	jne	0x40004d
<Block for 0x400084, 16 bytes>
0x400084:	mov	byte ptr [rbp - 0xd], 0
0x400088:	lea	rax, [rbp - 0x70]
0x40008c:	mov	rdi, rax
0x40008f:	call	0x500020
<Block for 0x400043, 10 bytes>
0x400043:	mov	edi, 0xffffffff
0x400048:	call	0x500010
<Block for 0x40004d, 22 bytes>
0x40004d:	mov	rax, qword ptr [rbp - 0x78]
0x400051:	mov	edx, 0x31
0x400056:	mov	esi, 0x41
0x40005b:	mov	rdi, rax
0x40005e:	call	0x500018
<Block for 0x400094, 22 bytes>
0x400094:	mov	rdx, rax
0x400097:	mov	rcx, qword ptr [rbp - 0x78]
0x40009b:	lea	rax, [rbp - 0x70]
0x40009f:	mov	rsi, rcx
0x4000a2:	mov	rdi, rax
0x4000a5:	call	0x500028
<Block for 0x400063, 33 bytes>
0x400063:	mov	rax, qword ptr [rbp - 0x78]
0x400067:	add	rax, 0x31
0x40006b:	mov	byte ptr [rax], 0
0x40006e:	lea	rax, [rbp - 0x70]
0x400072:	mov	edx, 0x63
0x400077:	mov	esi, 0x43
0x40007c:	mov	rdi, rax
0x40007f:	call	0x500018
<Block for 0x4000aa, 16 bytes>
0x4000aa:	mov	byte ptr [rbp - 0xd], 0
0x4000ae:	lea	rax, [rbp - 0x70]
0x4000b2:	mov	rdi, rax
0x4000b5:	call	0x500030
<Block for 0x4000ba, 12 bytes>
0x4000ba:	mov	rax, qword ptr [rbp - 0x78]
0x4000be:	mov	rdi, rax
0x4000c1:	call	0x500038
<Block for 0x4000c6, 16 bytes>
0x4000c6:	nop	
0x4000c7:	mov	rax, qword ptr [rbp - 8]
0x4000cb:	xor	rax, qword ptr fs:[0x28]
0x4000d4:	je	0x4000db
<Block for 0x4000db, 2 bytes>
0x4000db:	leave	
0x4000dc:	ret	
<Block for 0x4000d6, 5 bytes>
0x4000d6:	call	0x500040
