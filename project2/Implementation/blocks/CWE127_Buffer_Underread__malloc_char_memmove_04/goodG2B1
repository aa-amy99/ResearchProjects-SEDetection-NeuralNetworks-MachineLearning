<Block for 0x4000d1, 44 bytes>
0x4000d1:	endbr64	
0x4000d5:	push	rbp
0x4000d6:	mov	rbp, rsp
0x4000d9:	add	rsp, -0x80
0x4000dd:	mov	rax, qword ptr fs:[0x28]
0x4000e6:	mov	qword ptr [rbp - 8], rax
0x4000ea:	xor	eax, eax
0x4000ec:	mov	qword ptr [rbp - 0x80], 0
0x4000f4:	mov	eax, 0
0x4000f9:	test	eax, eax
0x4000fb:	je	0x40010b
<Block for 0x40010b, 10 bytes>
0x40010b:	mov	edi, 0x64
0x400110:	call	0x500000
<Block for 0x4000fd, 12 bytes>
0x4000fd:	lea	rdi, [rip + 0x19c]
0x400104:	call	0x500020
<Block for 0x400115, 11 bytes>
0x400115:	mov	qword ptr [rbp - 0x78], rax
0x400119:	cmp	qword ptr [rbp - 0x78], 0
0x40011e:	jne	0x40012a
<Block for 0x400109, 2 bytes>
0x400109:	jmp	0x400153
<Block for 0x400120, 10 bytes>
0x400120:	mov	edi, 0xffffffff
0x400125:	call	0x500008
<Block for 0x40012a, 22 bytes>
0x40012a:	mov	rax, qword ptr [rbp - 0x78]
0x40012e:	mov	edx, 0x63
0x400133:	mov	esi, 0x41
0x400138:	mov	rdi, rax
0x40013b:	call	0x500010
<Block for 0x400153, 22 bytes>
0x400153:	lea	rax, [rbp - 0x70]
0x400157:	mov	edx, 0x63
0x40015c:	mov	esi, 0x43
0x400161:	mov	rdi, rax
0x400164:	call	0x500010
<Block for 0x400140, 41 bytes>
0x400140:	mov	rax, qword ptr [rbp - 0x78]
0x400144:	add	rax, 0x63
0x400148:	mov	byte ptr [rax], 0
0x40014b:	mov	rax, qword ptr [rbp - 0x78]
0x40014f:	mov	qword ptr [rbp - 0x80], rax
0x400153:	lea	rax, [rbp - 0x70]
0x400157:	mov	edx, 0x63
0x40015c:	mov	esi, 0x43
0x400161:	mov	rdi, rax
0x400164:	call	0x500010
<Block for 0x400169, 28 bytes>
0x400169:	mov	byte ptr [rbp - 0xd], 0
0x40016d:	mov	rcx, qword ptr [rbp - 0x80]
0x400171:	lea	rax, [rbp - 0x70]
0x400175:	mov	edx, 0x64
0x40017a:	mov	rsi, rcx
0x40017d:	mov	rdi, rax
0x400180:	call	0x500018
<Block for 0x400185, 16 bytes>
0x400185:	mov	byte ptr [rbp - 0xd], 0
0x400189:	lea	rax, [rbp - 0x70]
0x40018d:	mov	rdi, rax
0x400190:	call	0x500020
<Block for 0x400195, 16 bytes>
0x400195:	nop	
0x400196:	mov	rax, qword ptr [rbp - 8]
0x40019a:	xor	rax, qword ptr fs:[0x28]
0x4001a3:	je	0x4001aa
<Block for 0x4001aa, 2 bytes>
0x4001aa:	leave	
0x4001ab:	ret	
<Block for 0x4001a5, 5 bytes>
0x4001a5:	call	0x500028
