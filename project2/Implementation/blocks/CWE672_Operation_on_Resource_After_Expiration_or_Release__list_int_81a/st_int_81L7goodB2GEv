<Block for 0x40020a, 40 bytes>
0x40020a:	endbr64	
0x40020e:	push	rbp
0x40020f:	mov	rbp, rsp
0x400212:	push	rbx
0x400213:	sub	rsp, 0x58
0x400217:	mov	rax, qword ptr fs:[0x28]
0x400220:	mov	qword ptr [rbp - 0x18], rax
0x400224:	xor	eax, eax
0x400226:	lea	rax, [rbp - 0x50]
0x40022a:	mov	rdi, rax
0x40022d:	call	0x400438
<Block for 0x400232, 26 bytes>
0x400232:	mov	dword ptr [rbp - 0x30], 0x64
0x400239:	lea	rdx, [rbp - 0x30]
0x40023d:	lea	rax, [rbp - 0x50]
0x400241:	mov	rsi, rdx
0x400244:	mov	rdi, rax
0x400247:	call	0x400542
<Block for 0x40024c, 26 bytes>
0x40024c:	mov	dword ptr [rbp - 0x30], 0
0x400253:	lea	rdx, [rbp - 0x30]
0x400257:	lea	rax, [rbp - 0x50]
0x40025b:	mov	rsi, rdx
0x40025e:	mov	rdi, rax
0x400261:	call	0x400542
<Block for 0x400266, 48 bytes>
0x400266:	lea	rax, [rip + 0xffdc3]
0x40026d:	mov	qword ptr [rbp - 0x60], rax
0x400271:	lea	rax, [rbp - 0x60]
0x400275:	mov	qword ptr [rbp - 0x58], rax
0x400279:	mov	rax, qword ptr [rbp - 0x58]
0x40027d:	mov	rax, qword ptr [rax]
0x400280:	mov	rbx, qword ptr [rax]
0x400283:	lea	rdx, [rbp - 0x50]
0x400287:	lea	rax, [rbp - 0x30]
0x40028b:	mov	rsi, rdx
0x40028e:	mov	rdi, rax
0x400291:	call	0x400590
<Block for 0x400296, 16 bytes>
0x400296:	lea	rdx, [rbp - 0x30]
0x40029a:	mov	rax, qword ptr [rbp - 0x58]
0x40029e:	mov	rsi, rdx
0x4002a1:	mov	rdi, rax
0x4002a4:	call	rbx
<Block for 0x4002a6, 12 bytes>
0x4002a6:	lea	rax, [rbp - 0x30]
0x4002aa:	mov	rdi, rax
0x4002ad:	call	0x400458
<Block for 0x4002b2, 12 bytes>
0x4002b2:	lea	rax, [rbp - 0x50]
0x4002b6:	mov	rdi, rax
0x4002b9:	call	0x400458
<Block for 0x4002be, 16 bytes>
0x4002be:	nop	
0x4002bf:	mov	rax, qword ptr [rbp - 0x18]
0x4002c3:	xor	rax, qword ptr fs:[0x28]
0x4002cc:	je	0x400308
<Block for 0x400308, 7 bytes>
0x400308:	add	rsp, 0x58
0x40030c:	pop	rbx
0x40030d:	pop	rbp
0x40030e:	ret	
<Block for 0x4002ce, 2 bytes>
0x4002ce:	jmp	0x400303
<Block for 0x400303, 5 bytes>
0x400303:	call	0x500010
