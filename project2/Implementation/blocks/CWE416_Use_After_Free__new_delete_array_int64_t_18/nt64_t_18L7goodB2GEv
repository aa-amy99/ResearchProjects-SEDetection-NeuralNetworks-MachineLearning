<Block for 0x400081, 35 bytes>
0x400081:	endbr64	
0x400085:	push	rbp
0x400086:	mov	rbp, rsp
0x400089:	sub	rsp, 0x10
0x40008d:	mov	qword ptr [rbp - 8], 0
0x400095:	nop	
0x400096:	endbr64	
0x40009a:	mov	edi, 0x320
0x40009f:	call	0x500000
<Block for 0x4000a4, 19 bytes>
0x4000a4:	mov	qword ptr [rbp - 8], rax
0x4000a8:	mov	qword ptr [rbp - 0x10], 0
0x4000b0:	cmp	qword ptr [rbp - 0x10], 0x63
0x4000b5:	ja	0x4000d8
<Block for 0x4000b7, 33 bytes>
0x4000b7:	mov	rax, qword ptr [rbp - 0x10]
0x4000bb:	lea	rdx, [rax*8]
0x4000c3:	mov	rax, qword ptr [rbp - 8]
0x4000c7:	add	rax, rdx
0x4000ca:	mov	qword ptr [rax], 5
0x4000d1:	add	qword ptr [rbp - 0x10], 1
0x4000d6:	jmp	0x4000b0
<Block for 0x4000d8, 7 bytes>
0x4000d8:	cmp	qword ptr [rbp - 8], 0
0x4000dd:	je	0x4000eb
<Block for 0x4000b0, 7 bytes>
0x4000b0:	cmp	qword ptr [rbp - 0x10], 0x63
0x4000b5:	ja	0x4000d8
<Block for 0x4000eb, 8 bytes>
0x4000eb:	nop	
0x4000ec:	endbr64	
0x4000f0:	nop	
0x4000f1:	leave	
0x4000f2:	ret	
<Block for 0x4000df, 12 bytes>
0x4000df:	mov	rax, qword ptr [rbp - 8]
0x4000e3:	mov	rdi, rax
0x4000e6:	call	0x500008
