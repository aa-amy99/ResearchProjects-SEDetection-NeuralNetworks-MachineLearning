<Block for 0x400000, 21 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r12
0x40000a:	push	rbx
0x40000b:	nop	
0x40000c:	endbr64	
0x400010:	call	0x500000
<Block for 0x400015, 12 bytes>
0x400015:	and	eax, 1
0x400018:	test	eax, eax
0x40001a:	sete	al
0x40001d:	test	al, al
0x40001f:	je	0x400056
<Block for 0x400056, 5 bytes>
0x400056:	call	0x500000
<Block for 0x400021, 10 bytes>
0x400021:	mov	edi, 0x10
0x400026:	call	0x500008
<Block for 0x40005b, 12 bytes>
0x40005b:	and	eax, 1
0x40005e:	test	eax, eax
0x400060:	sete	al
0x400063:	test	al, al
0x400065:	je	0x40009c
<Block for 0x40002b, 18 bytes>
0x40002b:	mov	rbx, rax
0x40002e:	lea	rsi, [rip + 0x260]
0x400035:	mov	rdi, rbx
0x400038:	call	0x500010
<Block for 0x40009c, 12 bytes>
0x40009c:	lea	rdi, [rip + 0x1fc]
0x4000a3:	call	0x500058
<Block for 0x400067, 10 bytes>
0x400067:	mov	edi, 0x10
0x40006c:	call	0x500008
<Block for 0x40003d, 25 bytes>
0x40003d:	mov	rax, qword ptr [rip + 0xfffdc]
0x400044:	mov	rdx, rax
0x400047:	lea	rsi, [rip + 0xfffda]
0x40004e:	mov	rdi, rbx
0x400051:	call	0x500030
<Block for 0x4000a8, 2 bytes>
0x4000a8:	jmp	0x400108
<Block for 0x400071, 18 bytes>
0x400071:	mov	rbx, rax
0x400074:	lea	rsi, [rip + 0x21f]
0x40007b:	mov	rdi, rbx
0x40007e:	call	0x500038
<Block for 0x400108, 5 bytes>
0x400108:	pop	rbx
0x400109:	pop	r12
0x40010b:	pop	rbp
0x40010c:	ret	
<Block for 0x400083, 25 bytes>
0x400083:	mov	rax, qword ptr [rip + 0xfffbe]
0x40008a:	mov	rdx, rax
0x40008d:	lea	rsi, [rip + 0xfffbc]
0x400094:	mov	rdi, rbx
0x400097:	call	0x500030
