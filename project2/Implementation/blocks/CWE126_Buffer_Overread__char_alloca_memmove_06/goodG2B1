<Block for 0x4001e5, 84 bytes>
0x4001e5:	endbr64	
0x4001e9:	push	rbp
0x4001ea:	mov	rbp, rsp
0x4001ed:	sub	rsp, 0x90
0x4001f4:	mov	rax, qword ptr fs:[0x28]
0x4001fd:	mov	qword ptr [rbp - 8], rax
0x400201:	xor	eax, eax
0x400203:	mov	eax, 0x10
0x400208:	sub	rax, 1
0x40020c:	add	rax, 0x3a
0x400210:	mov	ecx, 0x10
0x400215:	mov	edx, 0
0x40021a:	div	rcx
0x40021d:	imul	rax, rax, 0x10
0x400221:	mov	rdx, rax
0x400224:	and	rdx, 0xfffffffffffff000
0x40022b:	mov	rcx, rsp
0x40022e:	sub	rcx, rdx
0x400231:	mov	rdx, rcx
0x400234:	cmp	rsp, rdx
0x400237:	je	0x40024b
<Block for 0x40024b, 26 bytes>
0x40024b:	mov	rdx, rax
0x40024e:	and	edx, 0xfff
0x400254:	sub	rsp, rdx
0x400257:	mov	rdx, rax
0x40025a:	and	edx, 0xfff
0x400260:	test	rdx, rdx
0x400263:	je	0x400275
<Block for 0x400239, 18 bytes>
0x400239:	sub	rsp, 0x1000
0x400240:	or	qword ptr [rsp + 0xff8], 0
0x400249:	jmp	0x400234
<Block for 0x400275, 73 bytes>
0x400275:	mov	rax, rsp
0x400278:	add	rax, 0xf
0x40027c:	shr	rax, 4
0x400280:	shl	rax, 4
0x400284:	mov	qword ptr [rbp - 0x80], rax
0x400288:	mov	eax, 0x10
0x40028d:	sub	rax, 1
0x400291:	add	rax, 0x6c
0x400295:	mov	ecx, 0x10
0x40029a:	mov	edx, 0
0x40029f:	div	rcx
0x4002a2:	imul	rax, rax, 0x10
0x4002a6:	mov	rdx, rax
0x4002a9:	and	rdx, 0xfffffffffffff000
0x4002b0:	mov	rsi, rsp
0x4002b3:	sub	rsi, rdx
0x4002b6:	mov	rdx, rsi
0x4002b9:	cmp	rsp, rdx
0x4002bc:	je	0x4002d0
<Block for 0x400265, 89 bytes>
0x400265:	and	eax, 0xfff
0x40026a:	sub	rax, 8
0x40026e:	add	rax, rsp
0x400271:	or	qword ptr [rax], 0
0x400275:	mov	rax, rsp
0x400278:	add	rax, 0xf
0x40027c:	shr	rax, 4
0x400280:	shl	rax, 4
0x400284:	mov	qword ptr [rbp - 0x80], rax
0x400288:	mov	eax, 0x10
0x40028d:	sub	rax, 1
0x400291:	add	rax, 0x6c
0x400295:	mov	ecx, 0x10
0x40029a:	mov	edx, 0
0x40029f:	div	rcx
0x4002a2:	imul	rax, rax, 0x10
0x4002a6:	mov	rdx, rax
0x4002a9:	and	rdx, 0xfffffffffffff000
0x4002b0:	mov	rsi, rsp
0x4002b3:	sub	rsi, rdx
0x4002b6:	mov	rdx, rsi
0x4002b9:	cmp	rsp, rdx
0x4002bc:	je	0x4002d0
<Block for 0x400234, 5 bytes>
0x400234:	cmp	rsp, rdx
0x400237:	je	0x40024b
<Block for 0x4002d0, 26 bytes>
0x4002d0:	mov	rdx, rax
0x4002d3:	and	edx, 0xfff
0x4002d9:	sub	rsp, rdx
0x4002dc:	mov	rdx, rax
0x4002df:	and	edx, 0xfff
0x4002e5:	test	rdx, rdx
0x4002e8:	je	0x4002fa
<Block for 0x4002be, 18 bytes>
0x4002be:	sub	rsp, 0x1000
0x4002c5:	or	qword ptr [rsp + 0xff8], 0
0x4002ce:	jmp	0x4002b9
<Block for 0x4002fa, 41 bytes>
0x4002fa:	mov	rax, rsp
0x4002fd:	add	rax, 0xf
0x400301:	shr	rax, 4
0x400305:	shl	rax, 4
0x400309:	mov	qword ptr [rbp - 0x78], rax
0x40030d:	mov	rax, qword ptr [rbp - 0x80]
0x400311:	mov	edx, 0x31
0x400316:	mov	esi, 0x41
0x40031b:	mov	rdi, rax
0x40031e:	call	0x500000
<Block for 0x4002ea, 57 bytes>
0x4002ea:	and	eax, 0xfff
0x4002ef:	sub	rax, 8
0x4002f3:	add	rax, rsp
0x4002f6:	or	qword ptr [rax], 0
0x4002fa:	mov	rax, rsp
0x4002fd:	add	rax, 0xf
0x400301:	shr	rax, 4
0x400305:	shl	rax, 4
0x400309:	mov	qword ptr [rbp - 0x78], rax
0x40030d:	mov	rax, qword ptr [rbp - 0x80]
0x400311:	mov	edx, 0x31
0x400316:	mov	esi, 0x41
0x40031b:	mov	rdi, rax
0x40031e:	call	0x500000
<Block for 0x4002b9, 5 bytes>
0x4002b9:	cmp	rsp, rdx
0x4002bc:	je	0x4002d0
<Block for 0x400323, 33 bytes>
0x400323:	mov	rax, qword ptr [rbp - 0x80]
0x400327:	add	rax, 0x31
0x40032b:	mov	byte ptr [rax], 0
0x40032e:	mov	rax, qword ptr [rbp - 0x78]
0x400332:	mov	edx, 0x63
0x400337:	mov	esi, 0x41
0x40033c:	mov	rdi, rax
0x40033f:	call	0x500000
<Block for 0x400344, 21 bytes>
0x400344:	mov	rax, qword ptr [rbp - 0x78]
0x400348:	add	rax, 0x63
0x40034c:	mov	byte ptr [rax], 0
0x40034f:	mov	eax, 5
0x400354:	cmp	eax, 5
0x400357:	je	0x400367
<Block for 0x400367, 33 bytes>
0x400367:	mov	rax, qword ptr [rbp - 0x78]
0x40036b:	mov	qword ptr [rbp - 0x88], rax
0x400372:	lea	rax, [rbp - 0x70]
0x400376:	mov	edx, 0x63
0x40037b:	mov	esi, 0x43
0x400380:	mov	rdi, rax
0x400383:	call	0x500000
<Block for 0x400359, 12 bytes>
0x400359:	lea	rdi, [rip + 0x280]
0x400360:	call	0x500018
<Block for 0x400388, 16 bytes>
0x400388:	mov	byte ptr [rbp - 0xd], 0
0x40038c:	lea	rax, [rbp - 0x70]
0x400390:	mov	rdi, rax
0x400393:	call	0x500008
<Block for 0x400365, 2 bytes>
0x400365:	jmp	0x400372
<Block for 0x400398, 25 bytes>
0x400398:	mov	rdx, rax
0x40039b:	mov	rcx, qword ptr [rbp - 0x88]
0x4003a2:	lea	rax, [rbp - 0x70]
0x4003a6:	mov	rsi, rcx
0x4003a9:	mov	rdi, rax
0x4003ac:	call	0x500010
<Block for 0x400372, 22 bytes>
0x400372:	lea	rax, [rbp - 0x70]
0x400376:	mov	edx, 0x63
0x40037b:	mov	esi, 0x43
0x400380:	mov	rdi, rax
0x400383:	call	0x500000
<Block for 0x4003b1, 16 bytes>
0x4003b1:	mov	byte ptr [rbp - 0xd], 0
0x4003b5:	lea	rax, [rbp - 0x70]
0x4003b9:	mov	rdi, rax
0x4003bc:	call	0x500018
<Block for 0x4003c1, 16 bytes>
0x4003c1:	nop	
0x4003c2:	mov	rax, qword ptr [rbp - 8]
0x4003c6:	xor	rax, qword ptr fs:[0x28]
0x4003cf:	je	0x4003d6
<Block for 0x4003d6, 2 bytes>
0x4003d6:	leave	
0x4003d7:	ret	
<Block for 0x4003d1, 5 bytes>
0x4003d1:	call	0x500020
