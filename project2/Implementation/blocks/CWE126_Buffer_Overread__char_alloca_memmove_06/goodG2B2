<Block for 0x4003d8, 84 bytes>
0x4003d8:	endbr64	
0x4003dc:	push	rbp
0x4003dd:	mov	rbp, rsp
0x4003e0:	sub	rsp, 0x90
0x4003e7:	mov	rax, qword ptr fs:[0x28]
0x4003f0:	mov	qword ptr [rbp - 8], rax
0x4003f4:	xor	eax, eax
0x4003f6:	mov	eax, 0x10
0x4003fb:	sub	rax, 1
0x4003ff:	add	rax, 0x3a
0x400403:	mov	ecx, 0x10
0x400408:	mov	edx, 0
0x40040d:	div	rcx
0x400410:	imul	rax, rax, 0x10
0x400414:	mov	rdx, rax
0x400417:	and	rdx, 0xfffffffffffff000
0x40041e:	mov	rcx, rsp
0x400421:	sub	rcx, rdx
0x400424:	mov	rdx, rcx
0x400427:	cmp	rsp, rdx
0x40042a:	je	0x40043e
<Block for 0x40043e, 26 bytes>
0x40043e:	mov	rdx, rax
0x400441:	and	edx, 0xfff
0x400447:	sub	rsp, rdx
0x40044a:	mov	rdx, rax
0x40044d:	and	edx, 0xfff
0x400453:	test	rdx, rdx
0x400456:	je	0x400468
<Block for 0x40042c, 18 bytes>
0x40042c:	sub	rsp, 0x1000
0x400433:	or	qword ptr [rsp + 0xff8], 0
0x40043c:	jmp	0x400427
<Block for 0x400468, 73 bytes>
0x400468:	mov	rax, rsp
0x40046b:	add	rax, 0xf
0x40046f:	shr	rax, 4
0x400473:	shl	rax, 4
0x400477:	mov	qword ptr [rbp - 0x80], rax
0x40047b:	mov	eax, 0x10
0x400480:	sub	rax, 1
0x400484:	add	rax, 0x6c
0x400488:	mov	edi, 0x10
0x40048d:	mov	edx, 0
0x400492:	div	rdi
0x400495:	imul	rax, rax, 0x10
0x400499:	mov	rdx, rax
0x40049c:	and	rdx, 0xfffffffffffff000
0x4004a3:	mov	rsi, rsp
0x4004a6:	sub	rsi, rdx
0x4004a9:	mov	rdx, rsi
0x4004ac:	cmp	rsp, rdx
0x4004af:	je	0x4004c3
<Block for 0x400458, 89 bytes>
0x400458:	and	eax, 0xfff
0x40045d:	sub	rax, 8
0x400461:	add	rax, rsp
0x400464:	or	qword ptr [rax], 0
0x400468:	mov	rax, rsp
0x40046b:	add	rax, 0xf
0x40046f:	shr	rax, 4
0x400473:	shl	rax, 4
0x400477:	mov	qword ptr [rbp - 0x80], rax
0x40047b:	mov	eax, 0x10
0x400480:	sub	rax, 1
0x400484:	add	rax, 0x6c
0x400488:	mov	edi, 0x10
0x40048d:	mov	edx, 0
0x400492:	div	rdi
0x400495:	imul	rax, rax, 0x10
0x400499:	mov	rdx, rax
0x40049c:	and	rdx, 0xfffffffffffff000
0x4004a3:	mov	rsi, rsp
0x4004a6:	sub	rsi, rdx
0x4004a9:	mov	rdx, rsi
0x4004ac:	cmp	rsp, rdx
0x4004af:	je	0x4004c3
<Block for 0x400427, 5 bytes>
0x400427:	cmp	rsp, rdx
0x40042a:	je	0x40043e
<Block for 0x4004c3, 26 bytes>
0x4004c3:	mov	rdx, rax
0x4004c6:	and	edx, 0xfff
0x4004cc:	sub	rsp, rdx
0x4004cf:	mov	rdx, rax
0x4004d2:	and	edx, 0xfff
0x4004d8:	test	rdx, rdx
0x4004db:	je	0x4004ed
<Block for 0x4004b1, 18 bytes>
0x4004b1:	sub	rsp, 0x1000
0x4004b8:	or	qword ptr [rsp + 0xff8], 0
0x4004c1:	jmp	0x4004ac
<Block for 0x4004ed, 41 bytes>
0x4004ed:	mov	rax, rsp
0x4004f0:	add	rax, 0xf
0x4004f4:	shr	rax, 4
0x4004f8:	shl	rax, 4
0x4004fc:	mov	qword ptr [rbp - 0x78], rax
0x400500:	mov	rax, qword ptr [rbp - 0x80]
0x400504:	mov	edx, 0x31
0x400509:	mov	esi, 0x41
0x40050e:	mov	rdi, rax
0x400511:	call	0x500000
<Block for 0x4004dd, 57 bytes>
0x4004dd:	and	eax, 0xfff
0x4004e2:	sub	rax, 8
0x4004e6:	add	rax, rsp
0x4004e9:	or	qword ptr [rax], 0
0x4004ed:	mov	rax, rsp
0x4004f0:	add	rax, 0xf
0x4004f4:	shr	rax, 4
0x4004f8:	shl	rax, 4
0x4004fc:	mov	qword ptr [rbp - 0x78], rax
0x400500:	mov	rax, qword ptr [rbp - 0x80]
0x400504:	mov	edx, 0x31
0x400509:	mov	esi, 0x41
0x40050e:	mov	rdi, rax
0x400511:	call	0x500000
<Block for 0x4004ac, 5 bytes>
0x4004ac:	cmp	rsp, rdx
0x4004af:	je	0x4004c3
<Block for 0x400516, 33 bytes>
0x400516:	mov	rax, qword ptr [rbp - 0x80]
0x40051a:	add	rax, 0x31
0x40051e:	mov	byte ptr [rax], 0
0x400521:	mov	rax, qword ptr [rbp - 0x78]
0x400525:	mov	edx, 0x63
0x40052a:	mov	esi, 0x41
0x40052f:	mov	rdi, rax
0x400532:	call	0x500000
<Block for 0x400537, 21 bytes>
0x400537:	mov	rax, qword ptr [rbp - 0x78]
0x40053b:	add	rax, 0x63
0x40053f:	mov	byte ptr [rax], 0
0x400542:	mov	eax, 5
0x400547:	cmp	eax, 5
0x40054a:	jne	0x400557
<Block for 0x40054c, 33 bytes>
0x40054c:	mov	rax, qword ptr [rbp - 0x78]
0x400550:	mov	qword ptr [rbp - 0x88], rax
0x400557:	lea	rax, [rbp - 0x70]
0x40055b:	mov	edx, 0x63
0x400560:	mov	esi, 0x43
0x400565:	mov	rdi, rax
0x400568:	call	0x500000
<Block for 0x400557, 22 bytes>
0x400557:	lea	rax, [rbp - 0x70]
0x40055b:	mov	edx, 0x63
0x400560:	mov	esi, 0x43
0x400565:	mov	rdi, rax
0x400568:	call	0x500000
<Block for 0x40056d, 16 bytes>
0x40056d:	mov	byte ptr [rbp - 0xd], 0
0x400571:	lea	rax, [rbp - 0x70]
0x400575:	mov	rdi, rax
0x400578:	call	0x500008
<Block for 0x40057d, 25 bytes>
0x40057d:	mov	rdx, rax
0x400580:	mov	rcx, qword ptr [rbp - 0x88]
0x400587:	lea	rax, [rbp - 0x70]
0x40058b:	mov	rsi, rcx
0x40058e:	mov	rdi, rax
0x400591:	call	0x500010
<Block for 0x400596, 16 bytes>
0x400596:	mov	byte ptr [rbp - 0xd], 0
0x40059a:	lea	rax, [rbp - 0x70]
0x40059e:	mov	rdi, rax
0x4005a1:	call	0x500018
<Block for 0x4005a6, 16 bytes>
0x4005a6:	nop	
0x4005a7:	mov	rax, qword ptr [rbp - 8]
0x4005ab:	xor	rax, qword ptr fs:[0x28]
0x4005b4:	je	0x4005bb
<Block for 0x4005bb, 2 bytes>
0x4005bb:	leave	
0x4005bc:	ret	
<Block for 0x4005b6, 5 bytes>
0x4005b6:	call	0x500020
