<Block for 0x400436, 84 bytes>
0x400436:	endbr64	
0x40043a:	push	rbp
0x40043b:	mov	rbp, rsp
0x40043e:	sub	rsp, 0xa0
0x400445:	mov	rax, qword ptr fs:[0x28]
0x40044e:	mov	qword ptr [rbp - 8], rax
0x400452:	xor	eax, eax
0x400454:	mov	eax, 0x10
0x400459:	sub	rax, 1
0x40045d:	add	rax, 0x3a
0x400461:	mov	ecx, 0x10
0x400466:	mov	edx, 0
0x40046b:	div	rcx
0x40046e:	imul	rax, rax, 0x10
0x400472:	mov	rdx, rax
0x400475:	and	rdx, 0xfffffffffffff000
0x40047c:	mov	rcx, rsp
0x40047f:	sub	rcx, rdx
0x400482:	mov	rdx, rcx
0x400485:	cmp	rsp, rdx
0x400488:	je	0x40049c
<Block for 0x40049c, 26 bytes>
0x40049c:	mov	rdx, rax
0x40049f:	and	edx, 0xfff
0x4004a5:	sub	rsp, rdx
0x4004a8:	mov	rdx, rax
0x4004ab:	and	edx, 0xfff
0x4004b1:	test	rdx, rdx
0x4004b4:	je	0x4004c6
<Block for 0x40048a, 18 bytes>
0x40048a:	sub	rsp, 0x1000
0x400491:	or	qword ptr [rsp + 0xff8], 0
0x40049a:	jmp	0x400485
<Block for 0x4004c6, 76 bytes>
0x4004c6:	mov	rax, rsp
0x4004c9:	add	rax, 0xf
0x4004cd:	shr	rax, 4
0x4004d1:	shl	rax, 4
0x4004d5:	mov	qword ptr [rbp - 0x90], rax
0x4004dc:	mov	eax, 0x10
0x4004e1:	sub	rax, 1
0x4004e5:	add	rax, 0x6c
0x4004e9:	mov	edi, 0x10
0x4004ee:	mov	edx, 0
0x4004f3:	div	rdi
0x4004f6:	imul	rax, rax, 0x10
0x4004fa:	mov	rdx, rax
0x4004fd:	and	rdx, 0xfffffffffffff000
0x400504:	mov	rsi, rsp
0x400507:	sub	rsi, rdx
0x40050a:	mov	rdx, rsi
0x40050d:	cmp	rsp, rdx
0x400510:	je	0x400524
<Block for 0x4004b6, 92 bytes>
0x4004b6:	and	eax, 0xfff
0x4004bb:	sub	rax, 8
0x4004bf:	add	rax, rsp
0x4004c2:	or	qword ptr [rax], 0
0x4004c6:	mov	rax, rsp
0x4004c9:	add	rax, 0xf
0x4004cd:	shr	rax, 4
0x4004d1:	shl	rax, 4
0x4004d5:	mov	qword ptr [rbp - 0x90], rax
0x4004dc:	mov	eax, 0x10
0x4004e1:	sub	rax, 1
0x4004e5:	add	rax, 0x6c
0x4004e9:	mov	edi, 0x10
0x4004ee:	mov	edx, 0
0x4004f3:	div	rdi
0x4004f6:	imul	rax, rax, 0x10
0x4004fa:	mov	rdx, rax
0x4004fd:	and	rdx, 0xfffffffffffff000
0x400504:	mov	rsi, rsp
0x400507:	sub	rsi, rdx
0x40050a:	mov	rdx, rsi
0x40050d:	cmp	rsp, rdx
0x400510:	je	0x400524
<Block for 0x400485, 5 bytes>
0x400485:	cmp	rsp, rdx
0x400488:	je	0x40049c
<Block for 0x400524, 26 bytes>
0x400524:	mov	rdx, rax
0x400527:	and	edx, 0xfff
0x40052d:	sub	rsp, rdx
0x400530:	mov	rdx, rax
0x400533:	and	edx, 0xfff
0x400539:	test	rdx, rdx
0x40053c:	je	0x40054e
<Block for 0x400512, 18 bytes>
0x400512:	sub	rsp, 0x1000
0x400519:	or	qword ptr [rsp + 0xff8], 0
0x400522:	jmp	0x40050d
<Block for 0x40054e, 47 bytes>
0x40054e:	mov	rax, rsp
0x400551:	add	rax, 0xf
0x400555:	shr	rax, 4
0x400559:	shl	rax, 4
0x40055d:	mov	qword ptr [rbp - 0x88], rax
0x400564:	mov	rax, qword ptr [rbp - 0x90]
0x40056b:	mov	edx, 0x31
0x400570:	mov	esi, 0x41
0x400575:	mov	rdi, rax
0x400578:	call	0x500000
<Block for 0x40053e, 63 bytes>
0x40053e:	and	eax, 0xfff
0x400543:	sub	rax, 8
0x400547:	add	rax, rsp
0x40054a:	or	qword ptr [rax], 0
0x40054e:	mov	rax, rsp
0x400551:	add	rax, 0xf
0x400555:	shr	rax, 4
0x400559:	shl	rax, 4
0x40055d:	mov	qword ptr [rbp - 0x88], rax
0x400564:	mov	rax, qword ptr [rbp - 0x90]
0x40056b:	mov	edx, 0x31
0x400570:	mov	esi, 0x41
0x400575:	mov	rdi, rax
0x400578:	call	0x500000
<Block for 0x40050d, 5 bytes>
0x40050d:	cmp	rsp, rdx
0x400510:	je	0x400524
<Block for 0x40057d, 39 bytes>
0x40057d:	mov	rax, qword ptr [rbp - 0x90]
0x400584:	add	rax, 0x31
0x400588:	mov	byte ptr [rax], 0
0x40058b:	mov	rax, qword ptr [rbp - 0x88]
0x400592:	mov	edx, 0x63
0x400597:	mov	esi, 0x41
0x40059c:	mov	rdi, rax
0x40059f:	call	0x500000
<Block for 0x4005a4, 47 bytes>
0x4005a4:	mov	rax, qword ptr [rbp - 0x88]
0x4005ab:	add	rax, 0x63
0x4005af:	mov	byte ptr [rax], 0
0x4005b2:	mov	rax, qword ptr [rbp - 0x88]
0x4005b9:	mov	qword ptr [rbp - 0x80], rax
0x4005bd:	lea	rax, [rbp - 0x70]
0x4005c1:	mov	edx, 0x63
0x4005c6:	mov	esi, 0x43
0x4005cb:	mov	rdi, rax
0x4005ce:	call	0x500000
<Block for 0x4005d3, 16 bytes>
0x4005d3:	mov	byte ptr [rbp - 0xd], 0
0x4005d7:	lea	rax, [rbp - 0x70]
0x4005db:	mov	rdi, rax
0x4005de:	call	0x500008
<Block for 0x4005e3, 17 bytes>
0x4005e3:	mov	qword ptr [rbp - 0x78], rax
0x4005e7:	mov	qword ptr [rbp - 0x98], 0
0x4005f2:	jmp	0x40061d
<Block for 0x40061d, 13 bytes>
0x40061d:	mov	rax, qword ptr [rbp - 0x98]
0x400624:	cmp	rax, qword ptr [rbp - 0x78]
0x400628:	jb	0x4005f4
<Block for 0x4005f4, 54 bytes>
0x4005f4:	mov	rdx, qword ptr [rbp - 0x80]
0x4005f8:	mov	rax, qword ptr [rbp - 0x98]
0x4005ff:	add	rax, rdx
0x400602:	movzx	eax, byte ptr [rax]
0x400605:	lea	rcx, [rbp - 0x70]
0x400609:	mov	rdx, qword ptr [rbp - 0x98]
0x400610:	add	rdx, rcx
0x400613:	mov	byte ptr [rdx], al
0x400615:	add	qword ptr [rbp - 0x98], 1
0x40061d:	mov	rax, qword ptr [rbp - 0x98]
0x400624:	cmp	rax, qword ptr [rbp - 0x78]
0x400628:	jb	0x4005f4
<Block for 0x40062a, 16 bytes>
0x40062a:	mov	byte ptr [rbp - 0xd], 0
0x40062e:	lea	rax, [rbp - 0x70]
0x400632:	mov	rdi, rax
0x400635:	call	0x500010
<Block for 0x40063a, 16 bytes>
0x40063a:	nop	
0x40063b:	mov	rax, qword ptr [rbp - 8]
0x40063f:	xor	rax, qword ptr fs:[0x28]
0x400648:	je	0x40064f
<Block for 0x40064f, 2 bytes>
0x40064f:	leave	
0x400650:	ret	
<Block for 0x40064a, 5 bytes>
0x40064a:	call	0x500018
