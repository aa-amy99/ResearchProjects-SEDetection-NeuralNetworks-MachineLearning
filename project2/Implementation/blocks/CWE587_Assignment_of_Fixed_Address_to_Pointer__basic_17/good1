<Block for 0x40003c, 36 bytes>
0x40003c:	endbr64	
0x400040:	push	rbp
0x400041:	mov	rbp, rsp
0x400044:	sub	rsp, 0x20
0x400048:	mov	rax, qword ptr fs:[0x28]
0x400051:	mov	qword ptr [rbp - 8], rax
0x400055:	xor	eax, eax
0x400057:	mov	dword ptr [rbp - 0x14], 0
0x40005e:	jmp	0x400081
<Block for 0x400081, 6 bytes>
0x400081:	cmp	dword ptr [rbp - 0x14], 0
0x400085:	jle	0x400060
<Block for 0x400060, 29 bytes>
0x400060:	mov	byte ptr [rbp - 0x15], 0x61
0x400064:	lea	rax, [rbp - 0x15]
0x400068:	mov	qword ptr [rbp - 0x10], rax
0x40006c:	mov	rax, qword ptr [rbp - 0x10]
0x400070:	movzx	eax, byte ptr [rax]
0x400073:	movsx	eax, al
0x400076:	mov	edi, eax
0x400078:	call	0x500000
<Block for 0x400087, 16 bytes>
0x400087:	nop	
0x400088:	mov	rax, qword ptr [rbp - 8]
0x40008c:	xor	rax, qword ptr fs:[0x28]
0x400095:	je	0x40009c
<Block for 0x40007d, 10 bytes>
0x40007d:	add	dword ptr [rbp - 0x14], 1
0x400081:	cmp	dword ptr [rbp - 0x14], 0
0x400085:	jle	0x400060
<Block for 0x40009c, 2 bytes>
0x40009c:	leave	
0x40009d:	ret	
<Block for 0x400097, 5 bytes>
0x400097:	call	0x500008
