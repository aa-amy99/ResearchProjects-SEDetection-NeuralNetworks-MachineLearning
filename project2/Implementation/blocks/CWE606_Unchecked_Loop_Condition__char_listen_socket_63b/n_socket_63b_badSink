<Block for 0x400000, 70 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	qword ptr [rbp - 0x28], rdi
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 8], rax
0x40001d:	xor	eax, eax
0x40001f:	mov	rax, qword ptr [rbp - 0x28]
0x400023:	mov	rax, qword ptr [rax]
0x400026:	mov	qword ptr [rbp - 0x10], rax
0x40002a:	lea	rdx, [rbp - 0x1c]
0x40002e:	mov	rax, qword ptr [rbp - 0x10]
0x400032:	lea	rsi, [rip + 0x175]
0x400039:	mov	rdi, rax
0x40003c:	mov	eax, 0
0x400041:	call	0x500000
<Block for 0x400046, 5 bytes>
0x400046:	cmp	eax, 1
0x400049:	jne	0x400075
<Block for 0x40004b, 16 bytes>
0x40004b:	mov	dword ptr [rbp - 0x14], 0
0x400052:	mov	dword ptr [rbp - 0x18], 0
0x400059:	jmp	0x400063
<Block for 0x400075, 16 bytes>
0x400075:	nop	
0x400076:	mov	rax, qword ptr [rbp - 8]
0x40007a:	xor	rax, qword ptr fs:[0x28]
0x400083:	je	0x40008a
<Block for 0x400063, 8 bytes>
0x400063:	mov	eax, dword ptr [rbp - 0x1c]
0x400066:	cmp	dword ptr [rbp - 0x18], eax
0x400069:	jl	0x40005b
<Block for 0x40008a, 2 bytes>
0x40008a:	leave	
0x40008b:	ret	
<Block for 0x400085, 5 bytes>
0x400085:	call	0x500010
<Block for 0x40005b, 16 bytes>
0x40005b:	add	dword ptr [rbp - 0x14], 1
0x40005f:	add	dword ptr [rbp - 0x18], 1
0x400063:	mov	eax, dword ptr [rbp - 0x1c]
0x400066:	cmp	dword ptr [rbp - 0x18], eax
0x400069:	jl	0x40005b
<Block for 0x40006b, 10 bytes>
0x40006b:	mov	eax, dword ptr [rbp - 0x14]
0x40006e:	mov	edi, eax
0x400070:	call	0x500008
