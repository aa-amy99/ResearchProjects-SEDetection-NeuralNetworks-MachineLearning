<Block for 0x400259, 82 bytes>
0x400259:	endbr64	
0x40025d:	push	rbp
0x40025e:	mov	rbp, rsp
0x400261:	sub	rsp, 0x120
0x400268:	mov	rax, qword ptr fs:[0x28]
0x400271:	mov	qword ptr [rbp - 8], rax
0x400275:	xor	eax, eax
0x400277:	movabs	rax, 0x3d48544150
0x400281:	mov	edx, 0
0x400286:	mov	qword ptr [rbp - 0x110], rax
0x40028d:	mov	qword ptr [rbp - 0x108], rdx
0x400294:	lea	rdx, [rbp - 0x100]
0x40029b:	mov	eax, 0
0x4002a0:	mov	ecx, 0x1d
0x4002a5:	mov	rdi, rdx
0x4002a8:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002ab, 33 bytes>
0x4002ab:	mov	rdx, rdi
0x4002ae:	mov	word ptr [rdx], ax
0x4002b1:	add	rdx, 2
0x4002b5:	lea	rax, [rbp - 0x110]
0x4002bc:	mov	qword ptr [rbp - 0x118], rax
0x4002c3:	mov	eax, 1
0x4002c8:	test	eax, eax
0x4002ca:	je	0x400305
<Block for 0x4002a8, 3 bytes>
0x4002a8:	rep stosq	qword ptr [rdi], rax
<Block for 0x400305, 15 bytes>
0x400305:	mov	rax, qword ptr [rbp - 0x118]
0x40030c:	mov	rdi, rax
0x40030f:	call	0x500020
<Block for 0x4002cc, 27 bytes>
0x4002cc:	mov	rax, qword ptr [rbp - 0x118]
0x4002d3:	mov	rcx, -1
0x4002da:	mov	rdx, rax
0x4002dd:	mov	eax, 0
0x4002e2:	mov	rdi, rdx
0x4002e5:	repne scasb	al, byte ptr [rdi]
<Block for 0x400314, 16 bytes>
0x400314:	nop	
0x400315:	mov	rax, qword ptr [rbp - 8]
0x400319:	xor	rax, qword ptr fs:[0x28]
0x400322:	je	0x400329
<Block for 0x4002e7, 45 bytes>
0x4002e7:	mov	rax, rcx
0x4002ea:	not	rax
0x4002ed:	lea	rdx, [rax - 1]
0x4002f1:	mov	rax, qword ptr [rbp - 0x118]
0x4002f8:	add	rax, rdx
0x4002fb:	mov	dword ptr [rax], 0x6e69622f
0x400301:	mov	byte ptr [rax + 4], 0
0x400305:	mov	rax, qword ptr [rbp - 0x118]
0x40030c:	mov	rdi, rax
0x40030f:	call	0x500020
<Block for 0x4002e5, 2 bytes>
0x4002e5:	repne scasb	al, byte ptr [rdi]
<Block for 0x400329, 2 bytes>
0x400329:	leave	
0x40032a:	ret	
<Block for 0x400324, 5 bytes>
0x400324:	call	0x500028
