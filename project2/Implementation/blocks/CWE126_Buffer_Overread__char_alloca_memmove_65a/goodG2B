<Block for 0x40019e, 92 bytes>
0x40019e:	endbr64	
0x4001a2:	push	rbp
0x4001a3:	mov	rbp, rsp
0x4001a6:	sub	rsp, 0x30
0x4001aa:	mov	rax, qword ptr fs:[0x28]
0x4001b3:	mov	qword ptr [rbp - 8], rax
0x4001b7:	xor	eax, eax
0x4001b9:	mov	rax, qword ptr [rip + 0xffe68]
0x4001c0:	mov	qword ptr [rbp - 0x28], rax
0x4001c4:	mov	eax, 0x10
0x4001c9:	sub	rax, 1
0x4001cd:	add	rax, 0x3a
0x4001d1:	mov	ecx, 0x10
0x4001d6:	mov	edx, 0
0x4001db:	div	rcx
0x4001de:	imul	rax, rax, 0x10
0x4001e2:	mov	rdx, rax
0x4001e5:	and	rdx, 0xfffffffffffff000
0x4001ec:	mov	rcx, rsp
0x4001ef:	sub	rcx, rdx
0x4001f2:	mov	rdx, rcx
0x4001f5:	cmp	rsp, rdx
0x4001f8:	je	0x40020c
<Block for 0x40020c, 26 bytes>
0x40020c:	mov	rdx, rax
0x40020f:	and	edx, 0xfff
0x400215:	sub	rsp, rdx
0x400218:	mov	rdx, rax
0x40021b:	and	edx, 0xfff
0x400221:	test	rdx, rdx
0x400224:	je	0x400236
<Block for 0x4001fa, 18 bytes>
0x4001fa:	sub	rsp, 0x1000
0x400201:	or	qword ptr [rsp + 0xff8], 0
0x40020a:	jmp	0x4001f5
<Block for 0x400236, 73 bytes>
0x400236:	mov	rax, rsp
0x400239:	add	rax, 0xf
0x40023d:	shr	rax, 4
0x400241:	shl	rax, 4
0x400245:	mov	qword ptr [rbp - 0x20], rax
0x400249:	mov	eax, 0x10
0x40024e:	sub	rax, 1
0x400252:	add	rax, 0x6c
0x400256:	mov	edi, 0x10
0x40025b:	mov	edx, 0
0x400260:	div	rdi
0x400263:	imul	rax, rax, 0x10
0x400267:	mov	rdx, rax
0x40026a:	and	rdx, 0xfffffffffffff000
0x400271:	mov	rsi, rsp
0x400274:	sub	rsi, rdx
0x400277:	mov	rdx, rsi
0x40027a:	cmp	rsp, rdx
0x40027d:	je	0x400291
<Block for 0x400226, 89 bytes>
0x400226:	and	eax, 0xfff
0x40022b:	sub	rax, 8
0x40022f:	add	rax, rsp
0x400232:	or	qword ptr [rax], 0
0x400236:	mov	rax, rsp
0x400239:	add	rax, 0xf
0x40023d:	shr	rax, 4
0x400241:	shl	rax, 4
0x400245:	mov	qword ptr [rbp - 0x20], rax
0x400249:	mov	eax, 0x10
0x40024e:	sub	rax, 1
0x400252:	add	rax, 0x6c
0x400256:	mov	edi, 0x10
0x40025b:	mov	edx, 0
0x400260:	div	rdi
0x400263:	imul	rax, rax, 0x10
0x400267:	mov	rdx, rax
0x40026a:	and	rdx, 0xfffffffffffff000
0x400271:	mov	rsi, rsp
0x400274:	sub	rsi, rdx
0x400277:	mov	rdx, rsi
0x40027a:	cmp	rsp, rdx
0x40027d:	je	0x400291
<Block for 0x4001f5, 5 bytes>
0x4001f5:	cmp	rsp, rdx
0x4001f8:	je	0x40020c
<Block for 0x400291, 26 bytes>
0x400291:	mov	rdx, rax
0x400294:	and	edx, 0xfff
0x40029a:	sub	rsp, rdx
0x40029d:	mov	rdx, rax
0x4002a0:	and	edx, 0xfff
0x4002a6:	test	rdx, rdx
0x4002a9:	je	0x4002bb
<Block for 0x40027f, 18 bytes>
0x40027f:	sub	rsp, 0x1000
0x400286:	or	qword ptr [rsp + 0xff8], 0
0x40028f:	jmp	0x40027a
<Block for 0x4002bb, 41 bytes>
0x4002bb:	mov	rax, rsp
0x4002be:	add	rax, 0xf
0x4002c2:	shr	rax, 4
0x4002c6:	shl	rax, 4
0x4002ca:	mov	qword ptr [rbp - 0x18], rax
0x4002ce:	mov	rax, qword ptr [rbp - 0x20]
0x4002d2:	mov	edx, 0x31
0x4002d7:	mov	esi, 0x41
0x4002dc:	mov	rdi, rax
0x4002df:	call	0x500010
<Block for 0x4002ab, 57 bytes>
0x4002ab:	and	eax, 0xfff
0x4002b0:	sub	rax, 8
0x4002b4:	add	rax, rsp
0x4002b7:	or	qword ptr [rax], 0
0x4002bb:	mov	rax, rsp
0x4002be:	add	rax, 0xf
0x4002c2:	shr	rax, 4
0x4002c6:	shl	rax, 4
0x4002ca:	mov	qword ptr [rbp - 0x18], rax
0x4002ce:	mov	rax, qword ptr [rbp - 0x20]
0x4002d2:	mov	edx, 0x31
0x4002d7:	mov	esi, 0x41
0x4002dc:	mov	rdi, rax
0x4002df:	call	0x500010
<Block for 0x40027a, 5 bytes>
0x40027a:	cmp	rsp, rdx
0x40027d:	je	0x400291
<Block for 0x4002e4, 33 bytes>
0x4002e4:	mov	rax, qword ptr [rbp - 0x20]
0x4002e8:	add	rax, 0x31
0x4002ec:	mov	byte ptr [rax], 0
0x4002ef:	mov	rax, qword ptr [rbp - 0x18]
0x4002f3:	mov	edx, 0x63
0x4002f8:	mov	esi, 0x41
0x4002fd:	mov	rdi, rax
0x400300:	call	0x500010
<Block for 0x400305, 32 bytes>
0x400305:	mov	rax, qword ptr [rbp - 0x18]
0x400309:	add	rax, 0x63
0x40030d:	mov	byte ptr [rax], 0
0x400310:	mov	rax, qword ptr [rbp - 0x18]
0x400314:	mov	qword ptr [rbp - 0x10], rax
0x400318:	mov	rax, qword ptr [rbp - 0x10]
0x40031c:	mov	rdx, qword ptr [rbp - 0x28]
0x400320:	mov	rdi, rax
0x400323:	call	rdx
<Block for 0x400325, 16 bytes>
0x400325:	nop	
0x400326:	mov	rax, qword ptr [rbp - 8]
0x40032a:	xor	rax, qword ptr fs:[0x28]
0x400333:	je	0x40033a
<Block for 0x40033a, 2 bytes>
0x40033a:	leave	
0x40033b:	ret	
<Block for 0x400335, 5 bytes>
0x400335:	call	0x500018
