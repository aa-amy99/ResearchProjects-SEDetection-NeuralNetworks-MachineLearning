<Block for 0x400233, 84 bytes>
0x400233:	endbr64	
0x400237:	push	rbp
0x400238:	mov	rbp, rsp
0x40023b:	sub	rsp, 0xa0
0x400242:	mov	rax, qword ptr fs:[0x28]
0x40024b:	mov	qword ptr [rbp - 8], rax
0x40024f:	xor	eax, eax
0x400251:	mov	eax, 0x10
0x400256:	sub	rax, 1
0x40025a:	add	rax, 0x3a
0x40025e:	mov	ecx, 0x10
0x400263:	mov	edx, 0
0x400268:	div	rcx
0x40026b:	imul	rax, rax, 0x10
0x40026f:	mov	rdx, rax
0x400272:	and	rdx, 0xfffffffffffff000
0x400279:	mov	rcx, rsp
0x40027c:	sub	rcx, rdx
0x40027f:	mov	rdx, rcx
0x400282:	cmp	rsp, rdx
0x400285:	je	0x400299
<Block for 0x400299, 26 bytes>
0x400299:	mov	rdx, rax
0x40029c:	and	edx, 0xfff
0x4002a2:	sub	rsp, rdx
0x4002a5:	mov	rdx, rax
0x4002a8:	and	edx, 0xfff
0x4002ae:	test	rdx, rdx
0x4002b1:	je	0x4002c3
<Block for 0x400287, 18 bytes>
0x400287:	sub	rsp, 0x1000
0x40028e:	or	qword ptr [rsp + 0xff8], 0
0x400297:	jmp	0x400282
<Block for 0x4002c3, 76 bytes>
0x4002c3:	mov	rax, rsp
0x4002c6:	add	rax, 0xf
0x4002ca:	shr	rax, 4
0x4002ce:	shl	rax, 4
0x4002d2:	mov	qword ptr [rbp - 0x88], rax
0x4002d9:	mov	eax, 0x10
0x4002de:	sub	rax, 1
0x4002e2:	add	rax, 0x6c
0x4002e6:	mov	edi, 0x10
0x4002eb:	mov	edx, 0
0x4002f0:	div	rdi
0x4002f3:	imul	rax, rax, 0x10
0x4002f7:	mov	rdx, rax
0x4002fa:	and	rdx, 0xfffffffffffff000
0x400301:	mov	rsi, rsp
0x400304:	sub	rsi, rdx
0x400307:	mov	rdx, rsi
0x40030a:	cmp	rsp, rdx
0x40030d:	je	0x400321
<Block for 0x4002b3, 92 bytes>
0x4002b3:	and	eax, 0xfff
0x4002b8:	sub	rax, 8
0x4002bc:	add	rax, rsp
0x4002bf:	or	qword ptr [rax], 0
0x4002c3:	mov	rax, rsp
0x4002c6:	add	rax, 0xf
0x4002ca:	shr	rax, 4
0x4002ce:	shl	rax, 4
0x4002d2:	mov	qword ptr [rbp - 0x88], rax
0x4002d9:	mov	eax, 0x10
0x4002de:	sub	rax, 1
0x4002e2:	add	rax, 0x6c
0x4002e6:	mov	edi, 0x10
0x4002eb:	mov	edx, 0
0x4002f0:	div	rdi
0x4002f3:	imul	rax, rax, 0x10
0x4002f7:	mov	rdx, rax
0x4002fa:	and	rdx, 0xfffffffffffff000
0x400301:	mov	rsi, rsp
0x400304:	sub	rsi, rdx
0x400307:	mov	rdx, rsi
0x40030a:	cmp	rsp, rdx
0x40030d:	je	0x400321
<Block for 0x400282, 5 bytes>
0x400282:	cmp	rsp, rdx
0x400285:	je	0x400299
<Block for 0x400321, 26 bytes>
0x400321:	mov	rdx, rax
0x400324:	and	edx, 0xfff
0x40032a:	sub	rsp, rdx
0x40032d:	mov	rdx, rax
0x400330:	and	edx, 0xfff
0x400336:	test	rdx, rdx
0x400339:	je	0x40034b
<Block for 0x40030f, 18 bytes>
0x40030f:	sub	rsp, 0x1000
0x400316:	or	qword ptr [rsp + 0xff8], 0
0x40031f:	jmp	0x40030a
<Block for 0x40034b, 44 bytes>
0x40034b:	mov	rax, rsp
0x40034e:	add	rax, 0xf
0x400352:	shr	rax, 4
0x400356:	shl	rax, 4
0x40035a:	mov	qword ptr [rbp - 0x80], rax
0x40035e:	mov	rax, qword ptr [rbp - 0x88]
0x400365:	mov	edx, 0x31
0x40036a:	mov	esi, 0x41
0x40036f:	mov	rdi, rax
0x400372:	call	0x500000
<Block for 0x40033b, 60 bytes>
0x40033b:	and	eax, 0xfff
0x400340:	sub	rax, 8
0x400344:	add	rax, rsp
0x400347:	or	qword ptr [rax], 0
0x40034b:	mov	rax, rsp
0x40034e:	add	rax, 0xf
0x400352:	shr	rax, 4
0x400356:	shl	rax, 4
0x40035a:	mov	qword ptr [rbp - 0x80], rax
0x40035e:	mov	rax, qword ptr [rbp - 0x88]
0x400365:	mov	edx, 0x31
0x40036a:	mov	esi, 0x41
0x40036f:	mov	rdi, rax
0x400372:	call	0x500000
<Block for 0x40030a, 5 bytes>
0x40030a:	cmp	rsp, rdx
0x40030d:	je	0x400321
<Block for 0x400377, 36 bytes>
0x400377:	mov	rax, qword ptr [rbp - 0x88]
0x40037e:	add	rax, 0x31
0x400382:	mov	byte ptr [rax], 0
0x400385:	mov	rax, qword ptr [rbp - 0x80]
0x400389:	mov	edx, 0x63
0x40038e:	mov	esi, 0x41
0x400393:	mov	rdi, rax
0x400396:	call	0x500000
<Block for 0x40039b, 21 bytes>
0x40039b:	mov	rax, qword ptr [rbp - 0x80]
0x40039f:	add	rax, 0x63
0x4003a3:	mov	byte ptr [rax], 0
0x4003a6:	mov	eax, 0
0x4003ab:	call	0x500008
<Block for 0x4003b0, 4 bytes>
0x4003b0:	test	eax, eax
0x4003b2:	je	0x4003c1
<Block for 0x4003c1, 33 bytes>
0x4003c1:	mov	rax, qword ptr [rbp - 0x80]
0x4003c5:	mov	qword ptr [rbp - 0x98], rax
0x4003cc:	lea	rax, [rbp - 0x70]
0x4003d0:	mov	edx, 0x63
0x4003d5:	mov	esi, 0x43
0x4003da:	mov	rdi, rax
0x4003dd:	call	0x500000
<Block for 0x4003b4, 13 bytes>
0x4003b4:	mov	rax, qword ptr [rbp - 0x80]
0x4003b8:	mov	qword ptr [rbp - 0x98], rax
0x4003bf:	jmp	0x4003cc
<Block for 0x4003e2, 16 bytes>
0x4003e2:	mov	byte ptr [rbp - 0xd], 0
0x4003e6:	lea	rax, [rbp - 0x70]
0x4003ea:	mov	rdi, rax
0x4003ed:	call	0x500010
<Block for 0x4003cc, 22 bytes>
0x4003cc:	lea	rax, [rbp - 0x70]
0x4003d0:	mov	edx, 0x63
0x4003d5:	mov	esi, 0x43
0x4003da:	mov	rdi, rax
0x4003dd:	call	0x500000
<Block for 0x4003f2, 17 bytes>
0x4003f2:	mov	qword ptr [rbp - 0x78], rax
0x4003f6:	mov	qword ptr [rbp - 0x90], 0
0x400401:	jmp	0x40042f
<Block for 0x40042f, 13 bytes>
0x40042f:	mov	rax, qword ptr [rbp - 0x90]
0x400436:	cmp	rax, qword ptr [rbp - 0x78]
0x40043a:	jb	0x400403
<Block for 0x400403, 57 bytes>
0x400403:	mov	rdx, qword ptr [rbp - 0x98]
0x40040a:	mov	rax, qword ptr [rbp - 0x90]
0x400411:	add	rax, rdx
0x400414:	movzx	eax, byte ptr [rax]
0x400417:	lea	rcx, [rbp - 0x70]
0x40041b:	mov	rdx, qword ptr [rbp - 0x90]
0x400422:	add	rdx, rcx
0x400425:	mov	byte ptr [rdx], al
0x400427:	add	qword ptr [rbp - 0x90], 1
0x40042f:	mov	rax, qword ptr [rbp - 0x90]
0x400436:	cmp	rax, qword ptr [rbp - 0x78]
0x40043a:	jb	0x400403
<Block for 0x40043c, 16 bytes>
0x40043c:	mov	byte ptr [rbp - 0xd], 0
0x400440:	lea	rax, [rbp - 0x70]
0x400444:	mov	rdi, rax
0x400447:	call	0x500018
<Block for 0x40044c, 16 bytes>
0x40044c:	nop	
0x40044d:	mov	rax, qword ptr [rbp - 8]
0x400451:	xor	rax, qword ptr fs:[0x28]
0x40045a:	je	0x400461
<Block for 0x400461, 2 bytes>
0x400461:	leave	
0x400462:	ret	
<Block for 0x40045c, 5 bytes>
0x40045c:	call	0x500020
