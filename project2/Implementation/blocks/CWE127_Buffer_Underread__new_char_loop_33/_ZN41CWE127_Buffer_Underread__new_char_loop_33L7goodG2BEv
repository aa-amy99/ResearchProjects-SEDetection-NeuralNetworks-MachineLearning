<Block for 0x400104, 65 bytes>
0x400104:	endbr64	
0x400108:	push	rbp
0x400109:	mov	rbp, rsp
0x40010c:	sub	rsp, 0xa0
0x400113:	mov	rax, qword ptr fs:[0x28]
0x40011c:	mov	qword ptr [rbp - 8], rax
0x400120:	xor	eax, eax
0x400122:	lea	rax, [rbp - 0x98]
0x400129:	mov	qword ptr [rbp - 0x88], rax
0x400130:	mov	qword ptr [rbp - 0x98], 0
0x40013b:	mov	edi, 0x64
0x400140:	call	0x500000
<Block for 0x400145, 26 bytes>
0x400145:	mov	qword ptr [rbp - 0x80], rax
0x400149:	mov	rax, qword ptr [rbp - 0x80]
0x40014d:	mov	edx, 0x63
0x400152:	mov	esi, 0x41
0x400157:	mov	rdi, rax
0x40015a:	call	0x500008
<Block for 0x40015f, 58 bytes>
0x40015f:	mov	rax, qword ptr [rbp - 0x80]
0x400163:	add	rax, 0x63
0x400167:	mov	byte ptr [rax], 0
0x40016a:	mov	rax, qword ptr [rbp - 0x80]
0x40016e:	mov	qword ptr [rbp - 0x98], rax
0x400175:	mov	rax, qword ptr [rbp - 0x88]
0x40017c:	mov	rax, qword ptr [rax]
0x40017f:	mov	qword ptr [rbp - 0x78], rax
0x400183:	lea	rax, [rbp - 0x70]
0x400187:	mov	edx, 0x63
0x40018c:	mov	esi, 0x43
0x400191:	mov	rdi, rax
0x400194:	call	0x500008
<Block for 0x400199, 25 bytes>
0x400199:	mov	byte ptr [rbp - 0xd], 0
0x40019d:	mov	qword ptr [rbp - 0x90], 0
0x4001a8:	cmp	qword ptr [rbp - 0x90], 0x63
0x4001b0:	ja	0x4001dd
<Block for 0x4001b2, 43 bytes>
0x4001b2:	mov	rdx, qword ptr [rbp - 0x78]
0x4001b6:	mov	rax, qword ptr [rbp - 0x90]
0x4001bd:	add	rax, rdx
0x4001c0:	movzx	eax, byte ptr [rax]
0x4001c3:	lea	rcx, [rbp - 0x70]
0x4001c7:	mov	rdx, qword ptr [rbp - 0x90]
0x4001ce:	add	rdx, rcx
0x4001d1:	mov	byte ptr [rdx], al
0x4001d3:	add	qword ptr [rbp - 0x90], 1
0x4001db:	jmp	0x4001a8
<Block for 0x4001dd, 16 bytes>
0x4001dd:	mov	byte ptr [rbp - 0xd], 0
0x4001e1:	lea	rax, [rbp - 0x70]
0x4001e5:	mov	rdi, rax
0x4001e8:	call	0x500010
<Block for 0x4001a8, 10 bytes>
0x4001a8:	cmp	qword ptr [rbp - 0x90], 0x63
0x4001b0:	ja	0x4001dd
<Block for 0x4001ed, 16 bytes>
0x4001ed:	nop	
0x4001ee:	mov	rax, qword ptr [rbp - 8]
0x4001f2:	xor	rax, qword ptr fs:[0x28]
0x4001fb:	je	0x400202
<Block for 0x400202, 2 bytes>
0x400202:	leave	
0x400203:	ret	
<Block for 0x4001fd, 5 bytes>
0x4001fd:	call	0x500018
