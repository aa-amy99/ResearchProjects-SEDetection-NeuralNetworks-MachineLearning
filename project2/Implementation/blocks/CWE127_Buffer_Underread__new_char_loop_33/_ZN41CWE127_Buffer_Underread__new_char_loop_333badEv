<Block for 0x400000, 65 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xa0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0x98]
0x400025:	mov	qword ptr [rbp - 0x88], rax
0x40002c:	mov	qword ptr [rbp - 0x98], 0
0x400037:	mov	edi, 0x64
0x40003c:	call	0x500000
<Block for 0x400041, 26 bytes>
0x400041:	mov	qword ptr [rbp - 0x80], rax
0x400045:	mov	rax, qword ptr [rbp - 0x80]
0x400049:	mov	edx, 0x63
0x40004e:	mov	esi, 0x41
0x400053:	mov	rdi, rax
0x400056:	call	0x500008
<Block for 0x40005b, 62 bytes>
0x40005b:	mov	rax, qword ptr [rbp - 0x80]
0x40005f:	add	rax, 0x63
0x400063:	mov	byte ptr [rax], 0
0x400066:	mov	rax, qword ptr [rbp - 0x80]
0x40006a:	sub	rax, 8
0x40006e:	mov	qword ptr [rbp - 0x98], rax
0x400075:	mov	rax, qword ptr [rbp - 0x88]
0x40007c:	mov	rax, qword ptr [rax]
0x40007f:	mov	qword ptr [rbp - 0x78], rax
0x400083:	lea	rax, [rbp - 0x70]
0x400087:	mov	edx, 0x63
0x40008c:	mov	esi, 0x43
0x400091:	mov	rdi, rax
0x400094:	call	0x500008
<Block for 0x400099, 25 bytes>
0x400099:	mov	byte ptr [rbp - 0xd], 0
0x40009d:	mov	qword ptr [rbp - 0x90], 0
0x4000a8:	cmp	qword ptr [rbp - 0x90], 0x63
0x4000b0:	ja	0x4000dd
<Block for 0x4000b2, 43 bytes>
0x4000b2:	mov	rdx, qword ptr [rbp - 0x78]
0x4000b6:	mov	rax, qword ptr [rbp - 0x90]
0x4000bd:	add	rax, rdx
0x4000c0:	movzx	eax, byte ptr [rax]
0x4000c3:	lea	rcx, [rbp - 0x70]
0x4000c7:	mov	rdx, qword ptr [rbp - 0x90]
0x4000ce:	add	rdx, rcx
0x4000d1:	mov	byte ptr [rdx], al
0x4000d3:	add	qword ptr [rbp - 0x90], 1
0x4000db:	jmp	0x4000a8
<Block for 0x4000dd, 16 bytes>
0x4000dd:	mov	byte ptr [rbp - 0xd], 0
0x4000e1:	lea	rax, [rbp - 0x70]
0x4000e5:	mov	rdi, rax
0x4000e8:	call	0x500010
<Block for 0x4000a8, 10 bytes>
0x4000a8:	cmp	qword ptr [rbp - 0x90], 0x63
0x4000b0:	ja	0x4000dd
<Block for 0x4000ed, 16 bytes>
0x4000ed:	nop	
0x4000ee:	mov	rax, qword ptr [rbp - 8]
0x4000f2:	xor	rax, qword ptr fs:[0x28]
0x4000fb:	je	0x400102
<Block for 0x400102, 2 bytes>
0x400102:	leave	
0x400103:	ret	
<Block for 0x4000fd, 5 bytes>
0x4000fd:	call	0x500018
