<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x80], 0
0x400023:	mov	eax, 0
0x400028:	call	0x500000
<Block for 0x40002d, 4 bytes>
0x40002d:	test	eax, eax
0x40002f:	je	0x40007d
<Block for 0x40007d, 22 bytes>
0x40007d:	lea	rax, [rbp - 0x70]
0x400081:	mov	edx, 0x63
0x400086:	mov	esi, 0x43
0x40008b:	mov	rdi, rax
0x40008e:	call	0x500018
<Block for 0x400031, 10 bytes>
0x400031:	mov	edi, 0x64
0x400036:	call	0x500008
<Block for 0x400093, 23 bytes>
0x400093:	mov	byte ptr [rbp - 0xd], 0
0x400097:	lea	rdx, [rbp - 0x70]
0x40009b:	mov	rax, qword ptr [rbp - 0x80]
0x40009f:	mov	rsi, rdx
0x4000a2:	mov	rdi, rax
0x4000a5:	call	0x500020
<Block for 0x40003b, 11 bytes>
0x40003b:	mov	qword ptr [rbp - 0x78], rax
0x40003f:	cmp	qword ptr [rbp - 0x78], 0
0x400044:	jne	0x400050
<Block for 0x4000aa, 12 bytes>
0x4000aa:	mov	rax, qword ptr [rbp - 0x80]
0x4000ae:	mov	rdi, rax
0x4000b1:	call	0x500028
<Block for 0x400046, 10 bytes>
0x400046:	mov	edi, 0xffffffff
0x40004b:	call	0x500010
<Block for 0x400050, 22 bytes>
0x400050:	mov	rax, qword ptr [rbp - 0x78]
0x400054:	mov	edx, 0x63
0x400059:	mov	esi, 0x41
0x40005e:	mov	rdi, rax
0x400061:	call	0x500018
<Block for 0x4000b6, 16 bytes>
0x4000b6:	nop	
0x4000b7:	mov	rax, qword ptr [rbp - 8]
0x4000bb:	xor	rax, qword ptr fs:[0x28]
0x4000c4:	je	0x4000cb
<Block for 0x400066, 45 bytes>
0x400066:	mov	rax, qword ptr [rbp - 0x78]
0x40006a:	add	rax, 0x63
0x40006e:	mov	byte ptr [rax], 0
0x400071:	mov	rax, qword ptr [rbp - 0x78]
0x400075:	sub	rax, 8
0x400079:	mov	qword ptr [rbp - 0x80], rax
0x40007d:	lea	rax, [rbp - 0x70]
0x400081:	mov	edx, 0x63
0x400086:	mov	esi, 0x43
0x40008b:	mov	rdi, rax
0x40008e:	call	0x500018
<Block for 0x4000cb, 2 bytes>
0x4000cb:	leave	
0x4000cc:	ret	
<Block for 0x4000c6, 5 bytes>
0x4000c6:	call	0x500030
