<Block for 0x4000cd, 45 bytes>
0x4000cd:	endbr64	
0x4000d1:	push	rbp
0x4000d2:	mov	rbp, rsp
0x4000d5:	add	rsp, -0x80
0x4000d9:	mov	rax, qword ptr fs:[0x28]
0x4000e2:	mov	qword ptr [rbp - 8], rax
0x4000e6:	xor	eax, eax
0x4000e8:	mov	qword ptr [rbp - 0x80], 0
0x4000f0:	mov	eax, 0
0x4000f5:	call	0x500038
<Block for 0x4000fa, 4 bytes>
0x4000fa:	test	eax, eax
0x4000fc:	je	0x40010c
<Block for 0x40010c, 10 bytes>
0x40010c:	mov	edi, 0x64
0x400111:	call	0x500008
<Block for 0x4000fe, 12 bytes>
0x4000fe:	lea	rdi, [rip + 0x187]
0x400105:	call	0x500028
<Block for 0x400116, 11 bytes>
0x400116:	mov	qword ptr [rbp - 0x78], rax
0x40011a:	cmp	qword ptr [rbp - 0x78], 0
0x40011f:	jne	0x40012b
<Block for 0x40010a, 2 bytes>
0x40010a:	jmp	0x400154
<Block for 0x400121, 10 bytes>
0x400121:	mov	edi, 0xffffffff
0x400126:	call	0x500010
<Block for 0x40012b, 22 bytes>
0x40012b:	mov	rax, qword ptr [rbp - 0x78]
0x40012f:	mov	edx, 0x63
0x400134:	mov	esi, 0x41
0x400139:	mov	rdi, rax
0x40013c:	call	0x500018
<Block for 0x400154, 22 bytes>
0x400154:	lea	rax, [rbp - 0x70]
0x400158:	mov	edx, 0x63
0x40015d:	mov	esi, 0x43
0x400162:	mov	rdi, rax
0x400165:	call	0x500018
<Block for 0x400141, 41 bytes>
0x400141:	mov	rax, qword ptr [rbp - 0x78]
0x400145:	add	rax, 0x63
0x400149:	mov	byte ptr [rax], 0
0x40014c:	mov	rax, qword ptr [rbp - 0x78]
0x400150:	mov	qword ptr [rbp - 0x80], rax
0x400154:	lea	rax, [rbp - 0x70]
0x400158:	mov	edx, 0x63
0x40015d:	mov	esi, 0x43
0x400162:	mov	rdi, rax
0x400165:	call	0x500018
<Block for 0x40016a, 23 bytes>
0x40016a:	mov	byte ptr [rbp - 0xd], 0
0x40016e:	lea	rdx, [rbp - 0x70]
0x400172:	mov	rax, qword ptr [rbp - 0x80]
0x400176:	mov	rsi, rdx
0x400179:	mov	rdi, rax
0x40017c:	call	0x500020
<Block for 0x400181, 12 bytes>
0x400181:	mov	rax, qword ptr [rbp - 0x80]
0x400185:	mov	rdi, rax
0x400188:	call	0x500028
<Block for 0x40018d, 16 bytes>
0x40018d:	nop	
0x40018e:	mov	rax, qword ptr [rbp - 8]
0x400192:	xor	rax, qword ptr fs:[0x28]
0x40019b:	je	0x4001a2
<Block for 0x4001a2, 2 bytes>
0x4001a2:	leave	
0x4001a3:	ret	
<Block for 0x40019d, 5 bytes>
0x40019d:	call	0x500030
