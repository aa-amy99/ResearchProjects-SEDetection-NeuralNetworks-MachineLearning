<Block for 0x4002d6, 66 bytes>
0x4002d6:	endbr64	
0x4002da:	push	rbp
0x4002db:	mov	rbp, rsp
0x4002de:	sub	rsp, 0x20
0x4002e2:	mov	rax, qword ptr fs:[0x28]
0x4002eb:	mov	qword ptr [rbp - 8], rax
0x4002ef:	xor	eax, eax
0x4002f1:	mov	rax, qword ptr [rip + 0x430]
0x4002f8:	mov	qword ptr [rbp - 0x10], rax
0x4002fc:	lea	rdx, [rbp - 0x1c]
0x400300:	mov	rax, qword ptr [rbp - 0x10]
0x400304:	lea	rsi, [rip + 0x42d]
0x40030b:	mov	rdi, rax
0x40030e:	mov	eax, 0
0x400313:	call	0x500000
<Block for 0x400318, 5 bytes>
0x400318:	cmp	eax, 1
0x40031b:	jne	0x400347
<Block for 0x40031d, 16 bytes>
0x40031d:	mov	dword ptr [rbp - 0x14], 0
0x400324:	mov	dword ptr [rbp - 0x18], 0
0x40032b:	jmp	0x400335
<Block for 0x400347, 16 bytes>
0x400347:	nop	
0x400348:	mov	rax, qword ptr [rbp - 8]
0x40034c:	xor	rax, qword ptr fs:[0x28]
0x400355:	je	0x40035c
<Block for 0x400335, 8 bytes>
0x400335:	mov	eax, dword ptr [rbp - 0x1c]
0x400338:	cmp	dword ptr [rbp - 0x18], eax
0x40033b:	jl	0x40032d
<Block for 0x40035c, 2 bytes>
0x40035c:	leave	
0x40035d:	ret	
<Block for 0x400357, 5 bytes>
0x400357:	call	0x500010
<Block for 0x40032d, 16 bytes>
0x40032d:	add	dword ptr [rbp - 0x14], 1
0x400331:	add	dword ptr [rbp - 0x18], 1
0x400335:	mov	eax, dword ptr [rbp - 0x1c]
0x400338:	cmp	dword ptr [rbp - 0x18], eax
0x40033b:	jl	0x40032d
<Block for 0x40033d, 10 bytes>
0x40033d:	mov	eax, dword ptr [rbp - 0x14]
0x400340:	mov	edi, eax
0x400342:	call	0x500008
