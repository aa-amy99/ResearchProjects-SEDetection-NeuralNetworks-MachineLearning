<Block for 0x4000db, 56 bytes>
0x4000db:	endbr64	
0x4000df:	push	rbp
0x4000e0:	mov	rbp, rsp
0x4000e3:	sub	rsp, 0x90
0x4000ea:	mov	rax, qword ptr fs:[0x28]
0x4000f3:	mov	qword ptr [rbp - 8], rax
0x4000f7:	xor	eax, eax
0x4000f9:	mov	qword ptr [rbp - 0x88], 0
0x400104:	lea	rax, [rbp - 0x88]
0x40010b:	mov	rdi, rax
0x40010e:	call	0x500030
<Block for 0x400113, 22 bytes>
0x400113:	lea	rax, [rbp - 0x70]
0x400117:	mov	edx, 0x63
0x40011c:	mov	esi, 0x43
0x400121:	mov	rdi, rax
0x400124:	call	0x500008
<Block for 0x400129, 16 bytes>
0x400129:	mov	byte ptr [rbp - 0xd], 0
0x40012d:	lea	rax, [rbp - 0x70]
0x400131:	mov	rdi, rax
0x400134:	call	0x500010
<Block for 0x400139, 22 bytes>
0x400139:	mov	qword ptr [rbp - 0x78], rax
0x40013d:	mov	qword ptr [rbp - 0x80], 0
0x400145:	mov	rax, qword ptr [rbp - 0x80]
0x400149:	cmp	rax, qword ptr [rbp - 0x78]
0x40014d:	jae	0x400174
<Block for 0x40014f, 37 bytes>
0x40014f:	mov	rdx, qword ptr [rbp - 0x88]
0x400156:	mov	rax, qword ptr [rbp - 0x80]
0x40015a:	add	rax, rdx
0x40015d:	movzx	eax, byte ptr [rax]
0x400160:	lea	rcx, [rbp - 0x70]
0x400164:	mov	rdx, qword ptr [rbp - 0x80]
0x400168:	add	rdx, rcx
0x40016b:	mov	byte ptr [rdx], al
0x40016d:	add	qword ptr [rbp - 0x80], 1
0x400172:	jmp	0x400145
<Block for 0x400174, 16 bytes>
0x400174:	mov	byte ptr [rbp - 0xd], 0
0x400178:	lea	rax, [rbp - 0x70]
0x40017c:	mov	rdi, rax
0x40017f:	call	0x500018
<Block for 0x400145, 10 bytes>
0x400145:	mov	rax, qword ptr [rbp - 0x80]
0x400149:	cmp	rax, qword ptr [rbp - 0x78]
0x40014d:	jae	0x400174
<Block for 0x400184, 12 bytes>
0x400184:	mov	rax, qword ptr [rbp - 0x88]
0x40018b:	test	rax, rax
0x40018e:	je	0x40019f
<Block for 0x40019f, 16 bytes>
0x40019f:	nop	
0x4001a0:	mov	rax, qword ptr [rbp - 8]
0x4001a4:	xor	rax, qword ptr fs:[0x28]
0x4001ad:	je	0x4001b4
<Block for 0x400190, 15 bytes>
0x400190:	mov	rax, qword ptr [rbp - 0x88]
0x400197:	mov	rdi, rax
0x40019a:	call	0x500020
<Block for 0x4001b4, 2 bytes>
0x4001b4:	leave	
0x4001b5:	ret	
<Block for 0x4001af, 5 bytes>
0x4001af:	call	0x500028
