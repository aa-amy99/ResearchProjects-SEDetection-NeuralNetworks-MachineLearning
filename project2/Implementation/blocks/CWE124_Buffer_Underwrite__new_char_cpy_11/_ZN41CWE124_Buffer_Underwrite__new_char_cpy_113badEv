<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x80], 0
0x400023:	call	0x500000
<Block for 0x400028, 9 bytes>
0x400028:	test	eax, eax
0x40002a:	setne	al
0x40002d:	test	al, al
0x40002f:	je	0x40006c
<Block for 0x40006c, 22 bytes>
0x40006c:	lea	rax, [rbp - 0x70]
0x400070:	mov	edx, 0x63
0x400075:	mov	esi, 0x43
0x40007a:	mov	rdi, rax
0x40007d:	call	0x500010
<Block for 0x400031, 10 bytes>
0x400031:	mov	edi, 0x64
0x400036:	call	0x500008
<Block for 0x400082, 23 bytes>
0x400082:	mov	byte ptr [rbp - 0xd], 0
0x400086:	lea	rdx, [rbp - 0x70]
0x40008a:	mov	rax, qword ptr [rbp - 0x80]
0x40008e:	mov	rsi, rdx
0x400091:	mov	rdi, rax
0x400094:	call	0x500018
<Block for 0x40003b, 26 bytes>
0x40003b:	mov	qword ptr [rbp - 0x78], rax
0x40003f:	mov	rax, qword ptr [rbp - 0x78]
0x400043:	mov	edx, 0x63
0x400048:	mov	esi, 0x41
0x40004d:	mov	rdi, rax
0x400050:	call	0x500010
<Block for 0x400099, 12 bytes>
0x400099:	mov	rax, qword ptr [rbp - 0x80]
0x40009d:	mov	rdi, rax
0x4000a0:	call	0x500020
<Block for 0x400055, 45 bytes>
0x400055:	mov	rax, qword ptr [rbp - 0x78]
0x400059:	add	rax, 0x63
0x40005d:	mov	byte ptr [rax], 0
0x400060:	mov	rax, qword ptr [rbp - 0x78]
0x400064:	sub	rax, 8
0x400068:	mov	qword ptr [rbp - 0x80], rax
0x40006c:	lea	rax, [rbp - 0x70]
0x400070:	mov	edx, 0x63
0x400075:	mov	esi, 0x43
0x40007a:	mov	rdi, rax
0x40007d:	call	0x500010
<Block for 0x4000a5, 16 bytes>
0x4000a5:	nop	
0x4000a6:	mov	rax, qword ptr [rbp - 8]
0x4000aa:	xor	rax, qword ptr fs:[0x28]
0x4000b3:	je	0x4000ba
<Block for 0x4000ba, 2 bytes>
0x4000ba:	leave	
0x4000bb:	ret	
<Block for 0x4000b5, 5 bytes>
0x4000b5:	call	0x500028
