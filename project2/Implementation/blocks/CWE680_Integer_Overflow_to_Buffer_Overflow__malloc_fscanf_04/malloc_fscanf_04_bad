<Block for 0x400000, 43 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0x1c], 0xffffffff
0x400022:	mov	eax, 1
0x400027:	test	eax, eax
0x400029:	je	0x40004a
<Block for 0x40004a, 17 bytes>
0x40004a:	mov	eax, dword ptr [rbp - 0x1c]
0x40004d:	cdqe	
0x40004f:	shl	rax, 2
0x400053:	mov	rdi, rax
0x400056:	call	0x500010
<Block for 0x40002b, 31 bytes>
0x40002b:	mov	rax, qword ptr [rip + 0xfffce]
0x400032:	lea	rdx, [rbp - 0x1c]
0x400036:	lea	rsi, [rip + 0x1fb]
0x40003d:	mov	rdi, rax
0x400040:	mov	eax, 0
0x400045:	call	0x500008
<Block for 0x40005b, 11 bytes>
0x40005b:	mov	qword ptr [rbp - 0x10], rax
0x40005f:	cmp	qword ptr [rbp - 0x10], 0
0x400064:	jne	0x400070
<Block for 0x400066, 10 bytes>
0x400066:	mov	edi, 0xffffffff
0x40006b:	call	0x500018
<Block for 0x400070, 10 bytes>
0x400070:	mov	qword ptr [rbp - 0x18], 0
0x400078:	jmp	0x400098
<Block for 0x400098, 11 bytes>
0x400098:	mov	eax, dword ptr [rbp - 0x1c]
0x40009b:	cdqe	
0x40009d:	cmp	qword ptr [rbp - 0x18], rax
0x4000a1:	jb	0x40007a
<Block for 0x40007a, 41 bytes>
0x40007a:	mov	rax, qword ptr [rbp - 0x18]
0x40007e:	lea	rdx, [rax*4]
0x400086:	mov	rax, qword ptr [rbp - 0x10]
0x40008a:	add	rax, rdx
0x40008d:	mov	dword ptr [rax], 0
0x400093:	add	qword ptr [rbp - 0x18], 1
0x400098:	mov	eax, dword ptr [rbp - 0x1c]
0x40009b:	cdqe	
0x40009d:	cmp	qword ptr [rbp - 0x18], rax
0x4000a1:	jb	0x40007a
<Block for 0x4000a3, 13 bytes>
0x4000a3:	mov	rax, qword ptr [rbp - 0x10]
0x4000a7:	mov	eax, dword ptr [rax]
0x4000a9:	mov	edi, eax
0x4000ab:	call	0x500020
<Block for 0x4000b0, 12 bytes>
0x4000b0:	mov	rax, qword ptr [rbp - 0x10]
0x4000b4:	mov	rdi, rax
0x4000b7:	call	0x500028
<Block for 0x4000bc, 16 bytes>
0x4000bc:	nop	
0x4000bd:	mov	rax, qword ptr [rbp - 8]
0x4000c1:	xor	rax, qword ptr fs:[0x28]
0x4000ca:	je	0x4000d1
<Block for 0x4000d1, 2 bytes>
0x4000d1:	leave	
0x4000d2:	ret	
<Block for 0x4000cc, 5 bytes>
0x4000cc:	call	0x500030
