<Block for 0x40006b, 38 bytes>
0x40006b:	endbr64	
0x40006f:	push	rbp
0x400070:	mov	rbp, rsp
0x400073:	add	rsp, -0x80
0x400077:	mov	rax, qword ptr fs:[0x28]
0x400080:	mov	qword ptr [rbp - 8], rax
0x400084:	xor	eax, eax
0x400086:	mov	eax, dword ptr [rip + 0xfff74]
0x40008c:	cmp	eax, 5
0x40008f:	je	0x40009f
<Block for 0x40009f, 34 bytes>
0x40009f:	mov	dword ptr [rbp - 0x74], 5
0x4000a6:	mov	edx, dword ptr [rbp - 0x74]
0x4000a9:	lea	rax, [rbp - 0x70]
0x4000ad:	lea	rsi, [rip + 0xd2]
0x4000b4:	mov	rdi, rax
0x4000b7:	mov	eax, 0
0x4000bc:	call	0x500008
<Block for 0x400091, 12 bytes>
0x400091:	lea	rdi, [rip + 0xd9]
0x400098:	call	0x500010
<Block for 0x4000c1, 12 bytes>
0x4000c1:	lea	rax, [rbp - 0x70]
0x4000c5:	mov	rdi, rax
0x4000c8:	call	0x500010
<Block for 0x40009d, 2 bytes>
0x40009d:	jmp	0x4000cd
<Block for 0x4000cd, 16 bytes>
0x4000cd:	nop	
0x4000ce:	mov	rax, qword ptr [rbp - 8]
0x4000d2:	xor	rax, qword ptr fs:[0x28]
0x4000db:	je	0x4000e2
<Block for 0x4000e2, 2 bytes>
0x4000e2:	leave	
0x4000e3:	ret	
<Block for 0x4000dd, 5 bytes>
0x4000dd:	call	0x500018
