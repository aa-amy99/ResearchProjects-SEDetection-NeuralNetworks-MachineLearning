<Block for 0x400220, 84 bytes>
0x400220:	endbr64	
0x400224:	push	rbp
0x400225:	mov	rbp, rsp
0x400228:	sub	rsp, 0xa0
0x40022f:	mov	rax, qword ptr fs:[0x28]
0x400238:	mov	qword ptr [rbp - 8], rax
0x40023c:	xor	eax, eax
0x40023e:	mov	eax, 0x10
0x400243:	sub	rax, 1
0x400247:	add	rax, 0x3a
0x40024b:	mov	ecx, 0x10
0x400250:	mov	edx, 0
0x400255:	div	rcx
0x400258:	imul	rax, rax, 0x10
0x40025c:	mov	rdx, rax
0x40025f:	and	rdx, 0xfffffffffffff000
0x400266:	mov	rcx, rsp
0x400269:	sub	rcx, rdx
0x40026c:	mov	rdx, rcx
0x40026f:	cmp	rsp, rdx
0x400272:	je	0x400286
<Block for 0x400286, 26 bytes>
0x400286:	mov	rdx, rax
0x400289:	and	edx, 0xfff
0x40028f:	sub	rsp, rdx
0x400292:	mov	rdx, rax
0x400295:	and	edx, 0xfff
0x40029b:	test	rdx, rdx
0x40029e:	je	0x4002b0
<Block for 0x400274, 18 bytes>
0x400274:	sub	rsp, 0x1000
0x40027b:	or	qword ptr [rsp + 0xff8], 0
0x400284:	jmp	0x40026f
<Block for 0x4002b0, 76 bytes>
0x4002b0:	mov	rax, rsp
0x4002b3:	add	rax, 0xf
0x4002b7:	shr	rax, 4
0x4002bb:	shl	rax, 4
0x4002bf:	mov	qword ptr [rbp - 0x90], rax
0x4002c6:	mov	eax, 0x10
0x4002cb:	sub	rax, 1
0x4002cf:	add	rax, 0x6c
0x4002d3:	mov	edi, 0x10
0x4002d8:	mov	edx, 0
0x4002dd:	div	rdi
0x4002e0:	imul	rax, rax, 0x10
0x4002e4:	mov	rdx, rax
0x4002e7:	and	rdx, 0xfffffffffffff000
0x4002ee:	mov	rsi, rsp
0x4002f1:	sub	rsi, rdx
0x4002f4:	mov	rdx, rsi
0x4002f7:	cmp	rsp, rdx
0x4002fa:	je	0x40030e
<Block for 0x4002a0, 92 bytes>
0x4002a0:	and	eax, 0xfff
0x4002a5:	sub	rax, 8
0x4002a9:	add	rax, rsp
0x4002ac:	or	qword ptr [rax], 0
0x4002b0:	mov	rax, rsp
0x4002b3:	add	rax, 0xf
0x4002b7:	shr	rax, 4
0x4002bb:	shl	rax, 4
0x4002bf:	mov	qword ptr [rbp - 0x90], rax
0x4002c6:	mov	eax, 0x10
0x4002cb:	sub	rax, 1
0x4002cf:	add	rax, 0x6c
0x4002d3:	mov	edi, 0x10
0x4002d8:	mov	edx, 0
0x4002dd:	div	rdi
0x4002e0:	imul	rax, rax, 0x10
0x4002e4:	mov	rdx, rax
0x4002e7:	and	rdx, 0xfffffffffffff000
0x4002ee:	mov	rsi, rsp
0x4002f1:	sub	rsi, rdx
0x4002f4:	mov	rdx, rsi
0x4002f7:	cmp	rsp, rdx
0x4002fa:	je	0x40030e
<Block for 0x40026f, 5 bytes>
0x40026f:	cmp	rsp, rdx
0x400272:	je	0x400286
<Block for 0x40030e, 26 bytes>
0x40030e:	mov	rdx, rax
0x400311:	and	edx, 0xfff
0x400317:	sub	rsp, rdx
0x40031a:	mov	rdx, rax
0x40031d:	and	edx, 0xfff
0x400323:	test	rdx, rdx
0x400326:	je	0x400338
<Block for 0x4002fc, 18 bytes>
0x4002fc:	sub	rsp, 0x1000
0x400303:	or	qword ptr [rsp + 0xff8], 0
0x40030c:	jmp	0x4002f7
<Block for 0x400338, 47 bytes>
0x400338:	mov	rax, rsp
0x40033b:	add	rax, 0xf
0x40033f:	shr	rax, 4
0x400343:	shl	rax, 4
0x400347:	mov	qword ptr [rbp - 0x88], rax
0x40034e:	mov	rax, qword ptr [rbp - 0x90]
0x400355:	mov	edx, 0x31
0x40035a:	mov	esi, 0x41
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x400328, 63 bytes>
0x400328:	and	eax, 0xfff
0x40032d:	sub	rax, 8
0x400331:	add	rax, rsp
0x400334:	or	qword ptr [rax], 0
0x400338:	mov	rax, rsp
0x40033b:	add	rax, 0xf
0x40033f:	shr	rax, 4
0x400343:	shl	rax, 4
0x400347:	mov	qword ptr [rbp - 0x88], rax
0x40034e:	mov	rax, qword ptr [rbp - 0x90]
0x400355:	mov	edx, 0x31
0x40035a:	mov	esi, 0x41
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x4002f7, 5 bytes>
0x4002f7:	cmp	rsp, rdx
0x4002fa:	je	0x40030e
<Block for 0x400367, 39 bytes>
0x400367:	mov	rax, qword ptr [rbp - 0x90]
0x40036e:	add	rax, 0x31
0x400372:	mov	byte ptr [rax], 0
0x400375:	mov	rax, qword ptr [rbp - 0x88]
0x40037c:	mov	edx, 0x63
0x400381:	mov	esi, 0x41
0x400386:	mov	rdi, rax
0x400389:	call	0x500000
<Block for 0x40038e, 52 bytes>
0x40038e:	mov	rax, qword ptr [rbp - 0x88]
0x400395:	add	rax, 0x63
0x400399:	mov	byte ptr [rax], 0
0x40039c:	nop	
0x40039d:	endbr64	
0x4003a1:	mov	rax, qword ptr [rbp - 0x88]
0x4003a8:	mov	qword ptr [rbp - 0x80], rax
0x4003ac:	lea	rax, [rbp - 0x70]
0x4003b0:	mov	edx, 0x63
0x4003b5:	mov	esi, 0x43
0x4003ba:	mov	rdi, rax
0x4003bd:	call	0x500000
<Block for 0x4003c2, 16 bytes>
0x4003c2:	mov	byte ptr [rbp - 0xd], 0
0x4003c6:	lea	rax, [rbp - 0x70]
0x4003ca:	mov	rdi, rax
0x4003cd:	call	0x500008
<Block for 0x4003d2, 17 bytes>
0x4003d2:	mov	qword ptr [rbp - 0x78], rax
0x4003d6:	mov	qword ptr [rbp - 0x98], 0
0x4003e1:	jmp	0x40040c
<Block for 0x40040c, 13 bytes>
0x40040c:	mov	rax, qword ptr [rbp - 0x98]
0x400413:	cmp	rax, qword ptr [rbp - 0x78]
0x400417:	jb	0x4003e3
<Block for 0x4003e3, 54 bytes>
0x4003e3:	mov	rdx, qword ptr [rbp - 0x80]
0x4003e7:	mov	rax, qword ptr [rbp - 0x98]
0x4003ee:	add	rax, rdx
0x4003f1:	movzx	eax, byte ptr [rax]
0x4003f4:	lea	rcx, [rbp - 0x70]
0x4003f8:	mov	rdx, qword ptr [rbp - 0x98]
0x4003ff:	add	rdx, rcx
0x400402:	mov	byte ptr [rdx], al
0x400404:	add	qword ptr [rbp - 0x98], 1
0x40040c:	mov	rax, qword ptr [rbp - 0x98]
0x400413:	cmp	rax, qword ptr [rbp - 0x78]
0x400417:	jb	0x4003e3
<Block for 0x400419, 16 bytes>
0x400419:	mov	byte ptr [rbp - 0xd], 0
0x40041d:	lea	rax, [rbp - 0x70]
0x400421:	mov	rdi, rax
0x400424:	call	0x500010
<Block for 0x400429, 16 bytes>
0x400429:	nop	
0x40042a:	mov	rax, qword ptr [rbp - 8]
0x40042e:	xor	rax, qword ptr fs:[0x28]
0x400437:	je	0x40043e
<Block for 0x40043e, 2 bytes>
0x40043e:	leave	
0x40043f:	ret	
<Block for 0x400439, 5 bytes>
0x400439:	call	0x500018
