<Block for 0x4003e5, 46 bytes>
0x4003e5:	endbr64	
0x4003e9:	push	rbp
0x4003ea:	mov	rbp, rsp
0x4003ed:	push	rbx
0x4003ee:	sub	rsp, 0xd8
0x4003f5:	mov	rax, qword ptr fs:[0x28]
0x4003fe:	mov	qword ptr [rbp - 0x18], rax
0x400402:	xor	eax, eax
0x400404:	lea	rax, [rbp - 0xc0]
0x40040b:	mov	rdi, rax
0x40040e:	call	0x400710
<Block for 0x400413, 129 bytes>
0x400413:	mov	qword ptr [rbp - 0x80], 0
0x40041b:	mov	qword ptr [rbp - 0x78], 0
0x400423:	mov	qword ptr [rbp - 0x70], 0
0x40042b:	mov	qword ptr [rbp - 0x68], 0
0x400433:	mov	qword ptr [rbp - 0x60], 0
0x40043b:	mov	qword ptr [rbp - 0x58], 0
0x400443:	mov	qword ptr [rbp - 0x50], 0
0x40044b:	mov	qword ptr [rbp - 0x48], 0
0x400453:	mov	qword ptr [rbp - 0x40], 0
0x40045b:	mov	qword ptr [rbp - 0x38], 0
0x400463:	mov	qword ptr [rbp - 0x30], 0
0x40046b:	mov	qword ptr [rbp - 0x28], 0
0x400473:	mov	dword ptr [rbp - 0x20], 0
0x40047a:	lea	rax, [rbp - 0x80]
0x40047e:	mov	qword ptr [rbp - 0xd8], rax
0x400485:	mov	rax, qword ptr [rbp - 0xd8]
0x40048c:	mov	rdi, rax
0x40048f:	call	0x500000
<Block for 0x400494, 29 bytes>
0x400494:	mov	qword ptr [rbp - 0xd0], rax
0x40049b:	mov	eax, 0x64
0x4004a0:	sub	rax, qword ptr [rbp - 0xd0]
0x4004a7:	cmp	rax, 1
0x4004ab:	jbe	0x400544
<Block for 0x400544, 25 bytes>
0x400544:	lea	rdx, [rbp - 0xd8]
0x40054b:	lea	rax, [rbp - 0xc0]
0x400552:	mov	rsi, rdx
0x400555:	mov	rdi, rax
0x400558:	call	0x400820
<Block for 0x4004b1, 19 bytes>
0x4004b1:	lea	rsi, [rip + 0x1a3]
0x4004b8:	lea	rdi, [rip + 0x19e]
0x4004bf:	call	0x500008
<Block for 0x40055d, 25 bytes>
0x40055d:	lea	rdx, [rbp - 0xd8]
0x400564:	lea	rax, [rbp - 0xc0]
0x40056b:	mov	rsi, rdx
0x40056e:	mov	rdi, rax
0x400571:	call	0x400820
<Block for 0x4004c4, 17 bytes>
0x4004c4:	mov	qword ptr [rbp - 0xc8], rax
0x4004cb:	cmp	qword ptr [rbp - 0xc8], 0
0x4004d3:	je	0x400544
<Block for 0x400576, 25 bytes>
0x400576:	lea	rdx, [rbp - 0xd8]
0x40057d:	lea	rax, [rbp - 0xc0]
0x400584:	mov	rsi, rdx
0x400587:	mov	rdi, rax
0x40058a:	call	0x400820
<Block for 0x4004d5, 54 bytes>
0x4004d5:	mov	rax, qword ptr [rbp - 0xd0]
0x4004dc:	mov	edx, 0x64
0x4004e1:	sub	edx, eax
0x4004e3:	mov	eax, edx
0x4004e5:	mov	esi, eax
0x4004e7:	mov	rdx, qword ptr [rbp - 0xd8]
0x4004ee:	mov	rax, qword ptr [rbp - 0xd0]
0x4004f5:	lea	rcx, [rdx + rax]
0x4004f9:	mov	rax, qword ptr [rbp - 0xc8]
0x400500:	mov	rdx, rax
0x400503:	mov	rdi, rcx
0x400506:	call	0x500010
<Block for 0x40058f, 25 bytes>
0x40058f:	lea	rdx, [rbp - 0xc0]
0x400596:	lea	rax, [rbp - 0xa0]
0x40059d:	mov	rsi, rdx
0x4005a0:	mov	rdi, rax
0x4005a3:	call	0x40085a
<Block for 0x40050b, 10 bytes>
0x40050b:	test	rax, rax
0x40050e:	sete	al
0x400511:	test	al, al
0x400513:	je	0x400535
<Block for 0x4005a8, 15 bytes>
0x4005a8:	lea	rax, [rbp - 0xa0]
0x4005af:	mov	rdi, rax
0x4005b2:	call	0x500048
<Block for 0x400535, 15 bytes>
0x400535:	mov	rax, qword ptr [rbp - 0xc8]
0x40053c:	mov	rdi, rax
0x40053f:	call	0x500020
<Block for 0x400515, 12 bytes>
0x400515:	lea	rdi, [rip + 0x14f]
0x40051c:	call	0x500018
<Block for 0x4005b7, 15 bytes>
0x4005b7:	lea	rax, [rbp - 0xa0]
0x4005be:	mov	rdi, rax
0x4005c1:	call	0x400730
<Block for 0x400521, 35 bytes>
0x400521:	mov	rdx, qword ptr [rbp - 0xd8]
0x400528:	mov	rax, qword ptr [rbp - 0xd0]
0x40052f:	add	rax, rdx
0x400532:	mov	byte ptr [rax], 0
0x400535:	mov	rax, qword ptr [rbp - 0xc8]
0x40053c:	mov	rdi, rax
0x40053f:	call	0x500020
<Block for 0x4005c6, 15 bytes>
0x4005c6:	lea	rax, [rbp - 0xc0]
0x4005cd:	mov	rdi, rax
0x4005d0:	call	0x400730
<Block for 0x4005d5, 16 bytes>
0x4005d5:	nop	
0x4005d6:	mov	rax, qword ptr [rbp - 0x18]
0x4005da:	xor	rax, qword ptr fs:[0x28]
0x4005e3:	je	0x400625
<Block for 0x400625, 10 bytes>
0x400625:	add	rsp, 0xd8
0x40062c:	pop	rbx
0x40062d:	pop	rbp
0x40062e:	ret	
<Block for 0x4005e5, 2 bytes>
0x4005e5:	jmp	0x400620
<Block for 0x400620, 5 bytes>
0x400620:	call	0x500038
