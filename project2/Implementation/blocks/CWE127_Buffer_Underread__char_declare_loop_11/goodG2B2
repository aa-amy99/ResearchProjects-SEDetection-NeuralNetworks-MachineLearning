<Block for 0x4001c8, 55 bytes>
0x4001c8:	endbr64	
0x4001cc:	push	rbp
0x4001cd:	mov	rbp, rsp
0x4001d0:	sub	rsp, 0xf0
0x4001d7:	mov	rax, qword ptr fs:[0x28]
0x4001e0:	mov	qword ptr [rbp - 8], rax
0x4001e4:	xor	eax, eax
0x4001e6:	lea	rax, [rbp - 0xe0]
0x4001ed:	mov	edx, 0x63
0x4001f2:	mov	esi, 0x41
0x4001f7:	mov	rdi, rax
0x4001fa:	call	0x500000
<Block for 0x4001ff, 14 bytes>
0x4001ff:	mov	byte ptr [rbp - 0x7d], 0
0x400203:	mov	eax, 0
0x400208:	call	0x500008
<Block for 0x40020d, 4 bytes>
0x40020d:	test	eax, eax
0x40020f:	je	0x40021f
<Block for 0x40021f, 22 bytes>
0x40021f:	lea	rax, [rbp - 0x70]
0x400223:	mov	edx, 0x63
0x400228:	mov	esi, 0x43
0x40022d:	mov	rdi, rax
0x400230:	call	0x500000
<Block for 0x400211, 36 bytes>
0x400211:	lea	rax, [rbp - 0xe0]
0x400218:	mov	qword ptr [rbp - 0xf0], rax
0x40021f:	lea	rax, [rbp - 0x70]
0x400223:	mov	edx, 0x63
0x400228:	mov	esi, 0x43
0x40022d:	mov	rdi, rax
0x400230:	call	0x500000
<Block for 0x400235, 17 bytes>
0x400235:	mov	byte ptr [rbp - 0xd], 0
0x400239:	mov	qword ptr [rbp - 0xe8], 0
0x400244:	jmp	0x400272
<Block for 0x400272, 10 bytes>
0x400272:	cmp	qword ptr [rbp - 0xe8], 0x63
0x40027a:	jbe	0x400246
<Block for 0x400246, 54 bytes>
0x400246:	mov	rdx, qword ptr [rbp - 0xf0]
0x40024d:	mov	rax, qword ptr [rbp - 0xe8]
0x400254:	add	rax, rdx
0x400257:	movzx	eax, byte ptr [rax]
0x40025a:	lea	rcx, [rbp - 0x70]
0x40025e:	mov	rdx, qword ptr [rbp - 0xe8]
0x400265:	add	rdx, rcx
0x400268:	mov	byte ptr [rdx], al
0x40026a:	add	qword ptr [rbp - 0xe8], 1
0x400272:	cmp	qword ptr [rbp - 0xe8], 0x63
0x40027a:	jbe	0x400246
<Block for 0x40027c, 16 bytes>
0x40027c:	mov	byte ptr [rbp - 0xd], 0
0x400280:	lea	rax, [rbp - 0x70]
0x400284:	mov	rdi, rax
0x400287:	call	0x500010
<Block for 0x40028c, 16 bytes>
0x40028c:	nop	
0x40028d:	mov	rax, qword ptr [rbp - 8]
0x400291:	xor	rax, qword ptr fs:[0x28]
0x40029a:	je	0x4002a1
<Block for 0x4002a1, 2 bytes>
0x4002a1:	leave	
0x4002a2:	ret	
<Block for 0x40029c, 5 bytes>
0x40029c:	call	0x500018
