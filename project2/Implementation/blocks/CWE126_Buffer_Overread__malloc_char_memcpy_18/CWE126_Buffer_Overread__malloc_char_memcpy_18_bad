<Block for 0x400000, 50 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x78], 0
0x400023:	nop	
0x400024:	endbr64	
0x400028:	mov	edi, 0x32
0x40002d:	call	0x500000
<Block for 0x400032, 11 bytes>
0x400032:	mov	qword ptr [rbp - 0x78], rax
0x400036:	cmp	qword ptr [rbp - 0x78], 0
0x40003b:	jne	0x400047
<Block for 0x40003d, 10 bytes>
0x40003d:	mov	edi, 0xffffffff
0x400042:	call	0x500008
<Block for 0x400047, 22 bytes>
0x400047:	mov	rax, qword ptr [rbp - 0x78]
0x40004b:	mov	edx, 0x31
0x400050:	mov	esi, 0x41
0x400055:	mov	rdi, rax
0x400058:	call	0x500010
<Block for 0x40005d, 33 bytes>
0x40005d:	mov	rax, qword ptr [rbp - 0x78]
0x400061:	add	rax, 0x31
0x400065:	mov	byte ptr [rax], 0
0x400068:	lea	rax, [rbp - 0x70]
0x40006c:	mov	edx, 0x63
0x400071:	mov	esi, 0x43
0x400076:	mov	rdi, rax
0x400079:	call	0x500010
<Block for 0x40007e, 16 bytes>
0x40007e:	mov	byte ptr [rbp - 0xd], 0
0x400082:	lea	rax, [rbp - 0x70]
0x400086:	mov	rdi, rax
0x400089:	call	0x500018
<Block for 0x40008e, 22 bytes>
0x40008e:	mov	rdx, rax
0x400091:	mov	rcx, qword ptr [rbp - 0x78]
0x400095:	lea	rax, [rbp - 0x70]
0x400099:	mov	rsi, rcx
0x40009c:	mov	rdi, rax
0x40009f:	call	0x500020
<Block for 0x4000a4, 16 bytes>
0x4000a4:	mov	byte ptr [rbp - 0xd], 0
0x4000a8:	lea	rax, [rbp - 0x70]
0x4000ac:	mov	rdi, rax
0x4000af:	call	0x500028
<Block for 0x4000b4, 12 bytes>
0x4000b4:	mov	rax, qword ptr [rbp - 0x78]
0x4000b8:	mov	rdi, rax
0x4000bb:	call	0x500030
<Block for 0x4000c0, 16 bytes>
0x4000c0:	nop	
0x4000c1:	mov	rax, qword ptr [rbp - 8]
0x4000c5:	xor	rax, qword ptr fs:[0x28]
0x4000ce:	je	0x4000d5
<Block for 0x4000d5, 2 bytes>
0x4000d5:	leave	
0x4000d6:	ret	
<Block for 0x4000d0, 5 bytes>
0x4000d0:	call	0x500038
