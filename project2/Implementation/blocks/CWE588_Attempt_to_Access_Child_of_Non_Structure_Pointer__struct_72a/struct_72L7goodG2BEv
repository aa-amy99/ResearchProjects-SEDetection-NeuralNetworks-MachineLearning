<Block for 0x40018a, 40 bytes>
0x40018a:	endbr64	
0x40018e:	push	rbp
0x40018f:	mov	rbp, rsp
0x400192:	push	rbx
0x400193:	sub	rsp, 0x68
0x400197:	mov	rax, qword ptr fs:[0x28]
0x4001a0:	mov	qword ptr [rbp - 0x18], rax
0x4001a4:	xor	eax, eax
0x4001a6:	lea	rax, [rbp - 0x50]
0x4001aa:	mov	rdi, rax
0x4001ad:	call	0x400392
<Block for 0x4001b2, 41 bytes>
0x4001b2:	mov	dword ptr [rbp - 0x6c], 0x64
0x4001b9:	mov	dword ptr [rbp - 0x58], 0
0x4001c0:	mov	dword ptr [rbp - 0x54], 0
0x4001c7:	lea	rax, [rbp - 0x58]
0x4001cb:	mov	qword ptr [rbp - 0x68], rax
0x4001cf:	lea	rax, [rbp - 0x50]
0x4001d3:	mov	rdi, rax
0x4001d6:	call	0x400526
<Block for 0x4001db, 23 bytes>
0x4001db:	mov	qword ptr [rbp - 0x60], rax
0x4001df:	lea	rdx, [rbp - 0x60]
0x4001e3:	lea	rax, [rbp - 0x30]
0x4001e7:	mov	rsi, rdx
0x4001ea:	mov	rdi, rax
0x4001ed:	call	0x400576
<Block for 0x4001f2, 28 bytes>
0x4001f2:	lea	rdx, [rbp - 0x68]
0x4001f6:	mov	rsi, qword ptr [rbp - 0x30]
0x4001fa:	lea	rax, [rbp - 0x50]
0x4001fe:	mov	rcx, rdx
0x400201:	mov	edx, 1
0x400206:	mov	rdi, rax
0x400209:	call	0x4005a4
<Block for 0x40020e, 12 bytes>
0x40020e:	lea	rax, [rbp - 0x50]
0x400212:	mov	rdi, rax
0x400215:	call	0x400526
<Block for 0x40021a, 23 bytes>
0x40021a:	mov	qword ptr [rbp - 0x60], rax
0x40021e:	lea	rdx, [rbp - 0x60]
0x400222:	lea	rax, [rbp - 0x30]
0x400226:	mov	rsi, rdx
0x400229:	mov	rdi, rax
0x40022c:	call	0x400576
<Block for 0x400231, 28 bytes>
0x400231:	lea	rdx, [rbp - 0x68]
0x400235:	mov	rsi, qword ptr [rbp - 0x30]
0x400239:	lea	rax, [rbp - 0x50]
0x40023d:	mov	rcx, rdx
0x400240:	mov	edx, 1
0x400245:	mov	rdi, rax
0x400248:	call	0x4005a4
<Block for 0x40024d, 12 bytes>
0x40024d:	lea	rax, [rbp - 0x50]
0x400251:	mov	rdi, rax
0x400254:	call	0x400526
<Block for 0x400259, 23 bytes>
0x400259:	mov	qword ptr [rbp - 0x60], rax
0x40025d:	lea	rdx, [rbp - 0x60]
0x400261:	lea	rax, [rbp - 0x30]
0x400265:	mov	rsi, rdx
0x400268:	mov	rdi, rax
0x40026b:	call	0x400576
<Block for 0x400270, 28 bytes>
0x400270:	lea	rdx, [rbp - 0x68]
0x400274:	mov	rsi, qword ptr [rbp - 0x30]
0x400278:	lea	rax, [rbp - 0x50]
0x40027c:	mov	rcx, rdx
0x40027f:	mov	edx, 1
0x400284:	mov	rdi, rax
0x400287:	call	0x4005a4
<Block for 0x40028c, 19 bytes>
0x40028c:	lea	rdx, [rbp - 0x50]
0x400290:	lea	rax, [rbp - 0x30]
0x400294:	mov	rsi, rdx
0x400297:	mov	rdi, rax
0x40029a:	call	0x40066a
<Block for 0x40029f, 12 bytes>
0x40029f:	lea	rax, [rbp - 0x30]
0x4002a3:	mov	rdi, rax
0x4002a6:	call	0x500018
<Block for 0x4002ab, 12 bytes>
0x4002ab:	lea	rax, [rbp - 0x30]
0x4002af:	mov	rdi, rax
0x4002b2:	call	0x4004de
<Block for 0x4002b7, 12 bytes>
0x4002b7:	lea	rax, [rbp - 0x50]
0x4002bb:	mov	rdi, rax
0x4002be:	call	0x4004de
<Block for 0x4002c3, 16 bytes>
0x4002c3:	nop	
0x4002c4:	mov	rax, qword ptr [rbp - 0x18]
0x4002c8:	xor	rax, qword ptr fs:[0x28]
0x4002d1:	je	0x40030d
<Block for 0x40030d, 7 bytes>
0x40030d:	add	rsp, 0x68
0x400311:	pop	rbx
0x400312:	pop	rbp
0x400313:	ret	
<Block for 0x4002d3, 2 bytes>
0x4002d3:	jmp	0x400308
<Block for 0x400308, 5 bytes>
0x400308:	call	0x500010
