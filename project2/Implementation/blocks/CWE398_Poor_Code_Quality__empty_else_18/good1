<Block for 0x400068, 22 bytes>
0x400068:	endbr64	
0x40006c:	push	rbp
0x40006d:	mov	rbp, rsp
0x400070:	sub	rsp, 0x10
0x400074:	nop	
0x400075:	endbr64	
0x400079:	call	0x500000
<Block for 0x40007e, 55 bytes>
0x40007e:	mov	edx, eax
0x400080:	movsxd	rax, edx
0x400083:	imul	rax, rax, 0x55555556
0x40008a:	shr	rax, 0x20
0x40008e:	mov	rcx, rax
0x400091:	mov	eax, edx
0x400093:	sar	eax, 0x1f
0x400096:	mov	esi, ecx
0x400098:	sub	esi, eax
0x40009a:	mov	eax, esi
0x40009c:	mov	dword ptr [rbp - 4], eax
0x40009f:	mov	ecx, dword ptr [rbp - 4]
0x4000a2:	mov	eax, ecx
0x4000a4:	add	eax, eax
0x4000a6:	add	eax, ecx
0x4000a8:	sub	edx, eax
0x4000aa:	mov	eax, edx
0x4000ac:	mov	dword ptr [rbp - 4], eax
0x4000af:	cmp	dword ptr [rbp - 4], 0
0x4000b3:	jne	0x4000c3
<Block for 0x4000b5, 12 bytes>
0x4000b5:	lea	rdi, [rip + 0x62]
0x4000bc:	call	0x500008
<Block for 0x4000c3, 12 bytes>
0x4000c3:	lea	rdi, [rip + 0x29]
0x4000ca:	call	0x500008
<Block for 0x4000c1, 2 bytes>
0x4000c1:	jmp	0x4000cf
<Block for 0x4000cf, 12 bytes>
0x4000cf:	lea	rdi, [rip + 0x60]
0x4000d6:	call	0x500008
<Block for 0x4000db, 3 bytes>
0x4000db:	nop	
0x4000dc:	leave	
0x4000dd:	ret	
