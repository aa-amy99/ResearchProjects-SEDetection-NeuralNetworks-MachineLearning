<Block for 0x400000, 43 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0xc], 0xffffffff
0x400022:	mov	eax, 1
0x400027:	test	eax, eax
0x400029:	je	0x40004a
<Block for 0x40004a, 8 bytes>
0x40004a:	mov	eax, dword ptr [rbp - 0xc]
0x40004d:	cmp	eax, 5
0x400050:	jg	0x400071
<Block for 0x40002b, 31 bytes>
0x40002b:	mov	rax, qword ptr [rip + 0xfffce]
0x400032:	lea	rdx, [rbp - 0xc]
0x400036:	lea	rsi, [rip + 0x12b]
0x40003d:	mov	rdi, rax
0x400040:	mov	eax, 0
0x400045:	call	0x500008
<Block for 0x400052, 31 bytes>
0x400052:	lea	rcx, [rip + 0x187]
0x400059:	mov	edx, 0x2b
0x40005e:	lea	rsi, [rip + 0x10b]
0x400065:	lea	rdi, [rip + 0x12c]
0x40006c:	call	0x500010
<Block for 0x400071, 16 bytes>
0x400071:	nop	
0x400072:	mov	rax, qword ptr [rbp - 8]
0x400076:	xor	rax, qword ptr fs:[0x28]
0x40007f:	je	0x400086
<Block for 0x400086, 2 bytes>
0x400086:	leave	
0x400087:	ret	
<Block for 0x400081, 5 bytes>
0x400081:	call	0x500018
