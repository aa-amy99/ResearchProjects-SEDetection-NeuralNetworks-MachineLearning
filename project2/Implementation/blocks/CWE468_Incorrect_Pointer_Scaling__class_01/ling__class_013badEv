<Block for 0x400000, 47 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r12
0x40000a:	push	rbx
0x40000b:	sub	rsp, 0x30
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 0x18], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0x30]
0x400022:	mov	ebx, 4
0x400027:	mov	r12, rax
0x40002a:	test	rbx, rbx
0x40002d:	js	0x400041
<Block for 0x400041, 25 bytes>
0x400041:	lea	rax, [rbp - 0x30]
0x400045:	mov	qword ptr [rbp - 0x38], rax
0x400049:	mov	rax, qword ptr [rbp - 0x38]
0x40004d:	add	rax, 0x30
0x400051:	mov	eax, dword ptr [rax]
0x400053:	mov	edi, eax
0x400055:	call	0x500000
<Block for 0x40002f, 8 bytes>
0x40002f:	mov	rdi, r12
0x400032:	call	0x400100
<Block for 0x40005a, 16 bytes>
0x40005a:	nop	
0x40005b:	mov	rax, qword ptr [rbp - 0x18]
0x40005f:	xor	rax, qword ptr fs:[0x28]
0x400068:	je	0x40006f
<Block for 0x400037, 10 bytes>
0x400037:	add	r12, 4
0x40003b:	sub	rbx, 1
0x40003f:	jmp	0x40002a
<Block for 0x40006f, 9 bytes>
0x40006f:	add	rsp, 0x30
0x400073:	pop	rbx
0x400074:	pop	r12
0x400076:	pop	rbp
0x400077:	ret	
<Block for 0x40006a, 5 bytes>
0x40006a:	call	0x500008
<Block for 0x40002a, 5 bytes>
0x40002a:	test	rbx, rbx
0x40002d:	js	0x400041
