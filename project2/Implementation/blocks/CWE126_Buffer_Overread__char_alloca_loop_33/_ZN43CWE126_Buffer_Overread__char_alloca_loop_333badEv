<Block for 0x400000, 98 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xb0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xa8]
0x400025:	mov	qword ptr [rbp - 0x98], rax
0x40002c:	mov	eax, 0x10
0x400031:	sub	rax, 1
0x400035:	add	rax, 0x3a
0x400039:	mov	ecx, 0x10
0x40003e:	mov	edx, 0
0x400043:	div	rcx
0x400046:	imul	rax, rax, 0x10
0x40004a:	mov	rdx, rax
0x40004d:	and	rdx, 0xfffffffffffff000
0x400054:	mov	rcx, rsp
0x400057:	sub	rcx, rdx
0x40005a:	mov	rdx, rcx
0x40005d:	cmp	rsp, rdx
0x400060:	je	0x400074
<Block for 0x400074, 26 bytes>
0x400074:	mov	rdx, rax
0x400077:	and	edx, 0xfff
0x40007d:	sub	rsp, rdx
0x400080:	mov	rdx, rax
0x400083:	and	edx, 0xfff
0x400089:	test	rdx, rdx
0x40008c:	je	0x40009e
<Block for 0x400062, 18 bytes>
0x400062:	sub	rsp, 0x1000
0x400069:	or	qword ptr [rsp + 0xff8], 0
0x400072:	jmp	0x40005d
<Block for 0x40009e, 76 bytes>
0x40009e:	mov	rax, rsp
0x4000a1:	add	rax, 0xf
0x4000a5:	shr	rax, 4
0x4000a9:	shl	rax, 4
0x4000ad:	mov	qword ptr [rbp - 0x90], rax
0x4000b4:	mov	eax, 0x10
0x4000b9:	sub	rax, 1
0x4000bd:	add	rax, 0x6c
0x4000c1:	mov	edi, 0x10
0x4000c6:	mov	edx, 0
0x4000cb:	div	rdi
0x4000ce:	imul	rax, rax, 0x10
0x4000d2:	mov	rdx, rax
0x4000d5:	and	rdx, 0xfffffffffffff000
0x4000dc:	mov	rsi, rsp
0x4000df:	sub	rsi, rdx
0x4000e2:	mov	rdx, rsi
0x4000e5:	cmp	rsp, rdx
0x4000e8:	je	0x4000fc
<Block for 0x40008e, 92 bytes>
0x40008e:	and	eax, 0xfff
0x400093:	sub	rax, 8
0x400097:	add	rax, rsp
0x40009a:	or	qword ptr [rax], 0
0x40009e:	mov	rax, rsp
0x4000a1:	add	rax, 0xf
0x4000a5:	shr	rax, 4
0x4000a9:	shl	rax, 4
0x4000ad:	mov	qword ptr [rbp - 0x90], rax
0x4000b4:	mov	eax, 0x10
0x4000b9:	sub	rax, 1
0x4000bd:	add	rax, 0x6c
0x4000c1:	mov	edi, 0x10
0x4000c6:	mov	edx, 0
0x4000cb:	div	rdi
0x4000ce:	imul	rax, rax, 0x10
0x4000d2:	mov	rdx, rax
0x4000d5:	and	rdx, 0xfffffffffffff000
0x4000dc:	mov	rsi, rsp
0x4000df:	sub	rsi, rdx
0x4000e2:	mov	rdx, rsi
0x4000e5:	cmp	rsp, rdx
0x4000e8:	je	0x4000fc
<Block for 0x40005d, 5 bytes>
0x40005d:	cmp	rsp, rdx
0x400060:	je	0x400074
<Block for 0x4000fc, 26 bytes>
0x4000fc:	mov	rdx, rax
0x4000ff:	and	edx, 0xfff
0x400105:	sub	rsp, rdx
0x400108:	mov	rdx, rax
0x40010b:	and	edx, 0xfff
0x400111:	test	rdx, rdx
0x400114:	je	0x400126
<Block for 0x4000ea, 18 bytes>
0x4000ea:	sub	rsp, 0x1000
0x4000f1:	or	qword ptr [rsp + 0xff8], 0
0x4000fa:	jmp	0x4000e5
<Block for 0x400126, 47 bytes>
0x400126:	mov	rax, rsp
0x400129:	add	rax, 0xf
0x40012d:	shr	rax, 4
0x400131:	shl	rax, 4
0x400135:	mov	qword ptr [rbp - 0x88], rax
0x40013c:	mov	rax, qword ptr [rbp - 0x90]
0x400143:	mov	edx, 0x31
0x400148:	mov	esi, 0x41
0x40014d:	mov	rdi, rax
0x400150:	call	0x500000
<Block for 0x400116, 63 bytes>
0x400116:	and	eax, 0xfff
0x40011b:	sub	rax, 8
0x40011f:	add	rax, rsp
0x400122:	or	qword ptr [rax], 0
0x400126:	mov	rax, rsp
0x400129:	add	rax, 0xf
0x40012d:	shr	rax, 4
0x400131:	shl	rax, 4
0x400135:	mov	qword ptr [rbp - 0x88], rax
0x40013c:	mov	rax, qword ptr [rbp - 0x90]
0x400143:	mov	edx, 0x31
0x400148:	mov	esi, 0x41
0x40014d:	mov	rdi, rax
0x400150:	call	0x500000
<Block for 0x4000e5, 5 bytes>
0x4000e5:	cmp	rsp, rdx
0x4000e8:	je	0x4000fc
<Block for 0x400155, 39 bytes>
0x400155:	mov	rax, qword ptr [rbp - 0x90]
0x40015c:	add	rax, 0x31
0x400160:	mov	byte ptr [rax], 0
0x400163:	mov	rax, qword ptr [rbp - 0x88]
0x40016a:	mov	edx, 0x63
0x40016f:	mov	esi, 0x41
0x400174:	mov	rdi, rax
0x400177:	call	0x500000
<Block for 0x40017c, 64 bytes>
0x40017c:	mov	rax, qword ptr [rbp - 0x88]
0x400183:	add	rax, 0x63
0x400187:	mov	byte ptr [rax], 0
0x40018a:	mov	rax, qword ptr [rbp - 0x90]
0x400191:	mov	qword ptr [rbp - 0xa8], rax
0x400198:	mov	rax, qword ptr [rbp - 0x98]
0x40019f:	mov	rax, qword ptr [rax]
0x4001a2:	mov	qword ptr [rbp - 0x80], rax
0x4001a6:	lea	rax, [rbp - 0x70]
0x4001aa:	mov	edx, 0x63
0x4001af:	mov	esi, 0x43
0x4001b4:	mov	rdi, rax
0x4001b7:	call	0x500000
<Block for 0x4001bc, 16 bytes>
0x4001bc:	mov	byte ptr [rbp - 0xd], 0
0x4001c0:	lea	rax, [rbp - 0x70]
0x4001c4:	mov	rdi, rax
0x4001c7:	call	0x500008
<Block for 0x4001cc, 28 bytes>
0x4001cc:	mov	qword ptr [rbp - 0x78], rax
0x4001d0:	mov	qword ptr [rbp - 0xa0], 0
0x4001db:	mov	rax, qword ptr [rbp - 0xa0]
0x4001e2:	cmp	rax, qword ptr [rbp - 0x78]
0x4001e6:	jae	0x400213
<Block for 0x4001e8, 43 bytes>
0x4001e8:	mov	rdx, qword ptr [rbp - 0x80]
0x4001ec:	mov	rax, qword ptr [rbp - 0xa0]
0x4001f3:	add	rax, rdx
0x4001f6:	movzx	eax, byte ptr [rax]
0x4001f9:	lea	rcx, [rbp - 0x70]
0x4001fd:	mov	rdx, qword ptr [rbp - 0xa0]
0x400204:	add	rdx, rcx
0x400207:	mov	byte ptr [rdx], al
0x400209:	add	qword ptr [rbp - 0xa0], 1
0x400211:	jmp	0x4001db
<Block for 0x400213, 16 bytes>
0x400213:	mov	byte ptr [rbp - 0xd], 0
0x400217:	lea	rax, [rbp - 0x70]
0x40021b:	mov	rdi, rax
0x40021e:	call	0x500010
<Block for 0x4001db, 13 bytes>
0x4001db:	mov	rax, qword ptr [rbp - 0xa0]
0x4001e2:	cmp	rax, qword ptr [rbp - 0x78]
0x4001e6:	jae	0x400213
<Block for 0x400223, 16 bytes>
0x400223:	nop	
0x400224:	mov	rax, qword ptr [rbp - 8]
0x400228:	xor	rax, qword ptr fs:[0x28]
0x400231:	je	0x400238
<Block for 0x400238, 2 bytes>
0x400238:	leave	
0x400239:	ret	
<Block for 0x400233, 5 bytes>
0x400233:	call	0x500018
