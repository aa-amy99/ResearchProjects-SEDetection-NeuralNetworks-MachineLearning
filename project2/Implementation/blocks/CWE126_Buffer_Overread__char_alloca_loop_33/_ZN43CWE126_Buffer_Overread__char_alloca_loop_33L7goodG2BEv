<Block for 0x40023a, 98 bytes>
0x40023a:	endbr64	
0x40023e:	push	rbp
0x40023f:	mov	rbp, rsp
0x400242:	sub	rsp, 0xb0
0x400249:	mov	rax, qword ptr fs:[0x28]
0x400252:	mov	qword ptr [rbp - 8], rax
0x400256:	xor	eax, eax
0x400258:	lea	rax, [rbp - 0xa8]
0x40025f:	mov	qword ptr [rbp - 0x98], rax
0x400266:	mov	eax, 0x10
0x40026b:	sub	rax, 1
0x40026f:	add	rax, 0x3a
0x400273:	mov	ecx, 0x10
0x400278:	mov	edx, 0
0x40027d:	div	rcx
0x400280:	imul	rax, rax, 0x10
0x400284:	mov	rdx, rax
0x400287:	and	rdx, 0xfffffffffffff000
0x40028e:	mov	rcx, rsp
0x400291:	sub	rcx, rdx
0x400294:	mov	rdx, rcx
0x400297:	cmp	rsp, rdx
0x40029a:	je	0x4002ae
<Block for 0x4002ae, 26 bytes>
0x4002ae:	mov	rdx, rax
0x4002b1:	and	edx, 0xfff
0x4002b7:	sub	rsp, rdx
0x4002ba:	mov	rdx, rax
0x4002bd:	and	edx, 0xfff
0x4002c3:	test	rdx, rdx
0x4002c6:	je	0x4002d8
<Block for 0x40029c, 18 bytes>
0x40029c:	sub	rsp, 0x1000
0x4002a3:	or	qword ptr [rsp + 0xff8], 0
0x4002ac:	jmp	0x400297
<Block for 0x4002d8, 76 bytes>
0x4002d8:	mov	rax, rsp
0x4002db:	add	rax, 0xf
0x4002df:	shr	rax, 4
0x4002e3:	shl	rax, 4
0x4002e7:	mov	qword ptr [rbp - 0x90], rax
0x4002ee:	mov	eax, 0x10
0x4002f3:	sub	rax, 1
0x4002f7:	add	rax, 0x6c
0x4002fb:	mov	edi, 0x10
0x400300:	mov	edx, 0
0x400305:	div	rdi
0x400308:	imul	rax, rax, 0x10
0x40030c:	mov	rdx, rax
0x40030f:	and	rdx, 0xfffffffffffff000
0x400316:	mov	rsi, rsp
0x400319:	sub	rsi, rdx
0x40031c:	mov	rdx, rsi
0x40031f:	cmp	rsp, rdx
0x400322:	je	0x400336
<Block for 0x4002c8, 92 bytes>
0x4002c8:	and	eax, 0xfff
0x4002cd:	sub	rax, 8
0x4002d1:	add	rax, rsp
0x4002d4:	or	qword ptr [rax], 0
0x4002d8:	mov	rax, rsp
0x4002db:	add	rax, 0xf
0x4002df:	shr	rax, 4
0x4002e3:	shl	rax, 4
0x4002e7:	mov	qword ptr [rbp - 0x90], rax
0x4002ee:	mov	eax, 0x10
0x4002f3:	sub	rax, 1
0x4002f7:	add	rax, 0x6c
0x4002fb:	mov	edi, 0x10
0x400300:	mov	edx, 0
0x400305:	div	rdi
0x400308:	imul	rax, rax, 0x10
0x40030c:	mov	rdx, rax
0x40030f:	and	rdx, 0xfffffffffffff000
0x400316:	mov	rsi, rsp
0x400319:	sub	rsi, rdx
0x40031c:	mov	rdx, rsi
0x40031f:	cmp	rsp, rdx
0x400322:	je	0x400336
<Block for 0x400297, 5 bytes>
0x400297:	cmp	rsp, rdx
0x40029a:	je	0x4002ae
<Block for 0x400336, 26 bytes>
0x400336:	mov	rdx, rax
0x400339:	and	edx, 0xfff
0x40033f:	sub	rsp, rdx
0x400342:	mov	rdx, rax
0x400345:	and	edx, 0xfff
0x40034b:	test	rdx, rdx
0x40034e:	je	0x400360
<Block for 0x400324, 18 bytes>
0x400324:	sub	rsp, 0x1000
0x40032b:	or	qword ptr [rsp + 0xff8], 0
0x400334:	jmp	0x40031f
<Block for 0x400360, 47 bytes>
0x400360:	mov	rax, rsp
0x400363:	add	rax, 0xf
0x400367:	shr	rax, 4
0x40036b:	shl	rax, 4
0x40036f:	mov	qword ptr [rbp - 0x88], rax
0x400376:	mov	rax, qword ptr [rbp - 0x90]
0x40037d:	mov	edx, 0x31
0x400382:	mov	esi, 0x41
0x400387:	mov	rdi, rax
0x40038a:	call	0x500000
<Block for 0x400350, 63 bytes>
0x400350:	and	eax, 0xfff
0x400355:	sub	rax, 8
0x400359:	add	rax, rsp
0x40035c:	or	qword ptr [rax], 0
0x400360:	mov	rax, rsp
0x400363:	add	rax, 0xf
0x400367:	shr	rax, 4
0x40036b:	shl	rax, 4
0x40036f:	mov	qword ptr [rbp - 0x88], rax
0x400376:	mov	rax, qword ptr [rbp - 0x90]
0x40037d:	mov	edx, 0x31
0x400382:	mov	esi, 0x41
0x400387:	mov	rdi, rax
0x40038a:	call	0x500000
<Block for 0x40031f, 5 bytes>
0x40031f:	cmp	rsp, rdx
0x400322:	je	0x400336
<Block for 0x40038f, 39 bytes>
0x40038f:	mov	rax, qword ptr [rbp - 0x90]
0x400396:	add	rax, 0x31
0x40039a:	mov	byte ptr [rax], 0
0x40039d:	mov	rax, qword ptr [rbp - 0x88]
0x4003a4:	mov	edx, 0x63
0x4003a9:	mov	esi, 0x41
0x4003ae:	mov	rdi, rax
0x4003b1:	call	0x500000
<Block for 0x4003b6, 64 bytes>
0x4003b6:	mov	rax, qword ptr [rbp - 0x88]
0x4003bd:	add	rax, 0x63
0x4003c1:	mov	byte ptr [rax], 0
0x4003c4:	mov	rax, qword ptr [rbp - 0x88]
0x4003cb:	mov	qword ptr [rbp - 0xa8], rax
0x4003d2:	mov	rax, qword ptr [rbp - 0x98]
0x4003d9:	mov	rax, qword ptr [rax]
0x4003dc:	mov	qword ptr [rbp - 0x80], rax
0x4003e0:	lea	rax, [rbp - 0x70]
0x4003e4:	mov	edx, 0x63
0x4003e9:	mov	esi, 0x43
0x4003ee:	mov	rdi, rax
0x4003f1:	call	0x500000
<Block for 0x4003f6, 16 bytes>
0x4003f6:	mov	byte ptr [rbp - 0xd], 0
0x4003fa:	lea	rax, [rbp - 0x70]
0x4003fe:	mov	rdi, rax
0x400401:	call	0x500008
<Block for 0x400406, 28 bytes>
0x400406:	mov	qword ptr [rbp - 0x78], rax
0x40040a:	mov	qword ptr [rbp - 0xa0], 0
0x400415:	mov	rax, qword ptr [rbp - 0xa0]
0x40041c:	cmp	rax, qword ptr [rbp - 0x78]
0x400420:	jae	0x40044d
<Block for 0x400422, 43 bytes>
0x400422:	mov	rdx, qword ptr [rbp - 0x80]
0x400426:	mov	rax, qword ptr [rbp - 0xa0]
0x40042d:	add	rax, rdx
0x400430:	movzx	eax, byte ptr [rax]
0x400433:	lea	rcx, [rbp - 0x70]
0x400437:	mov	rdx, qword ptr [rbp - 0xa0]
0x40043e:	add	rdx, rcx
0x400441:	mov	byte ptr [rdx], al
0x400443:	add	qword ptr [rbp - 0xa0], 1
0x40044b:	jmp	0x400415
<Block for 0x40044d, 16 bytes>
0x40044d:	mov	byte ptr [rbp - 0xd], 0
0x400451:	lea	rax, [rbp - 0x70]
0x400455:	mov	rdi, rax
0x400458:	call	0x500010
<Block for 0x400415, 13 bytes>
0x400415:	mov	rax, qword ptr [rbp - 0xa0]
0x40041c:	cmp	rax, qword ptr [rbp - 0x78]
0x400420:	jae	0x40044d
<Block for 0x40045d, 16 bytes>
0x40045d:	nop	
0x40045e:	mov	rax, qword ptr [rbp - 8]
0x400462:	xor	rax, qword ptr fs:[0x28]
0x40046b:	je	0x400472
<Block for 0x400472, 2 bytes>
0x400472:	leave	
0x400473:	ret	
<Block for 0x40046d, 5 bytes>
0x40046d:	call	0x500018
