<Block for 0x400111, 36 bytes>
0x400111:	endbr64	
0x400115:	push	rbp
0x400116:	mov	rbp, rsp
0x400119:	add	rsp, -0x80
0x40011d:	mov	rax, qword ptr fs:[0x28]
0x400126:	mov	qword ptr [rbp - 8], rax
0x40012a:	xor	eax, eax
0x40012c:	mov	eax, 0
0x400131:	test	eax, eax
0x400133:	je	0x400146
<Block for 0x400146, 198 bytes>
0x400146:	mov	qword ptr [rbp - 0x70], 0
0x40014e:	mov	qword ptr [rbp - 0x68], 0
0x400156:	mov	qword ptr [rbp - 0x60], 0
0x40015e:	mov	qword ptr [rbp - 0x58], 0
0x400166:	mov	qword ptr [rbp - 0x50], 0
0x40016e:	mov	qword ptr [rbp - 0x48], 0
0x400176:	mov	qword ptr [rbp - 0x40], 0
0x40017e:	mov	qword ptr [rbp - 0x38], 0
0x400186:	mov	qword ptr [rbp - 0x30], 0
0x40018e:	mov	qword ptr [rbp - 0x28], 0
0x400196:	mov	qword ptr [rbp - 0x20], 0
0x40019e:	mov	qword ptr [rbp - 0x18], 0
0x4001a6:	mov	dword ptr [rbp - 0x10], 0
0x4001ad:	lea	rax, [rbp - 0x70]
0x4001b1:	mov	qword ptr [rbp - 0x78], rax
0x4001b5:	mov	rax, qword ptr [rbp - 0x78]
0x4001b9:	movabs	rdx, 0x6867666564636261
0x4001c3:	movabs	rcx, 0x706f6e6d6c6b6a69
0x4001cd:	mov	qword ptr [rax], rdx
0x4001d0:	mov	qword ptr [rax + 8], rcx
0x4001d4:	movabs	rsi, 0x7877767574737271
0x4001de:	mov	qword ptr [rax + 0x10], rsi
0x4001e2:	mov	word ptr [rax + 0x18], 0x7a79
0x4001e8:	mov	byte ptr [rax + 0x1a], 0
0x4001ec:	mov	rax, qword ptr [rbp - 0x78]
0x4001f0:	lea	rcx, [rax + 4]
0x4001f4:	mov	rax, qword ptr [rbp - 0x78]
0x4001f8:	add	rax, 6
0x4001fc:	mov	edx, 0xa
0x400201:	mov	rsi, rcx
0x400204:	mov	rdi, rax
0x400207:	call	0x500018
<Block for 0x400135, 12 bytes>
0x400135:	lea	rdi, [rip + 0x22c]
0x40013c:	call	0x500008
<Block for 0x40020c, 12 bytes>
0x40020c:	mov	rax, qword ptr [rbp - 0x78]
0x400210:	mov	rdi, rax
0x400213:	call	0x500008
<Block for 0x400141, 5 bytes>
0x400141:	jmp	0x400218
<Block for 0x400218, 16 bytes>
0x400218:	nop	
0x400219:	mov	rax, qword ptr [rbp - 8]
0x40021d:	xor	rax, qword ptr fs:[0x28]
0x400226:	je	0x40022d
<Block for 0x40022d, 2 bytes>
0x40022d:	leave	
0x40022e:	ret	
<Block for 0x400228, 5 bytes>
0x400228:	call	0x500010
