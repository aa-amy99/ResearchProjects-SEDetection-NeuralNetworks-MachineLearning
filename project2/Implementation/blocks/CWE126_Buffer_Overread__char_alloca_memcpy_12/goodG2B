<Block for 0x4001f6, 84 bytes>
0x4001f6:	endbr64	
0x4001fa:	push	rbp
0x4001fb:	mov	rbp, rsp
0x4001fe:	sub	rsp, 0x90
0x400205:	mov	rax, qword ptr fs:[0x28]
0x40020e:	mov	qword ptr [rbp - 8], rax
0x400212:	xor	eax, eax
0x400214:	mov	eax, 0x10
0x400219:	sub	rax, 1
0x40021d:	add	rax, 0x3a
0x400221:	mov	ecx, 0x10
0x400226:	mov	edx, 0
0x40022b:	div	rcx
0x40022e:	imul	rax, rax, 0x10
0x400232:	mov	rdx, rax
0x400235:	and	rdx, 0xfffffffffffff000
0x40023c:	mov	rcx, rsp
0x40023f:	sub	rcx, rdx
0x400242:	mov	rdx, rcx
0x400245:	cmp	rsp, rdx
0x400248:	je	0x40025c
<Block for 0x40025c, 26 bytes>
0x40025c:	mov	rdx, rax
0x40025f:	and	edx, 0xfff
0x400265:	sub	rsp, rdx
0x400268:	mov	rdx, rax
0x40026b:	and	edx, 0xfff
0x400271:	test	rdx, rdx
0x400274:	je	0x400286
<Block for 0x40024a, 18 bytes>
0x40024a:	sub	rsp, 0x1000
0x400251:	or	qword ptr [rsp + 0xff8], 0
0x40025a:	jmp	0x400245
<Block for 0x400286, 73 bytes>
0x400286:	mov	rax, rsp
0x400289:	add	rax, 0xf
0x40028d:	shr	rax, 4
0x400291:	shl	rax, 4
0x400295:	mov	qword ptr [rbp - 0x80], rax
0x400299:	mov	eax, 0x10
0x40029e:	sub	rax, 1
0x4002a2:	add	rax, 0x6c
0x4002a6:	mov	edi, 0x10
0x4002ab:	mov	edx, 0
0x4002b0:	div	rdi
0x4002b3:	imul	rax, rax, 0x10
0x4002b7:	mov	rdx, rax
0x4002ba:	and	rdx, 0xfffffffffffff000
0x4002c1:	mov	rsi, rsp
0x4002c4:	sub	rsi, rdx
0x4002c7:	mov	rdx, rsi
0x4002ca:	cmp	rsp, rdx
0x4002cd:	je	0x4002e1
<Block for 0x400276, 89 bytes>
0x400276:	and	eax, 0xfff
0x40027b:	sub	rax, 8
0x40027f:	add	rax, rsp
0x400282:	or	qword ptr [rax], 0
0x400286:	mov	rax, rsp
0x400289:	add	rax, 0xf
0x40028d:	shr	rax, 4
0x400291:	shl	rax, 4
0x400295:	mov	qword ptr [rbp - 0x80], rax
0x400299:	mov	eax, 0x10
0x40029e:	sub	rax, 1
0x4002a2:	add	rax, 0x6c
0x4002a6:	mov	edi, 0x10
0x4002ab:	mov	edx, 0
0x4002b0:	div	rdi
0x4002b3:	imul	rax, rax, 0x10
0x4002b7:	mov	rdx, rax
0x4002ba:	and	rdx, 0xfffffffffffff000
0x4002c1:	mov	rsi, rsp
0x4002c4:	sub	rsi, rdx
0x4002c7:	mov	rdx, rsi
0x4002ca:	cmp	rsp, rdx
0x4002cd:	je	0x4002e1
<Block for 0x400245, 5 bytes>
0x400245:	cmp	rsp, rdx
0x400248:	je	0x40025c
<Block for 0x4002e1, 26 bytes>
0x4002e1:	mov	rdx, rax
0x4002e4:	and	edx, 0xfff
0x4002ea:	sub	rsp, rdx
0x4002ed:	mov	rdx, rax
0x4002f0:	and	edx, 0xfff
0x4002f6:	test	rdx, rdx
0x4002f9:	je	0x40030b
<Block for 0x4002cf, 18 bytes>
0x4002cf:	sub	rsp, 0x1000
0x4002d6:	or	qword ptr [rsp + 0xff8], 0
0x4002df:	jmp	0x4002ca
<Block for 0x40030b, 41 bytes>
0x40030b:	mov	rax, rsp
0x40030e:	add	rax, 0xf
0x400312:	shr	rax, 4
0x400316:	shl	rax, 4
0x40031a:	mov	qword ptr [rbp - 0x78], rax
0x40031e:	mov	rax, qword ptr [rbp - 0x80]
0x400322:	mov	edx, 0x31
0x400327:	mov	esi, 0x41
0x40032c:	mov	rdi, rax
0x40032f:	call	0x500000
<Block for 0x4002fb, 57 bytes>
0x4002fb:	and	eax, 0xfff
0x400300:	sub	rax, 8
0x400304:	add	rax, rsp
0x400307:	or	qword ptr [rax], 0
0x40030b:	mov	rax, rsp
0x40030e:	add	rax, 0xf
0x400312:	shr	rax, 4
0x400316:	shl	rax, 4
0x40031a:	mov	qword ptr [rbp - 0x78], rax
0x40031e:	mov	rax, qword ptr [rbp - 0x80]
0x400322:	mov	edx, 0x31
0x400327:	mov	esi, 0x41
0x40032c:	mov	rdi, rax
0x40032f:	call	0x500000
<Block for 0x4002ca, 5 bytes>
0x4002ca:	cmp	rsp, rdx
0x4002cd:	je	0x4002e1
<Block for 0x400334, 33 bytes>
0x400334:	mov	rax, qword ptr [rbp - 0x80]
0x400338:	add	rax, 0x31
0x40033c:	mov	byte ptr [rax], 0
0x40033f:	mov	rax, qword ptr [rbp - 0x78]
0x400343:	mov	edx, 0x63
0x400348:	mov	esi, 0x41
0x40034d:	mov	rdi, rax
0x400350:	call	0x500000
<Block for 0x400355, 21 bytes>
0x400355:	mov	rax, qword ptr [rbp - 0x78]
0x400359:	add	rax, 0x63
0x40035d:	mov	byte ptr [rax], 0
0x400360:	mov	eax, 0
0x400365:	call	0x500008
<Block for 0x40036a, 4 bytes>
0x40036a:	test	eax, eax
0x40036c:	je	0x40037b
<Block for 0x40037b, 33 bytes>
0x40037b:	mov	rax, qword ptr [rbp - 0x78]
0x40037f:	mov	qword ptr [rbp - 0x88], rax
0x400386:	lea	rax, [rbp - 0x70]
0x40038a:	mov	edx, 0x63
0x40038f:	mov	esi, 0x43
0x400394:	mov	rdi, rax
0x400397:	call	0x500000
<Block for 0x40036e, 13 bytes>
0x40036e:	mov	rax, qword ptr [rbp - 0x78]
0x400372:	mov	qword ptr [rbp - 0x88], rax
0x400379:	jmp	0x400386
<Block for 0x40039c, 16 bytes>
0x40039c:	mov	byte ptr [rbp - 0xd], 0
0x4003a0:	lea	rax, [rbp - 0x70]
0x4003a4:	mov	rdi, rax
0x4003a7:	call	0x500010
<Block for 0x400386, 22 bytes>
0x400386:	lea	rax, [rbp - 0x70]
0x40038a:	mov	edx, 0x63
0x40038f:	mov	esi, 0x43
0x400394:	mov	rdi, rax
0x400397:	call	0x500000
<Block for 0x4003ac, 25 bytes>
0x4003ac:	mov	rdx, rax
0x4003af:	mov	rcx, qword ptr [rbp - 0x88]
0x4003b6:	lea	rax, [rbp - 0x70]
0x4003ba:	mov	rsi, rcx
0x4003bd:	mov	rdi, rax
0x4003c0:	call	0x500018
<Block for 0x4003c5, 16 bytes>
0x4003c5:	mov	byte ptr [rbp - 0xd], 0
0x4003c9:	lea	rax, [rbp - 0x70]
0x4003cd:	mov	rdi, rax
0x4003d0:	call	0x500020
<Block for 0x4003d5, 16 bytes>
0x4003d5:	nop	
0x4003d6:	mov	rax, qword ptr [rbp - 8]
0x4003da:	xor	rax, qword ptr fs:[0x28]
0x4003e3:	je	0x4003ea
<Block for 0x4003ea, 2 bytes>
0x4003ea:	leave	
0x4003eb:	ret	
<Block for 0x4003e5, 5 bytes>
0x4003e5:	call	0x500028
