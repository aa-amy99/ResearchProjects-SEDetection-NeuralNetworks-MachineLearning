<Block for 0x40044d, 84 bytes>
0x40044d:	endbr64	
0x400451:	push	rbp
0x400452:	mov	rbp, rsp
0x400455:	sub	rsp, 0xa0
0x40045c:	mov	rax, qword ptr fs:[0x28]
0x400465:	mov	qword ptr [rbp - 8], rax
0x400469:	xor	eax, eax
0x40046b:	mov	eax, 0x10
0x400470:	sub	rax, 1
0x400474:	add	rax, 0x3a
0x400478:	mov	ecx, 0x10
0x40047d:	mov	edx, 0
0x400482:	div	rcx
0x400485:	imul	rax, rax, 0x10
0x400489:	mov	rdx, rax
0x40048c:	and	rdx, 0xfffffffffffff000
0x400493:	mov	rcx, rsp
0x400496:	sub	rcx, rdx
0x400499:	mov	rdx, rcx
0x40049c:	cmp	rsp, rdx
0x40049f:	je	0x4004b3
<Block for 0x4004b3, 26 bytes>
0x4004b3:	mov	rdx, rax
0x4004b6:	and	edx, 0xfff
0x4004bc:	sub	rsp, rdx
0x4004bf:	mov	rdx, rax
0x4004c2:	and	edx, 0xfff
0x4004c8:	test	rdx, rdx
0x4004cb:	je	0x4004dd
<Block for 0x4004a1, 18 bytes>
0x4004a1:	sub	rsp, 0x1000
0x4004a8:	or	qword ptr [rsp + 0xff8], 0
0x4004b1:	jmp	0x40049c
<Block for 0x4004dd, 76 bytes>
0x4004dd:	mov	rax, rsp
0x4004e0:	add	rax, 0xf
0x4004e4:	shr	rax, 4
0x4004e8:	shl	rax, 4
0x4004ec:	mov	qword ptr [rbp - 0x88], rax
0x4004f3:	mov	eax, 0x10
0x4004f8:	sub	rax, 1
0x4004fc:	add	rax, 0x6c
0x400500:	mov	edi, 0x10
0x400505:	mov	edx, 0
0x40050a:	div	rdi
0x40050d:	imul	rax, rax, 0x10
0x400511:	mov	rdx, rax
0x400514:	and	rdx, 0xfffffffffffff000
0x40051b:	mov	rsi, rsp
0x40051e:	sub	rsi, rdx
0x400521:	mov	rdx, rsi
0x400524:	cmp	rsp, rdx
0x400527:	je	0x40053b
<Block for 0x4004cd, 92 bytes>
0x4004cd:	and	eax, 0xfff
0x4004d2:	sub	rax, 8
0x4004d6:	add	rax, rsp
0x4004d9:	or	qword ptr [rax], 0
0x4004dd:	mov	rax, rsp
0x4004e0:	add	rax, 0xf
0x4004e4:	shr	rax, 4
0x4004e8:	shl	rax, 4
0x4004ec:	mov	qword ptr [rbp - 0x88], rax
0x4004f3:	mov	eax, 0x10
0x4004f8:	sub	rax, 1
0x4004fc:	add	rax, 0x6c
0x400500:	mov	edi, 0x10
0x400505:	mov	edx, 0
0x40050a:	div	rdi
0x40050d:	imul	rax, rax, 0x10
0x400511:	mov	rdx, rax
0x400514:	and	rdx, 0xfffffffffffff000
0x40051b:	mov	rsi, rsp
0x40051e:	sub	rsi, rdx
0x400521:	mov	rdx, rsi
0x400524:	cmp	rsp, rdx
0x400527:	je	0x40053b
<Block for 0x40049c, 5 bytes>
0x40049c:	cmp	rsp, rdx
0x40049f:	je	0x4004b3
<Block for 0x40053b, 26 bytes>
0x40053b:	mov	rdx, rax
0x40053e:	and	edx, 0xfff
0x400544:	sub	rsp, rdx
0x400547:	mov	rdx, rax
0x40054a:	and	edx, 0xfff
0x400550:	test	rdx, rdx
0x400553:	je	0x400565
<Block for 0x400529, 18 bytes>
0x400529:	sub	rsp, 0x1000
0x400530:	or	qword ptr [rsp + 0xff8], 0
0x400539:	jmp	0x400524
<Block for 0x400565, 44 bytes>
0x400565:	mov	rax, rsp
0x400568:	add	rax, 0xf
0x40056c:	shr	rax, 4
0x400570:	shl	rax, 4
0x400574:	mov	qword ptr [rbp - 0x80], rax
0x400578:	mov	rax, qword ptr [rbp - 0x88]
0x40057f:	mov	edx, 0x31
0x400584:	mov	esi, 0x41
0x400589:	mov	rdi, rax
0x40058c:	call	0x500000
<Block for 0x400555, 60 bytes>
0x400555:	and	eax, 0xfff
0x40055a:	sub	rax, 8
0x40055e:	add	rax, rsp
0x400561:	or	qword ptr [rax], 0
0x400565:	mov	rax, rsp
0x400568:	add	rax, 0xf
0x40056c:	shr	rax, 4
0x400570:	shl	rax, 4
0x400574:	mov	qword ptr [rbp - 0x80], rax
0x400578:	mov	rax, qword ptr [rbp - 0x88]
0x40057f:	mov	edx, 0x31
0x400584:	mov	esi, 0x41
0x400589:	mov	rdi, rax
0x40058c:	call	0x500000
<Block for 0x400524, 5 bytes>
0x400524:	cmp	rsp, rdx
0x400527:	je	0x40053b
<Block for 0x400591, 36 bytes>
0x400591:	mov	rax, qword ptr [rbp - 0x88]
0x400598:	add	rax, 0x31
0x40059c:	mov	byte ptr [rax], 0
0x40059f:	mov	rax, qword ptr [rbp - 0x80]
0x4005a3:	mov	edx, 0x63
0x4005a8:	mov	esi, 0x41
0x4005ad:	mov	rdi, rax
0x4005b0:	call	0x500000
<Block for 0x4005b5, 20 bytes>
0x4005b5:	mov	rax, qword ptr [rbp - 0x80]
0x4005b9:	add	rax, 0x63
0x4005bd:	mov	byte ptr [rax], 0
0x4005c0:	mov	eax, 1
0x4005c5:	test	eax, eax
0x4005c7:	je	0x4005d4
<Block for 0x4005d4, 22 bytes>
0x4005d4:	lea	rax, [rbp - 0x70]
0x4005d8:	mov	edx, 0x63
0x4005dd:	mov	esi, 0x43
0x4005e2:	mov	rdi, rax
0x4005e5:	call	0x500000
<Block for 0x4005c9, 33 bytes>
0x4005c9:	mov	rax, qword ptr [rbp - 0x80]
0x4005cd:	mov	qword ptr [rbp - 0x98], rax
0x4005d4:	lea	rax, [rbp - 0x70]
0x4005d8:	mov	edx, 0x63
0x4005dd:	mov	esi, 0x43
0x4005e2:	mov	rdi, rax
0x4005e5:	call	0x500000
<Block for 0x4005ea, 16 bytes>
0x4005ea:	mov	byte ptr [rbp - 0xd], 0
0x4005ee:	lea	rax, [rbp - 0x70]
0x4005f2:	mov	rdi, rax
0x4005f5:	call	0x500008
<Block for 0x4005fa, 17 bytes>
0x4005fa:	mov	qword ptr [rbp - 0x78], rax
0x4005fe:	mov	qword ptr [rbp - 0x90], 0
0x400609:	jmp	0x400637
<Block for 0x400637, 13 bytes>
0x400637:	mov	rax, qword ptr [rbp - 0x90]
0x40063e:	cmp	rax, qword ptr [rbp - 0x78]
0x400642:	jb	0x40060b
<Block for 0x40060b, 57 bytes>
0x40060b:	mov	rdx, qword ptr [rbp - 0x98]
0x400612:	mov	rax, qword ptr [rbp - 0x90]
0x400619:	add	rax, rdx
0x40061c:	movzx	eax, byte ptr [rax]
0x40061f:	lea	rcx, [rbp - 0x70]
0x400623:	mov	rdx, qword ptr [rbp - 0x90]
0x40062a:	add	rdx, rcx
0x40062d:	mov	byte ptr [rdx], al
0x40062f:	add	qword ptr [rbp - 0x90], 1
0x400637:	mov	rax, qword ptr [rbp - 0x90]
0x40063e:	cmp	rax, qword ptr [rbp - 0x78]
0x400642:	jb	0x40060b
<Block for 0x400644, 16 bytes>
0x400644:	mov	byte ptr [rbp - 0xd], 0
0x400648:	lea	rax, [rbp - 0x70]
0x40064c:	mov	rdi, rax
0x40064f:	call	0x500010
<Block for 0x400654, 16 bytes>
0x400654:	nop	
0x400655:	mov	rax, qword ptr [rbp - 8]
0x400659:	xor	rax, qword ptr fs:[0x28]
0x400662:	je	0x400669
<Block for 0x400669, 2 bytes>
0x400669:	leave	
0x40066a:	ret	
<Block for 0x400664, 5 bytes>
0x400664:	call	0x500018
