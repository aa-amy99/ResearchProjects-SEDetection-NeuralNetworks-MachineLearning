<Block for 0x400000, 87 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x50
0x40000c:	mov	qword ptr [rbp - 0x48], rdi
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 8], rax
0x40001d:	xor	eax, eax
0x40001f:	mov	rax, qword ptr [rbp - 0x48]
0x400023:	mov	eax, dword ptr [rax + 8]
0x400026:	mov	dword ptr [rbp - 0x34], eax
0x400029:	mov	qword ptr [rbp - 0x30], 0
0x400031:	mov	qword ptr [rbp - 0x28], 0
0x400039:	mov	qword ptr [rbp - 0x20], 0
0x400041:	mov	qword ptr [rbp - 0x18], 0
0x400049:	mov	qword ptr [rbp - 0x10], 0
0x400051:	cmp	dword ptr [rbp - 0x34], 9
0x400055:	jg	0x400069
<Block for 0x400057, 16 bytes>
0x400057:	mov	eax, dword ptr [rbp - 0x34]
0x40005a:	cdqe	
0x40005c:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x400060:	mov	edi, eax
0x400062:	call	0x500000
<Block for 0x400069, 12 bytes>
0x400069:	lea	rdi, [rip + 0x140]
0x400070:	call	0x500008
<Block for 0x400067, 2 bytes>
0x400067:	jmp	0x400075
<Block for 0x400075, 16 bytes>
0x400075:	nop	
0x400076:	mov	rax, qword ptr [rbp - 8]
0x40007a:	xor	rax, qword ptr fs:[0x28]
0x400083:	je	0x40008a
<Block for 0x40008a, 2 bytes>
0x40008a:	leave	
0x40008b:	ret	
<Block for 0x400085, 5 bytes>
0x400085:	call	0x500010
