<Block for 0x4001df, 43 bytes>
0x4001df:	endbr64	
0x4001e3:	push	rbp
0x4001e4:	mov	rbp, rsp
0x4001e7:	push	rbx
0x4001e8:	sub	rsp, 0x88
0x4001ef:	mov	rax, qword ptr fs:[0x28]
0x4001f8:	mov	qword ptr [rbp - 0x18], rax
0x4001fc:	xor	eax, eax
0x4001fe:	lea	rax, [rbp - 0x80]
0x400202:	mov	rdi, rax
0x400205:	call	0x4004fa
<Block for 0x40020a, 54 bytes>
0x40020a:	mov	eax, 0x10
0x40020f:	sub	rax, 1
0x400213:	add	rax, 0x6c
0x400217:	mov	ecx, 0x10
0x40021c:	mov	edx, 0
0x400221:	div	rcx
0x400224:	imul	rax, rax, 0x10
0x400228:	mov	rdx, rax
0x40022b:	and	rdx, 0xfffffffffffff000
0x400232:	mov	rcx, rsp
0x400235:	sub	rcx, rdx
0x400238:	mov	rdx, rcx
0x40023b:	cmp	rsp, rdx
0x40023e:	je	0x400252
<Block for 0x400252, 26 bytes>
0x400252:	mov	rdx, rax
0x400255:	and	edx, 0xfff
0x40025b:	sub	rsp, rdx
0x40025e:	mov	rdx, rax
0x400261:	and	edx, 0xfff
0x400267:	test	rdx, rdx
0x40026a:	je	0x40027c
<Block for 0x400240, 18 bytes>
0x400240:	sub	rsp, 0x1000
0x400247:	or	qword ptr [rsp + 0xff8], 0
0x400250:	jmp	0x40023b
<Block for 0x40027c, 47 bytes>
0x40027c:	mov	rax, rsp
0x40027f:	add	rax, 0xf
0x400283:	shr	rax, 4
0x400287:	shl	rax, 4
0x40028b:	mov	qword ptr [rbp - 0x90], rax
0x400292:	mov	rax, qword ptr [rbp - 0x90]
0x400299:	mov	edx, 0x63
0x40029e:	mov	esi, 0x41
0x4002a3:	mov	rdi, rax
0x4002a6:	call	0x500000
<Block for 0x40026c, 63 bytes>
0x40026c:	and	eax, 0xfff
0x400271:	sub	rax, 8
0x400275:	add	rax, rsp
0x400278:	or	qword ptr [rax], 0
0x40027c:	mov	rax, rsp
0x40027f:	add	rax, 0xf
0x400283:	shr	rax, 4
0x400287:	shl	rax, 4
0x40028b:	mov	qword ptr [rbp - 0x90], rax
0x400292:	mov	rax, qword ptr [rbp - 0x90]
0x400299:	mov	edx, 0x63
0x40029e:	mov	esi, 0x41
0x4002a3:	mov	rdi, rax
0x4002a6:	call	0x500000
<Block for 0x40023b, 5 bytes>
0x40023b:	cmp	rsp, rdx
0x40023e:	je	0x400252
<Block for 0x4002ab, 54 bytes>
0x4002ab:	mov	rax, qword ptr [rbp - 0x90]
0x4002b2:	add	rax, 0x63
0x4002b6:	mov	byte ptr [rax], 0
0x4002b9:	mov	rax, qword ptr [rbp - 0x90]
0x4002c0:	mov	qword ptr [rbp - 0x88], rax
0x4002c7:	mov	dword ptr [rbp - 0x50], 0
0x4002ce:	lea	rdx, [rbp - 0x50]
0x4002d2:	lea	rax, [rbp - 0x80]
0x4002d6:	mov	rsi, rdx
0x4002d9:	mov	rdi, rax
0x4002dc:	call	0x4006b2
<Block for 0x4002e1, 36 bytes>
0x4002e1:	mov	rdx, qword ptr [rbp - 0x88]
0x4002e8:	mov	qword ptr [rax], rdx
0x4002eb:	mov	dword ptr [rbp - 0x50], 1
0x4002f2:	lea	rdx, [rbp - 0x50]
0x4002f6:	lea	rax, [rbp - 0x80]
0x4002fa:	mov	rsi, rdx
0x4002fd:	mov	rdi, rax
0x400300:	call	0x4006b2
<Block for 0x400305, 36 bytes>
0x400305:	mov	rdx, qword ptr [rbp - 0x88]
0x40030c:	mov	qword ptr [rax], rdx
0x40030f:	mov	dword ptr [rbp - 0x50], 2
0x400316:	lea	rdx, [rbp - 0x50]
0x40031a:	lea	rax, [rbp - 0x80]
0x40031e:	mov	rsi, rdx
0x400321:	mov	rdi, rax
0x400324:	call	0x4006b2
<Block for 0x400329, 29 bytes>
0x400329:	mov	rdx, qword ptr [rbp - 0x88]
0x400330:	mov	qword ptr [rax], rdx
0x400333:	lea	rdx, [rbp - 0x80]
0x400337:	lea	rax, [rbp - 0x50]
0x40033b:	mov	rsi, rdx
0x40033e:	mov	rdi, rax
0x400341:	call	0x40053a
<Block for 0x400346, 12 bytes>
0x400346:	lea	rax, [rbp - 0x50]
0x40034a:	mov	rdi, rax
0x40034d:	call	0x500020
<Block for 0x400352, 12 bytes>
0x400352:	lea	rax, [rbp - 0x50]
0x400356:	mov	rdi, rax
0x400359:	call	0x40051a
<Block for 0x40035e, 12 bytes>
0x40035e:	lea	rax, [rbp - 0x80]
0x400362:	mov	rdi, rax
0x400365:	call	0x40051a
<Block for 0x40036a, 16 bytes>
0x40036a:	nop	
0x40036b:	mov	rax, qword ptr [rbp - 0x18]
0x40036f:	xor	rax, qword ptr fs:[0x28]
0x400378:	je	0x4003b4
<Block for 0x4003b4, 6 bytes>
0x4003b4:	mov	rbx, qword ptr [rbp - 8]
0x4003b8:	leave	
0x4003b9:	ret	
<Block for 0x40037a, 2 bytes>
0x40037a:	jmp	0x4003af
<Block for 0x4003af, 5 bytes>
0x4003af:	call	0x500018
