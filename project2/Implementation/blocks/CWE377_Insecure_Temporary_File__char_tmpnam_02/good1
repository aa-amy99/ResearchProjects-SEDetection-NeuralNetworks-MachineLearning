<Block for 0x400074, 67 bytes>
0x400074:	endbr64	
0x400078:	push	rbp
0x400079:	mov	rbp, rsp
0x40007c:	sub	rsp, 0x30
0x400080:	mov	rax, qword ptr fs:[0x28]
0x400089:	mov	qword ptr [rbp - 8], rax
0x40008d:	xor	eax, eax
0x40008f:	movabs	rax, 0x6c69662f706d742f
0x400099:	movabs	rdx, 0x58585858585865
0x4000a3:	mov	qword ptr [rbp - 0x20], rax
0x4000a7:	mov	qword ptr [rbp - 0x18], rdx
0x4000ab:	lea	rax, [rbp - 0x20]
0x4000af:	mov	rdi, rax
0x4000b2:	call	0x500028
<Block for 0x4000b7, 15 bytes>
0x4000b7:	mov	dword ptr [rbp - 0x24], eax
0x4000ba:	lea	rax, [rbp - 0x20]
0x4000be:	mov	rdi, rax
0x4000c1:	call	0x500010
<Block for 0x4000c6, 6 bytes>
0x4000c6:	cmp	dword ptr [rbp - 0x24], -1
0x4000ca:	je	0x4000e2
<Block for 0x4000e2, 16 bytes>
0x4000e2:	nop	
0x4000e3:	mov	rax, qword ptr [rbp - 8]
0x4000e7:	xor	rax, qword ptr fs:[0x28]
0x4000f0:	je	0x4000f7
<Block for 0x4000cc, 12 bytes>
0x4000cc:	lea	rdi, [rip + 0xcd]
0x4000d3:	call	0x500010
<Block for 0x4000f7, 2 bytes>
0x4000f7:	leave	
0x4000f8:	ret	
<Block for 0x4000f2, 5 bytes>
0x4000f2:	call	0x500030
<Block for 0x4000d8, 10 bytes>
0x4000d8:	mov	eax, dword ptr [rbp - 0x24]
0x4000db:	mov	edi, eax
0x4000dd:	call	0x500020
