<Block for 0x40001e, 16 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	push	r12
0x400028:	push	rbx
0x400029:	call	0x400000
<Block for 0x40002e, 13 bytes>
0x40002e:	test	eax, eax
0x400030:	setne	al
0x400033:	test	al, al
0x400035:	je	0x400133
<Block for 0x400133, 6 bytes>
0x400133:	nop	
0x400134:	pop	rbx
0x400135:	pop	r12
0x400137:	pop	rbp
0x400138:	ret	
<Block for 0x40003b, 5 bytes>
0x40003b:	call	0x500000
<Block for 0x400040, 12 bytes>
0x400040:	and	eax, 1
0x400043:	test	eax, eax
0x400045:	sete	al
0x400048:	test	al, al
0x40004a:	je	0x400081
<Block for 0x400081, 5 bytes>
0x400081:	call	0x500000
<Block for 0x40004c, 10 bytes>
0x40004c:	mov	edi, 0x10
0x400051:	call	0x500008
<Block for 0x400086, 12 bytes>
0x400086:	and	eax, 1
0x400089:	test	eax, eax
0x40008b:	sete	al
0x40008e:	test	al, al
0x400090:	je	0x4000c7
<Block for 0x400056, 18 bytes>
0x400056:	mov	rbx, rax
0x400059:	lea	rsi, [rip + 0x402]
0x400060:	mov	rdi, rbx
0x400063:	call	0x500010
<Block for 0x4000c7, 12 bytes>
0x4000c7:	lea	rdi, [rip + 0x39e]
0x4000ce:	call	0x500058
<Block for 0x400092, 10 bytes>
0x400092:	mov	edi, 0x10
0x400097:	call	0x500008
<Block for 0x400068, 25 bytes>
0x400068:	mov	rax, qword ptr [rip + 0xfffb1]
0x40006f:	mov	rdx, rax
0x400072:	lea	rsi, [rip + 0xfffaf]
0x400079:	mov	rdi, rbx
0x40007c:	call	0x500030
<Block for 0x4000d3, 2 bytes>
0x4000d3:	jmp	0x400133
<Block for 0x40009c, 18 bytes>
0x40009c:	mov	rbx, rax
0x40009f:	lea	rsi, [rip + 0x3c1]
0x4000a6:	mov	rdi, rbx
0x4000a9:	call	0x500038
<Block for 0x4000ae, 25 bytes>
0x4000ae:	mov	rax, qword ptr [rip + 0xfff93]
0x4000b5:	mov	rdx, rax
0x4000b8:	lea	rsi, [rip + 0xfff91]
0x4000bf:	mov	rdi, rbx
0x4000c2:	call	0x500030
