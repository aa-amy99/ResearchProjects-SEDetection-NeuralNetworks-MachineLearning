<Block for 0x400199, 110 bytes>
0x400199:	endbr64	
0x40019d:	push	rbp
0x40019e:	mov	rbp, rsp
0x4001a1:	sub	rsp, 0x140
0x4001a8:	mov	rax, qword ptr fs:[0x28]
0x4001b1:	mov	qword ptr [rbp - 8], rax
0x4001b5:	xor	eax, eax
0x4001b7:	lea	rax, [rbp - 0x138]
0x4001be:	mov	qword ptr [rbp - 0x130], rax
0x4001c5:	lea	rax, [rbp - 0x138]
0x4001cc:	mov	qword ptr [rbp - 0x128], rax
0x4001d3:	movabs	rax, 0x3d48544150
0x4001dd:	mov	edx, 0
0x4001e2:	mov	qword ptr [rbp - 0x110], rax
0x4001e9:	mov	qword ptr [rbp - 0x108], rdx
0x4001f0:	lea	rdx, [rbp - 0x100]
0x4001f7:	mov	eax, 0
0x4001fc:	mov	ecx, 0x1d
0x400201:	mov	rdi, rdx
0x400204:	rep stosq	qword ptr [rdi], rax
<Block for 0x400207, 68 bytes>
0x400207:	mov	rdx, rdi
0x40020a:	mov	word ptr [rdx], ax
0x40020d:	add	rdx, 2
0x400211:	lea	rax, [rbp - 0x110]
0x400218:	mov	qword ptr [rbp - 0x138], rax
0x40021f:	mov	rax, qword ptr [rbp - 0x130]
0x400226:	mov	rax, qword ptr [rax]
0x400229:	mov	qword ptr [rbp - 0x120], rax
0x400230:	mov	rax, qword ptr [rbp - 0x120]
0x400237:	mov	rcx, -1
0x40023e:	mov	rdx, rax
0x400241:	mov	eax, 0
0x400246:	mov	rdi, rdx
0x400249:	repne scasb	al, byte ptr [rdi]
<Block for 0x400204, 3 bytes>
0x400204:	rep stosq	qword ptr [rdi], rax
<Block for 0x40024b, 79 bytes>
0x40024b:	mov	rax, rcx
0x40024e:	not	rax
0x400251:	lea	rdx, [rax - 1]
0x400255:	mov	rax, qword ptr [rbp - 0x120]
0x40025c:	add	rax, rdx
0x40025f:	mov	dword ptr [rax], 0x6e69622f
0x400265:	mov	byte ptr [rax + 4], 0
0x400269:	mov	rax, qword ptr [rbp - 0x130]
0x400270:	mov	rdx, qword ptr [rbp - 0x120]
0x400277:	mov	qword ptr [rax], rdx
0x40027a:	mov	rax, qword ptr [rbp - 0x128]
0x400281:	mov	rax, qword ptr [rax]
0x400284:	mov	qword ptr [rbp - 0x118], rax
0x40028b:	mov	rax, qword ptr [rbp - 0x118]
0x400292:	mov	rdi, rax
0x400295:	call	0x500028
<Block for 0x400249, 2 bytes>
0x400249:	repne scasb	al, byte ptr [rdi]
<Block for 0x40029a, 16 bytes>
0x40029a:	nop	
0x40029b:	mov	rax, qword ptr [rbp - 8]
0x40029f:	xor	rax, qword ptr fs:[0x28]
0x4002a8:	je	0x4002af
<Block for 0x4002af, 2 bytes>
0x4002af:	leave	
0x4002b0:	ret	
<Block for 0x4002aa, 5 bytes>
0x4002aa:	call	0x500030
