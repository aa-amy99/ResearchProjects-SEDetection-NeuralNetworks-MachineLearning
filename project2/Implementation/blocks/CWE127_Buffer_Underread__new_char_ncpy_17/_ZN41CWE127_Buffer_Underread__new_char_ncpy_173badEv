<Block for 0x400000, 57 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	qword ptr [rbp - 0x80], 0
0x400026:	mov	dword ptr [rbp - 0x84], 0
0x400030:	cmp	dword ptr [rbp - 0x84], 0
0x400037:	jg	0x40007d
<Block for 0x400039, 10 bytes>
0x400039:	mov	edi, 0x64
0x40003e:	call	0x500000
<Block for 0x40007d, 22 bytes>
0x40007d:	lea	rax, [rbp - 0x70]
0x400081:	mov	edx, 0x63
0x400086:	mov	esi, 0x43
0x40008b:	mov	rdi, rax
0x40008e:	call	0x500008
<Block for 0x400043, 26 bytes>
0x400043:	mov	qword ptr [rbp - 0x78], rax
0x400047:	mov	rax, qword ptr [rbp - 0x78]
0x40004b:	mov	edx, 0x63
0x400050:	mov	esi, 0x41
0x400055:	mov	rdi, rax
0x400058:	call	0x500008
<Block for 0x400093, 16 bytes>
0x400093:	mov	byte ptr [rbp - 0xd], 0
0x400097:	lea	rax, [rbp - 0x70]
0x40009b:	mov	rdi, rax
0x40009e:	call	0x500010
<Block for 0x40005d, 32 bytes>
0x40005d:	mov	rax, qword ptr [rbp - 0x78]
0x400061:	add	rax, 0x63
0x400065:	mov	byte ptr [rax], 0
0x400068:	mov	rax, qword ptr [rbp - 0x78]
0x40006c:	sub	rax, 8
0x400070:	mov	qword ptr [rbp - 0x80], rax
0x400074:	add	dword ptr [rbp - 0x84], 1
0x40007b:	jmp	0x400030
<Block for 0x4000a3, 22 bytes>
0x4000a3:	mov	rdx, rax
0x4000a6:	mov	rcx, qword ptr [rbp - 0x80]
0x4000aa:	lea	rax, [rbp - 0x70]
0x4000ae:	mov	rsi, rcx
0x4000b1:	mov	rdi, rax
0x4000b4:	call	0x500018
<Block for 0x400030, 9 bytes>
0x400030:	cmp	dword ptr [rbp - 0x84], 0
0x400037:	jg	0x40007d
<Block for 0x4000b9, 16 bytes>
0x4000b9:	mov	byte ptr [rbp - 0xd], 0
0x4000bd:	lea	rax, [rbp - 0x70]
0x4000c1:	mov	rdi, rax
0x4000c4:	call	0x500020
<Block for 0x4000c9, 16 bytes>
0x4000c9:	nop	
0x4000ca:	mov	rax, qword ptr [rbp - 8]
0x4000ce:	xor	rax, qword ptr fs:[0x28]
0x4000d7:	je	0x4000de
<Block for 0x4000de, 2 bytes>
0x4000de:	leave	
0x4000df:	ret	
<Block for 0x4000d9, 5 bytes>
0x4000d9:	call	0x500028
