<Block for 0x400077, 37 bytes>
0x400077:	endbr64	
0x40007b:	push	rbp
0x40007c:	mov	rbp, rsp
0x40007f:	sub	rsp, 0x20
0x400083:	mov	rax, qword ptr fs:[0x28]
0x40008c:	mov	qword ptr [rbp - 8], rax
0x400090:	xor	eax, eax
0x400092:	mov	edi, 0x64
0x400097:	call	0x500000
<Block for 0x40009c, 11 bytes>
0x40009c:	mov	qword ptr [rbp - 0x10], rax
0x4000a0:	cmp	qword ptr [rbp - 0x10], 0
0x4000a5:	jne	0x4000b1
<Block for 0x4000a7, 10 bytes>
0x4000a7:	mov	edi, 0xffffffff
0x4000ac:	call	0x500008
<Block for 0x4000b1, 26 bytes>
0x4000b1:	mov	rax, qword ptr [rbp - 0x10]
0x4000b5:	mov	byte ptr [rax], 0
0x4000b8:	mov	rdx, qword ptr [rbp - 0x10]
0x4000bc:	lea	rax, [rbp - 0x18]
0x4000c0:	mov	rsi, rdx
0x4000c3:	mov	rdi, rax
0x4000c6:	call	0x500028
<Block for 0x4000cb, 12 bytes>
0x4000cb:	lea	rax, [rbp - 0x18]
0x4000cf:	mov	rdi, rax
0x4000d2:	call	0x500030
<Block for 0x4000d7, 16 bytes>
0x4000d7:	nop	
0x4000d8:	mov	rax, qword ptr [rbp - 8]
0x4000dc:	xor	rax, qword ptr fs:[0x28]
0x4000e5:	je	0x4000ec
<Block for 0x4000ec, 2 bytes>
0x4000ec:	leave	
0x4000ed:	ret	
<Block for 0x4000e7, 5 bytes>
0x4000e7:	call	0x500020
