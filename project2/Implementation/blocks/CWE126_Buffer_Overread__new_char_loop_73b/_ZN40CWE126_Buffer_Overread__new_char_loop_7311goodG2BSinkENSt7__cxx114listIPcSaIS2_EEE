<Block for 0x4000e2, 52 bytes>
0x4000e2:	endbr64	
0x4000e6:	push	rbp
0x4000e7:	mov	rbp, rsp
0x4000ea:	sub	rsp, 0xa0
0x4000f1:	mov	qword ptr [rbp - 0x98], rdi
0x4000f8:	mov	rax, qword ptr fs:[0x28]
0x400101:	mov	qword ptr [rbp - 8], rax
0x400105:	xor	eax, eax
0x400107:	mov	rax, qword ptr [rbp - 0x98]
0x40010e:	mov	rdi, rax
0x400111:	call	0x4001c6
<Block for 0x400116, 29 bytes>
0x400116:	mov	rax, qword ptr [rax]
0x400119:	mov	qword ptr [rbp - 0x80], rax
0x40011d:	lea	rax, [rbp - 0x70]
0x400121:	mov	edx, 0x63
0x400126:	mov	esi, 0x43
0x40012b:	mov	rdi, rax
0x40012e:	call	0x500000
<Block for 0x400133, 16 bytes>
0x400133:	mov	byte ptr [rbp - 0xd], 0
0x400137:	lea	rax, [rbp - 0x70]
0x40013b:	mov	rdi, rax
0x40013e:	call	0x500008
<Block for 0x400143, 28 bytes>
0x400143:	mov	qword ptr [rbp - 0x78], rax
0x400147:	mov	qword ptr [rbp - 0x88], 0
0x400152:	mov	rax, qword ptr [rbp - 0x88]
0x400159:	cmp	rax, qword ptr [rbp - 0x78]
0x40015d:	jae	0x40018a
<Block for 0x40015f, 43 bytes>
0x40015f:	mov	rdx, qword ptr [rbp - 0x80]
0x400163:	mov	rax, qword ptr [rbp - 0x88]
0x40016a:	add	rax, rdx
0x40016d:	movzx	eax, byte ptr [rax]
0x400170:	lea	rcx, [rbp - 0x70]
0x400174:	mov	rdx, qword ptr [rbp - 0x88]
0x40017b:	add	rdx, rcx
0x40017e:	mov	byte ptr [rdx], al
0x400180:	add	qword ptr [rbp - 0x88], 1
0x400188:	jmp	0x400152
<Block for 0x40018a, 16 bytes>
0x40018a:	mov	byte ptr [rbp - 0xd], 0
0x40018e:	lea	rax, [rbp - 0x70]
0x400192:	mov	rdi, rax
0x400195:	call	0x500010
<Block for 0x400152, 13 bytes>
0x400152:	mov	rax, qword ptr [rbp - 0x88]
0x400159:	cmp	rax, qword ptr [rbp - 0x78]
0x40015d:	jae	0x40018a
<Block for 0x40019a, 7 bytes>
0x40019a:	cmp	qword ptr [rbp - 0x80], 0
0x40019f:	je	0x4001ad
<Block for 0x4001ad, 16 bytes>
0x4001ad:	nop	
0x4001ae:	mov	rax, qword ptr [rbp - 8]
0x4001b2:	xor	rax, qword ptr fs:[0x28]
0x4001bb:	je	0x4001c2
<Block for 0x4001a1, 12 bytes>
0x4001a1:	mov	rax, qword ptr [rbp - 0x80]
0x4001a5:	mov	rdi, rax
0x4001a8:	call	0x500018
<Block for 0x4001c2, 2 bytes>
0x4001c2:	leave	
0x4001c3:	ret	
<Block for 0x4001bd, 5 bytes>
0x4001bd:	call	0x500020
