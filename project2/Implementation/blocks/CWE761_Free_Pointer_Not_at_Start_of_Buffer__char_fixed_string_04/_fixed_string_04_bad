<Block for 0x400000, 22 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	edi, 0x64
0x400011:	call	0x500000
<Block for 0x400016, 11 bytes>
0x400016:	mov	qword ptr [rbp - 8], rax
0x40001a:	cmp	qword ptr [rbp - 8], 0
0x40001f:	jne	0x40002b
<Block for 0x400021, 10 bytes>
0x400021:	mov	edi, 0xffffffff
0x400026:	call	0x500008
<Block for 0x40002b, 44 bytes>
0x40002b:	mov	rax, qword ptr [rbp - 8]
0x40002f:	mov	byte ptr [rax], 0
0x400032:	mov	rax, qword ptr [rbp - 8]
0x400036:	movabs	rdx, 0x7453206465786946
0x400040:	mov	qword ptr [rax], rdx
0x400043:	mov	dword ptr [rax + 8], 0x676e6972
0x40004a:	mov	byte ptr [rax + 0xc], 0
0x40004e:	mov	eax, 1
0x400053:	test	eax, eax
0x400055:	je	0x40008e
<Block for 0x40008e, 3 bytes>
0x40008e:	nop	
0x40008f:	leave	
0x400090:	ret	
<Block for 0x400057, 2 bytes>
0x400057:	jmp	0x400077
<Block for 0x400077, 11 bytes>
0x400077:	mov	rax, qword ptr [rbp - 8]
0x40007b:	movzx	eax, byte ptr [rax]
0x40007e:	test	al, al
0x400080:	jne	0x400059
<Block for 0x400082, 12 bytes>
0x400082:	mov	rax, qword ptr [rbp - 8]
0x400086:	mov	rdi, rax
0x400089:	call	0x500018
<Block for 0x400059, 11 bytes>
0x400059:	mov	rax, qword ptr [rbp - 8]
0x40005d:	movzx	eax, byte ptr [rax]
0x400060:	cmp	al, 0x53
0x400062:	jne	0x400072
<Block for 0x400064, 12 bytes>
0x400064:	lea	rdi, [rip + 0x1a9]
0x40006b:	call	0x500010
<Block for 0x400072, 16 bytes>
0x400072:	add	qword ptr [rbp - 8], 1
0x400077:	mov	rax, qword ptr [rbp - 8]
0x40007b:	movzx	eax, byte ptr [rax]
0x40007e:	test	al, al
0x400080:	jne	0x400059
<Block for 0x400070, 2 bytes>
0x400070:	jmp	0x400082
