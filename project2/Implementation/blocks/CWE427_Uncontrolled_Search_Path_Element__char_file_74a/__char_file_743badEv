<Block for 0x400000, 46 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x198
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 0x18], rax
0x40001d:	xor	eax, eax
0x40001f:	lea	rax, [rbp - 0x180]
0x400026:	mov	rdi, rax
0x400029:	call	0x40059a
<Block for 0x40002e, 52 bytes>
0x40002e:	movabs	rax, 0x3d48544150
0x400038:	mov	edx, 0
0x40003d:	mov	qword ptr [rbp - 0x120], rax
0x400044:	mov	qword ptr [rbp - 0x118], rdx
0x40004b:	lea	rdx, [rbp - 0x110]
0x400052:	mov	eax, 0
0x400057:	mov	ecx, 0x1d
0x40005c:	mov	rdi, rdx
0x40005f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400062, 39 bytes>
0x400062:	mov	rdx, rdi
0x400065:	mov	word ptr [rdx], ax
0x400068:	add	rdx, 2
0x40006c:	lea	rax, [rbp - 0x120]
0x400073:	mov	qword ptr [rbp - 0x198], rax
0x40007a:	mov	rax, qword ptr [rbp - 0x198]
0x400081:	mov	rdi, rax
0x400084:	call	0x500000
<Block for 0x40005f, 3 bytes>
0x40005f:	rep stosq	qword ptr [rdi], rax
<Block for 0x400089, 29 bytes>
0x400089:	mov	qword ptr [rbp - 0x190], rax
0x400090:	mov	eax, 0xfa
0x400095:	sub	rax, qword ptr [rbp - 0x190]
0x40009c:	cmp	rax, 1
0x4000a0:	jbe	0x400139
<Block for 0x400139, 35 bytes>
0x400139:	mov	dword ptr [rbp - 0x150], 0
0x400143:	lea	rdx, [rbp - 0x150]
0x40014a:	lea	rax, [rbp - 0x180]
0x400151:	mov	rsi, rdx
0x400154:	mov	rdi, rax
0x400157:	call	0x400752
<Block for 0x4000a6, 19 bytes>
0x4000a6:	lea	rsi, [rip + 0x3c9]
0x4000ad:	lea	rdi, [rip + 0x3c4]
0x4000b4:	call	0x500008
<Block for 0x40015c, 45 bytes>
0x40015c:	mov	rdx, qword ptr [rbp - 0x198]
0x400163:	mov	qword ptr [rax], rdx
0x400166:	mov	dword ptr [rbp - 0x150], 1
0x400170:	lea	rdx, [rbp - 0x150]
0x400177:	lea	rax, [rbp - 0x180]
0x40017e:	mov	rsi, rdx
0x400181:	mov	rdi, rax
0x400184:	call	0x400752
<Block for 0x4000b9, 17 bytes>
0x4000b9:	mov	qword ptr [rbp - 0x188], rax
0x4000c0:	cmp	qword ptr [rbp - 0x188], 0
0x4000c8:	je	0x400139
<Block for 0x400189, 45 bytes>
0x400189:	mov	rdx, qword ptr [rbp - 0x198]
0x400190:	mov	qword ptr [rax], rdx
0x400193:	mov	dword ptr [rbp - 0x150], 2
0x40019d:	lea	rdx, [rbp - 0x150]
0x4001a4:	lea	rax, [rbp - 0x180]
0x4001ab:	mov	rsi, rdx
0x4001ae:	mov	rdi, rax
0x4001b1:	call	0x400752
<Block for 0x4000ca, 54 bytes>
0x4000ca:	mov	rax, qword ptr [rbp - 0x190]
0x4000d1:	mov	edx, 0xfa
0x4000d6:	sub	edx, eax
0x4000d8:	mov	eax, edx
0x4000da:	mov	esi, eax
0x4000dc:	mov	rdx, qword ptr [rbp - 0x198]
0x4000e3:	mov	rax, qword ptr [rbp - 0x190]
0x4000ea:	lea	rcx, [rdx + rax]
0x4000ee:	mov	rax, qword ptr [rbp - 0x188]
0x4000f5:	mov	rdx, rax
0x4000f8:	mov	rdi, rcx
0x4000fb:	call	0x500010
<Block for 0x4001b6, 35 bytes>
0x4001b6:	mov	rdx, qword ptr [rbp - 0x198]
0x4001bd:	mov	qword ptr [rax], rdx
0x4001c0:	lea	rdx, [rbp - 0x180]
0x4001c7:	lea	rax, [rbp - 0x150]
0x4001ce:	mov	rsi, rdx
0x4001d1:	mov	rdi, rax
0x4001d4:	call	0x4005da
<Block for 0x400100, 10 bytes>
0x400100:	test	rax, rax
0x400103:	sete	al
0x400106:	test	al, al
0x400108:	je	0x40012a
<Block for 0x4001d9, 15 bytes>
0x4001d9:	lea	rax, [rbp - 0x150]
0x4001e0:	mov	rdi, rax
0x4001e3:	call	0x500028
<Block for 0x40012a, 15 bytes>
0x40012a:	mov	rax, qword ptr [rbp - 0x188]
0x400131:	mov	rdi, rax
0x400134:	call	0x500020
<Block for 0x40010a, 12 bytes>
0x40010a:	lea	rdi, [rip + 0x375]
0x400111:	call	0x500018
<Block for 0x4001e8, 15 bytes>
0x4001e8:	lea	rax, [rbp - 0x150]
0x4001ef:	mov	rdi, rax
0x4001f2:	call	0x4005ba
<Block for 0x400116, 35 bytes>
0x400116:	mov	rdx, qword ptr [rbp - 0x198]
0x40011d:	mov	rax, qword ptr [rbp - 0x190]
0x400124:	add	rax, rdx
0x400127:	mov	byte ptr [rax], 0
0x40012a:	mov	rax, qword ptr [rbp - 0x188]
0x400131:	mov	rdi, rax
0x400134:	call	0x500020
<Block for 0x4001f7, 15 bytes>
0x4001f7:	lea	rax, [rbp - 0x180]
0x4001fe:	mov	rdi, rax
0x400201:	call	0x4005ba
<Block for 0x400206, 16 bytes>
0x400206:	nop	
0x400207:	mov	rax, qword ptr [rbp - 0x18]
0x40020b:	xor	rax, qword ptr fs:[0x28]
0x400214:	je	0x400256
<Block for 0x400256, 10 bytes>
0x400256:	add	rsp, 0x198
0x40025d:	pop	rbx
0x40025e:	pop	rbp
0x40025f:	ret	
<Block for 0x400216, 2 bytes>
0x400216:	jmp	0x400251
<Block for 0x400251, 5 bytes>
0x400251:	call	0x500038
