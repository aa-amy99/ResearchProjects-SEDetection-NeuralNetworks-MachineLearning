<Block for 0x400000, 37 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	edi, 0x64
0x400020:	call	0x500000
<Block for 0x400025, 11 bytes>
0x400025:	mov	qword ptr [rbp - 0x10], rax
0x400029:	cmp	qword ptr [rbp - 0x10], 0
0x40002e:	jne	0x40003a
<Block for 0x400030, 10 bytes>
0x400030:	mov	edi, 0xffffffff
0x400035:	call	0x500008
<Block for 0x40003a, 26 bytes>
0x40003a:	mov	rax, qword ptr [rbp - 0x10]
0x40003e:	mov	byte ptr [rax], 0
0x400041:	mov	rdx, qword ptr [rbp - 0x10]
0x400045:	lea	rax, [rbp - 0x18]
0x400049:	mov	rsi, rdx
0x40004c:	mov	rdi, rax
0x40004f:	call	0x500010
<Block for 0x400054, 12 bytes>
0x400054:	lea	rax, [rbp - 0x18]
0x400058:	mov	rdi, rax
0x40005b:	call	0x500018
<Block for 0x400060, 16 bytes>
0x400060:	nop	
0x400061:	mov	rax, qword ptr [rbp - 8]
0x400065:	xor	rax, qword ptr fs:[0x28]
0x40006e:	je	0x400075
<Block for 0x400075, 2 bytes>
0x400075:	leave	
0x400076:	ret	
<Block for 0x400070, 5 bytes>
0x400070:	call	0x500020
