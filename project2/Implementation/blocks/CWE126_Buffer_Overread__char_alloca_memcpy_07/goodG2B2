<Block for 0x4003da, 84 bytes>
0x4003da:	endbr64	
0x4003de:	push	rbp
0x4003df:	mov	rbp, rsp
0x4003e2:	sub	rsp, 0x90
0x4003e9:	mov	rax, qword ptr fs:[0x28]
0x4003f2:	mov	qword ptr [rbp - 8], rax
0x4003f6:	xor	eax, eax
0x4003f8:	mov	eax, 0x10
0x4003fd:	sub	rax, 1
0x400401:	add	rax, 0x3a
0x400405:	mov	ecx, 0x10
0x40040a:	mov	edx, 0
0x40040f:	div	rcx
0x400412:	imul	rax, rax, 0x10
0x400416:	mov	rdx, rax
0x400419:	and	rdx, 0xfffffffffffff000
0x400420:	mov	rcx, rsp
0x400423:	sub	rcx, rdx
0x400426:	mov	rdx, rcx
0x400429:	cmp	rsp, rdx
0x40042c:	je	0x400440
<Block for 0x400440, 26 bytes>
0x400440:	mov	rdx, rax
0x400443:	and	edx, 0xfff
0x400449:	sub	rsp, rdx
0x40044c:	mov	rdx, rax
0x40044f:	and	edx, 0xfff
0x400455:	test	rdx, rdx
0x400458:	je	0x40046a
<Block for 0x40042e, 18 bytes>
0x40042e:	sub	rsp, 0x1000
0x400435:	or	qword ptr [rsp + 0xff8], 0
0x40043e:	jmp	0x400429
<Block for 0x40046a, 73 bytes>
0x40046a:	mov	rax, rsp
0x40046d:	add	rax, 0xf
0x400471:	shr	rax, 4
0x400475:	shl	rax, 4
0x400479:	mov	qword ptr [rbp - 0x80], rax
0x40047d:	mov	eax, 0x10
0x400482:	sub	rax, 1
0x400486:	add	rax, 0x6c
0x40048a:	mov	edi, 0x10
0x40048f:	mov	edx, 0
0x400494:	div	rdi
0x400497:	imul	rax, rax, 0x10
0x40049b:	mov	rdx, rax
0x40049e:	and	rdx, 0xfffffffffffff000
0x4004a5:	mov	rsi, rsp
0x4004a8:	sub	rsi, rdx
0x4004ab:	mov	rdx, rsi
0x4004ae:	cmp	rsp, rdx
0x4004b1:	je	0x4004c5
<Block for 0x40045a, 89 bytes>
0x40045a:	and	eax, 0xfff
0x40045f:	sub	rax, 8
0x400463:	add	rax, rsp
0x400466:	or	qword ptr [rax], 0
0x40046a:	mov	rax, rsp
0x40046d:	add	rax, 0xf
0x400471:	shr	rax, 4
0x400475:	shl	rax, 4
0x400479:	mov	qword ptr [rbp - 0x80], rax
0x40047d:	mov	eax, 0x10
0x400482:	sub	rax, 1
0x400486:	add	rax, 0x6c
0x40048a:	mov	edi, 0x10
0x40048f:	mov	edx, 0
0x400494:	div	rdi
0x400497:	imul	rax, rax, 0x10
0x40049b:	mov	rdx, rax
0x40049e:	and	rdx, 0xfffffffffffff000
0x4004a5:	mov	rsi, rsp
0x4004a8:	sub	rsi, rdx
0x4004ab:	mov	rdx, rsi
0x4004ae:	cmp	rsp, rdx
0x4004b1:	je	0x4004c5
<Block for 0x400429, 5 bytes>
0x400429:	cmp	rsp, rdx
0x40042c:	je	0x400440
<Block for 0x4004c5, 26 bytes>
0x4004c5:	mov	rdx, rax
0x4004c8:	and	edx, 0xfff
0x4004ce:	sub	rsp, rdx
0x4004d1:	mov	rdx, rax
0x4004d4:	and	edx, 0xfff
0x4004da:	test	rdx, rdx
0x4004dd:	je	0x4004ef
<Block for 0x4004b3, 18 bytes>
0x4004b3:	sub	rsp, 0x1000
0x4004ba:	or	qword ptr [rsp + 0xff8], 0
0x4004c3:	jmp	0x4004ae
<Block for 0x4004ef, 41 bytes>
0x4004ef:	mov	rax, rsp
0x4004f2:	add	rax, 0xf
0x4004f6:	shr	rax, 4
0x4004fa:	shl	rax, 4
0x4004fe:	mov	qword ptr [rbp - 0x78], rax
0x400502:	mov	rax, qword ptr [rbp - 0x80]
0x400506:	mov	edx, 0x31
0x40050b:	mov	esi, 0x41
0x400510:	mov	rdi, rax
0x400513:	call	0x500000
<Block for 0x4004df, 57 bytes>
0x4004df:	and	eax, 0xfff
0x4004e4:	sub	rax, 8
0x4004e8:	add	rax, rsp
0x4004eb:	or	qword ptr [rax], 0
0x4004ef:	mov	rax, rsp
0x4004f2:	add	rax, 0xf
0x4004f6:	shr	rax, 4
0x4004fa:	shl	rax, 4
0x4004fe:	mov	qword ptr [rbp - 0x78], rax
0x400502:	mov	rax, qword ptr [rbp - 0x80]
0x400506:	mov	edx, 0x31
0x40050b:	mov	esi, 0x41
0x400510:	mov	rdi, rax
0x400513:	call	0x500000
<Block for 0x4004ae, 5 bytes>
0x4004ae:	cmp	rsp, rdx
0x4004b1:	je	0x4004c5
<Block for 0x400518, 33 bytes>
0x400518:	mov	rax, qword ptr [rbp - 0x80]
0x40051c:	add	rax, 0x31
0x400520:	mov	byte ptr [rax], 0
0x400523:	mov	rax, qword ptr [rbp - 0x78]
0x400527:	mov	edx, 0x63
0x40052c:	mov	esi, 0x41
0x400531:	mov	rdi, rax
0x400534:	call	0x500000
<Block for 0x400539, 22 bytes>
0x400539:	mov	rax, qword ptr [rbp - 0x78]
0x40053d:	add	rax, 0x63
0x400541:	mov	byte ptr [rax], 0
0x400544:	mov	eax, dword ptr [rip + 0x96]
0x40054a:	cmp	eax, 5
0x40054d:	jne	0x40055a
<Block for 0x40054f, 33 bytes>
0x40054f:	mov	rax, qword ptr [rbp - 0x78]
0x400553:	mov	qword ptr [rbp - 0x88], rax
0x40055a:	lea	rax, [rbp - 0x70]
0x40055e:	mov	edx, 0x63
0x400563:	mov	esi, 0x43
0x400568:	mov	rdi, rax
0x40056b:	call	0x500000
<Block for 0x40055a, 22 bytes>
0x40055a:	lea	rax, [rbp - 0x70]
0x40055e:	mov	edx, 0x63
0x400563:	mov	esi, 0x43
0x400568:	mov	rdi, rax
0x40056b:	call	0x500000
<Block for 0x400570, 16 bytes>
0x400570:	mov	byte ptr [rbp - 0xd], 0
0x400574:	lea	rax, [rbp - 0x70]
0x400578:	mov	rdi, rax
0x40057b:	call	0x500008
<Block for 0x400580, 25 bytes>
0x400580:	mov	rdx, rax
0x400583:	mov	rcx, qword ptr [rbp - 0x88]
0x40058a:	lea	rax, [rbp - 0x70]
0x40058e:	mov	rsi, rcx
0x400591:	mov	rdi, rax
0x400594:	call	0x500010
<Block for 0x400599, 16 bytes>
0x400599:	mov	byte ptr [rbp - 0xd], 0
0x40059d:	lea	rax, [rbp - 0x70]
0x4005a1:	mov	rdi, rax
0x4005a4:	call	0x500018
<Block for 0x4005a9, 16 bytes>
0x4005a9:	nop	
0x4005aa:	mov	rax, qword ptr [rbp - 8]
0x4005ae:	xor	rax, qword ptr fs:[0x28]
0x4005b7:	je	0x4005be
<Block for 0x4005be, 2 bytes>
0x4005be:	leave	
0x4005bf:	ret	
<Block for 0x4005b9, 5 bytes>
0x4005b9:	call	0x500020
