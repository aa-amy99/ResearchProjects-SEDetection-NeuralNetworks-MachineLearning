<Block for 0x4001e6, 84 bytes>
0x4001e6:	endbr64	
0x4001ea:	push	rbp
0x4001eb:	mov	rbp, rsp
0x4001ee:	sub	rsp, 0x90
0x4001f5:	mov	rax, qword ptr fs:[0x28]
0x4001fe:	mov	qword ptr [rbp - 8], rax
0x400202:	xor	eax, eax
0x400204:	mov	eax, 0x10
0x400209:	sub	rax, 1
0x40020d:	add	rax, 0x3a
0x400211:	mov	ecx, 0x10
0x400216:	mov	edx, 0
0x40021b:	div	rcx
0x40021e:	imul	rax, rax, 0x10
0x400222:	mov	rdx, rax
0x400225:	and	rdx, 0xfffffffffffff000
0x40022c:	mov	rcx, rsp
0x40022f:	sub	rcx, rdx
0x400232:	mov	rdx, rcx
0x400235:	cmp	rsp, rdx
0x400238:	je	0x40024c
<Block for 0x40024c, 26 bytes>
0x40024c:	mov	rdx, rax
0x40024f:	and	edx, 0xfff
0x400255:	sub	rsp, rdx
0x400258:	mov	rdx, rax
0x40025b:	and	edx, 0xfff
0x400261:	test	rdx, rdx
0x400264:	je	0x400276
<Block for 0x40023a, 18 bytes>
0x40023a:	sub	rsp, 0x1000
0x400241:	or	qword ptr [rsp + 0xff8], 0
0x40024a:	jmp	0x400235
<Block for 0x400276, 73 bytes>
0x400276:	mov	rax, rsp
0x400279:	add	rax, 0xf
0x40027d:	shr	rax, 4
0x400281:	shl	rax, 4
0x400285:	mov	qword ptr [rbp - 0x80], rax
0x400289:	mov	eax, 0x10
0x40028e:	sub	rax, 1
0x400292:	add	rax, 0x6c
0x400296:	mov	ecx, 0x10
0x40029b:	mov	edx, 0
0x4002a0:	div	rcx
0x4002a3:	imul	rax, rax, 0x10
0x4002a7:	mov	rdx, rax
0x4002aa:	and	rdx, 0xfffffffffffff000
0x4002b1:	mov	rsi, rsp
0x4002b4:	sub	rsi, rdx
0x4002b7:	mov	rdx, rsi
0x4002ba:	cmp	rsp, rdx
0x4002bd:	je	0x4002d1
<Block for 0x400266, 89 bytes>
0x400266:	and	eax, 0xfff
0x40026b:	sub	rax, 8
0x40026f:	add	rax, rsp
0x400272:	or	qword ptr [rax], 0
0x400276:	mov	rax, rsp
0x400279:	add	rax, 0xf
0x40027d:	shr	rax, 4
0x400281:	shl	rax, 4
0x400285:	mov	qword ptr [rbp - 0x80], rax
0x400289:	mov	eax, 0x10
0x40028e:	sub	rax, 1
0x400292:	add	rax, 0x6c
0x400296:	mov	ecx, 0x10
0x40029b:	mov	edx, 0
0x4002a0:	div	rcx
0x4002a3:	imul	rax, rax, 0x10
0x4002a7:	mov	rdx, rax
0x4002aa:	and	rdx, 0xfffffffffffff000
0x4002b1:	mov	rsi, rsp
0x4002b4:	sub	rsi, rdx
0x4002b7:	mov	rdx, rsi
0x4002ba:	cmp	rsp, rdx
0x4002bd:	je	0x4002d1
<Block for 0x400235, 5 bytes>
0x400235:	cmp	rsp, rdx
0x400238:	je	0x40024c
<Block for 0x4002d1, 26 bytes>
0x4002d1:	mov	rdx, rax
0x4002d4:	and	edx, 0xfff
0x4002da:	sub	rsp, rdx
0x4002dd:	mov	rdx, rax
0x4002e0:	and	edx, 0xfff
0x4002e6:	test	rdx, rdx
0x4002e9:	je	0x4002fb
<Block for 0x4002bf, 18 bytes>
0x4002bf:	sub	rsp, 0x1000
0x4002c6:	or	qword ptr [rsp + 0xff8], 0
0x4002cf:	jmp	0x4002ba
<Block for 0x4002fb, 41 bytes>
0x4002fb:	mov	rax, rsp
0x4002fe:	add	rax, 0xf
0x400302:	shr	rax, 4
0x400306:	shl	rax, 4
0x40030a:	mov	qword ptr [rbp - 0x78], rax
0x40030e:	mov	rax, qword ptr [rbp - 0x80]
0x400312:	mov	edx, 0x31
0x400317:	mov	esi, 0x41
0x40031c:	mov	rdi, rax
0x40031f:	call	0x500000
<Block for 0x4002eb, 57 bytes>
0x4002eb:	and	eax, 0xfff
0x4002f0:	sub	rax, 8
0x4002f4:	add	rax, rsp
0x4002f7:	or	qword ptr [rax], 0
0x4002fb:	mov	rax, rsp
0x4002fe:	add	rax, 0xf
0x400302:	shr	rax, 4
0x400306:	shl	rax, 4
0x40030a:	mov	qword ptr [rbp - 0x78], rax
0x40030e:	mov	rax, qword ptr [rbp - 0x80]
0x400312:	mov	edx, 0x31
0x400317:	mov	esi, 0x41
0x40031c:	mov	rdi, rax
0x40031f:	call	0x500000
<Block for 0x4002ba, 5 bytes>
0x4002ba:	cmp	rsp, rdx
0x4002bd:	je	0x4002d1
<Block for 0x400324, 33 bytes>
0x400324:	mov	rax, qword ptr [rbp - 0x80]
0x400328:	add	rax, 0x31
0x40032c:	mov	byte ptr [rax], 0
0x40032f:	mov	rax, qword ptr [rbp - 0x78]
0x400333:	mov	edx, 0x63
0x400338:	mov	esi, 0x41
0x40033d:	mov	rdi, rax
0x400340:	call	0x500000
<Block for 0x400345, 22 bytes>
0x400345:	mov	rax, qword ptr [rbp - 0x78]
0x400349:	add	rax, 0x63
0x40034d:	mov	byte ptr [rax], 0
0x400350:	mov	eax, dword ptr [rip + 0x28a]
0x400356:	cmp	eax, 5
0x400359:	je	0x400369
<Block for 0x400369, 33 bytes>
0x400369:	mov	rax, qword ptr [rbp - 0x78]
0x40036d:	mov	qword ptr [rbp - 0x88], rax
0x400374:	lea	rax, [rbp - 0x70]
0x400378:	mov	edx, 0x63
0x40037d:	mov	esi, 0x43
0x400382:	mov	rdi, rax
0x400385:	call	0x500000
<Block for 0x40035b, 12 bytes>
0x40035b:	lea	rdi, [rip + 0x282]
0x400362:	call	0x500018
<Block for 0x40038a, 16 bytes>
0x40038a:	mov	byte ptr [rbp - 0xd], 0
0x40038e:	lea	rax, [rbp - 0x70]
0x400392:	mov	rdi, rax
0x400395:	call	0x500008
<Block for 0x400367, 2 bytes>
0x400367:	jmp	0x400374
<Block for 0x40039a, 25 bytes>
0x40039a:	mov	rdx, rax
0x40039d:	mov	rcx, qword ptr [rbp - 0x88]
0x4003a4:	lea	rax, [rbp - 0x70]
0x4003a8:	mov	rsi, rcx
0x4003ab:	mov	rdi, rax
0x4003ae:	call	0x500010
<Block for 0x400374, 22 bytes>
0x400374:	lea	rax, [rbp - 0x70]
0x400378:	mov	edx, 0x63
0x40037d:	mov	esi, 0x43
0x400382:	mov	rdi, rax
0x400385:	call	0x500000
<Block for 0x4003b3, 16 bytes>
0x4003b3:	mov	byte ptr [rbp - 0xd], 0
0x4003b7:	lea	rax, [rbp - 0x70]
0x4003bb:	mov	rdi, rax
0x4003be:	call	0x500018
<Block for 0x4003c3, 16 bytes>
0x4003c3:	nop	
0x4003c4:	mov	rax, qword ptr [rbp - 8]
0x4003c8:	xor	rax, qword ptr fs:[0x28]
0x4003d1:	je	0x4003d8
<Block for 0x4003d8, 2 bytes>
0x4003d8:	leave	
0x4003d9:	ret	
<Block for 0x4003d3, 5 bytes>
0x4003d3:	call	0x500020
