<Block for 0x400211, 148 bytes>
0x400211:	endbr64	
0x400215:	push	rbp
0x400216:	mov	rbp, rsp
0x400219:	add	rsp, -0x80
0x40021d:	mov	rax, qword ptr fs:[0x28]
0x400226:	mov	qword ptr [rbp - 8], rax
0x40022a:	xor	eax, eax
0x40022c:	mov	qword ptr [rbp - 0x70], 0
0x400234:	mov	qword ptr [rbp - 0x68], 0
0x40023c:	mov	qword ptr [rbp - 0x60], 0
0x400244:	mov	qword ptr [rbp - 0x58], 0
0x40024c:	mov	qword ptr [rbp - 0x50], 0
0x400254:	mov	qword ptr [rbp - 0x48], 0
0x40025c:	mov	qword ptr [rbp - 0x40], 0
0x400264:	mov	qword ptr [rbp - 0x38], 0
0x40026c:	mov	qword ptr [rbp - 0x30], 0
0x400274:	mov	qword ptr [rbp - 0x28], 0
0x40027c:	mov	qword ptr [rbp - 0x20], 0
0x400284:	mov	qword ptr [rbp - 0x18], 0
0x40028c:	mov	dword ptr [rbp - 0x10], 0
0x400293:	lea	rax, [rbp - 0x70]
0x400297:	mov	qword ptr [rbp - 0x80], rax
0x40029b:	mov	eax, 0
0x4002a0:	call	0x400000
<Block for 0x4002a5, 4 bytes>
0x4002a5:	test	eax, eax
0x4002a7:	je	0x4002c8
<Block for 0x4002c8, 19 bytes>
0x4002c8:	mov	rax, qword ptr [rbp - 0x80]
0x4002cc:	lea	rsi, [rip + 0x55]
0x4002d3:	mov	rdi, rax
0x4002d6:	call	0x500000
<Block for 0x4002a9, 50 bytes>
0x4002a9:	mov	rax, qword ptr [rbp - 0x80]
0x4002ad:	movabs	rdx, 0x6e69622f7273752f
0x4002b7:	movabs	rcx, 0x616c2d20736c2f
0x4002c1:	mov	qword ptr [rax], rdx
0x4002c4:	mov	qword ptr [rax + 8], rcx
0x4002c8:	mov	rax, qword ptr [rbp - 0x80]
0x4002cc:	lea	rsi, [rip + 0x55]
0x4002d3:	mov	rdi, rax
0x4002d6:	call	0x500000
<Block for 0x4002db, 11 bytes>
0x4002db:	mov	qword ptr [rbp - 0x78], rax
0x4002df:	cmp	qword ptr [rbp - 0x78], 0
0x4002e4:	je	0x4002f2
<Block for 0x4002f2, 16 bytes>
0x4002f2:	nop	
0x4002f3:	mov	rax, qword ptr [rbp - 8]
0x4002f7:	xor	rax, qword ptr fs:[0x28]
0x400300:	je	0x400307
<Block for 0x4002e6, 12 bytes>
0x4002e6:	mov	rax, qword ptr [rbp - 0x78]
0x4002ea:	mov	rdi, rax
0x4002ed:	call	0x500008
<Block for 0x400307, 2 bytes>
0x400307:	leave	
0x400308:	ret	
<Block for 0x400302, 5 bytes>
0x400302:	call	0x500010
