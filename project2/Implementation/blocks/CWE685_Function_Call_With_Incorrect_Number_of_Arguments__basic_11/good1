<Block for 0x40006b, 37 bytes>
0x40006b:	endbr64	
0x40006f:	push	rbp
0x400070:	mov	rbp, rsp
0x400073:	sub	rsp, 0x70
0x400077:	mov	rax, qword ptr fs:[0x28]
0x400080:	mov	qword ptr [rbp - 8], rax
0x400084:	xor	eax, eax
0x400086:	mov	eax, 0
0x40008b:	call	0x500020
<Block for 0x400090, 4 bytes>
0x400090:	test	eax, eax
0x400092:	je	0x4000a2
<Block for 0x4000a2, 38 bytes>
0x4000a2:	lea	rax, [rbp - 0x70]
0x4000a6:	lea	rcx, [rip + 0xcf]
0x4000ad:	lea	rdx, [rip + 0xc8]
0x4000b4:	lea	rsi, [rip + 0xc5]
0x4000bb:	mov	rdi, rax
0x4000be:	mov	eax, 0
0x4000c3:	call	0x500008
<Block for 0x400094, 12 bytes>
0x400094:	lea	rdi, [rip + 0xeb]
0x40009b:	call	0x500010
<Block for 0x4000c8, 12 bytes>
0x4000c8:	lea	rax, [rbp - 0x70]
0x4000cc:	mov	rdi, rax
0x4000cf:	call	0x500010
<Block for 0x4000a0, 2 bytes>
0x4000a0:	jmp	0x4000d4
<Block for 0x4000d4, 16 bytes>
0x4000d4:	nop	
0x4000d5:	mov	rax, qword ptr [rbp - 8]
0x4000d9:	xor	rax, qword ptr fs:[0x28]
0x4000e2:	je	0x4000e9
<Block for 0x4000e9, 2 bytes>
0x4000e9:	leave	
0x4000ea:	ret	
<Block for 0x4000e4, 5 bytes>
0x4000e4:	call	0x500018
