<Block for 0x4001de, 37 bytes>
0x4001de:	endbr64	
0x4001e2:	push	rbp
0x4001e3:	mov	rbp, rsp
0x4001e6:	sub	rsp, 0x40
0x4001ea:	mov	rax, qword ptr fs:[0x28]
0x4001f3:	mov	qword ptr [rbp - 8], rax
0x4001f7:	xor	eax, eax
0x4001f9:	mov	eax, 0
0x4001fe:	call	0x500000
<Block for 0x400203, 8 bytes>
0x400203:	test	eax, eax
0x400205:	je	0x4002fa
<Block for 0x4002fa, 54 bytes>
0x4002fa:	mov	eax, 0x10
0x4002ff:	sub	rax, 1
0x400303:	add	rax, 0x10
0x400307:	mov	esi, 0x10
0x40030c:	mov	edx, 0
0x400311:	div	rsi
0x400314:	imul	rax, rax, 0x10
0x400318:	mov	rdx, rax
0x40031b:	and	rdx, 0xfffffffffffff000
0x400322:	mov	rsi, rsp
0x400325:	sub	rsi, rdx
0x400328:	mov	rdx, rsi
0x40032b:	cmp	rsp, rdx
0x40032e:	je	0x400342
<Block for 0x40020b, 54 bytes>
0x40020b:	mov	eax, 0x10
0x400210:	sub	rax, 1
0x400214:	add	rax, 0x10
0x400218:	mov	ecx, 0x10
0x40021d:	mov	edx, 0
0x400222:	div	rcx
0x400225:	imul	rax, rax, 0x10
0x400229:	mov	rdx, rax
0x40022c:	and	rdx, 0xfffffffffffff000
0x400233:	mov	rcx, rsp
0x400236:	sub	rcx, rdx
0x400239:	mov	rdx, rcx
0x40023c:	cmp	rsp, rdx
0x40023f:	je	0x400253
<Block for 0x400342, 26 bytes>
0x400342:	mov	rdx, rax
0x400345:	and	edx, 0xfff
0x40034b:	sub	rsp, rdx
0x40034e:	mov	rdx, rax
0x400351:	and	edx, 0xfff
0x400357:	test	rdx, rdx
0x40035a:	je	0x40036c
<Block for 0x400330, 18 bytes>
0x400330:	sub	rsp, 0x1000
0x400337:	or	qword ptr [rsp + 0xff8], 0
0x400340:	jmp	0x40032b
<Block for 0x400253, 26 bytes>
0x400253:	mov	rdx, rax
0x400256:	and	edx, 0xfff
0x40025c:	sub	rsp, rdx
0x40025f:	mov	rdx, rax
0x400262:	and	edx, 0xfff
0x400268:	test	rdx, rdx
0x40026b:	je	0x40027d
<Block for 0x400241, 18 bytes>
0x400241:	sub	rsp, 0x1000
0x400248:	or	qword ptr [rsp + 0xff8], 0
0x400251:	jmp	0x40023c
<Block for 0x40036c, 29 bytes>
0x40036c:	mov	rax, rsp
0x40036f:	add	rax, 0xf
0x400373:	shr	rax, 4
0x400377:	shl	rax, 4
0x40037b:	mov	qword ptr [rbp - 0x38], rax
0x40037f:	mov	edi, 8
0x400384:	call	0x500010
<Block for 0x40035c, 45 bytes>
0x40035c:	and	eax, 0xfff
0x400361:	sub	rax, 8
0x400365:	add	rax, rsp
0x400368:	or	qword ptr [rax], 0
0x40036c:	mov	rax, rsp
0x40036f:	add	rax, 0xf
0x400373:	shr	rax, 4
0x400377:	shl	rax, 4
0x40037b:	mov	qword ptr [rbp - 0x38], rax
0x40037f:	mov	edi, 8
0x400384:	call	0x500010
<Block for 0x40032b, 5 bytes>
0x40032b:	cmp	rsp, rdx
0x40032e:	je	0x400342
<Block for 0x40027d, 29 bytes>
0x40027d:	mov	rax, rsp
0x400280:	add	rax, 0xf
0x400284:	shr	rax, 4
0x400288:	shl	rax, 4
0x40028c:	mov	qword ptr [rbp - 0x20], rax
0x400290:	mov	edi, 8
0x400295:	call	0x500010
<Block for 0x40026d, 45 bytes>
0x40026d:	and	eax, 0xfff
0x400272:	sub	rax, 8
0x400276:	add	rax, rsp
0x400279:	or	qword ptr [rax], 0
0x40027d:	mov	rax, rsp
0x400280:	add	rax, 0xf
0x400284:	shr	rax, 4
0x400288:	shl	rax, 4
0x40028c:	mov	qword ptr [rbp - 0x20], rax
0x400290:	mov	edi, 8
0x400295:	call	0x500010
<Block for 0x40023c, 5 bytes>
0x40023c:	cmp	rsp, rdx
0x40023f:	je	0x400253
<Block for 0x400389, 11 bytes>
0x400389:	mov	qword ptr [rbp - 0x30], rax
0x40038d:	cmp	qword ptr [rbp - 0x30], 0
0x400392:	jne	0x40039e
<Block for 0x40029a, 11 bytes>
0x40029a:	mov	qword ptr [rbp - 0x18], rax
0x40029e:	cmp	qword ptr [rbp - 0x18], 0
0x4002a3:	jne	0x4002af
<Block for 0x400394, 10 bytes>
0x400394:	mov	edi, 0xffffffff
0x400399:	call	0x500018
<Block for 0x40039e, 56 bytes>
0x40039e:	mov	rax, qword ptr [rbp - 0x30]
0x4003a2:	mov	dword ptr [rax], 5
0x4003a8:	mov	rax, qword ptr [rbp - 0x30]
0x4003ac:	mov	dword ptr [rax + 4], 6
0x4003b3:	mov	rax, qword ptr [rbp - 0x38]
0x4003b7:	mov	rdx, qword ptr [rbp - 0x30]
0x4003bb:	mov	qword ptr [rax], rdx
0x4003be:	mov	rax, qword ptr [rbp - 0x38]
0x4003c2:	mov	rax, qword ptr [rax]
0x4003c5:	mov	qword ptr [rbp - 0x28], rax
0x4003c9:	mov	rax, qword ptr [rbp - 0x28]
0x4003cd:	mov	eax, dword ptr [rax]
0x4003cf:	mov	edi, eax
0x4003d1:	call	0x500008
<Block for 0x4002a5, 10 bytes>
0x4002a5:	mov	edi, 0xffffffff
0x4002aa:	call	0x500018
<Block for 0x4002af, 56 bytes>
0x4002af:	mov	rax, qword ptr [rbp - 0x18]
0x4002b3:	mov	dword ptr [rax], 5
0x4002b9:	mov	rax, qword ptr [rbp - 0x18]
0x4002bd:	mov	dword ptr [rax + 4], 6
0x4002c4:	mov	rax, qword ptr [rbp - 0x20]
0x4002c8:	mov	rdx, qword ptr [rbp - 0x18]
0x4002cc:	mov	qword ptr [rax], rdx
0x4002cf:	mov	rax, qword ptr [rbp - 0x20]
0x4002d3:	mov	rax, qword ptr [rax]
0x4002d6:	mov	qword ptr [rbp - 0x10], rax
0x4002da:	mov	rax, qword ptr [rbp - 0x10]
0x4002de:	mov	eax, dword ptr [rax]
0x4002e0:	mov	edi, eax
0x4002e2:	call	0x500008
<Block for 0x4003d6, 14 bytes>
0x4003d6:	mov	rax, qword ptr [rbp - 0x28]
0x4003da:	mov	eax, dword ptr [rax + 4]
0x4003dd:	mov	edi, eax
0x4003df:	call	0x500008
<Block for 0x4002e7, 14 bytes>
0x4002e7:	mov	rax, qword ptr [rbp - 0x10]
0x4002eb:	mov	eax, dword ptr [rax + 4]
0x4002ee:	mov	edi, eax
0x4002f0:	call	0x500008
<Block for 0x4003e4, 16 bytes>
0x4003e4:	nop	
0x4003e5:	mov	rax, qword ptr [rbp - 8]
0x4003e9:	xor	rax, qword ptr fs:[0x28]
0x4003f2:	je	0x4003f9
<Block for 0x4002f5, 5 bytes>
0x4002f5:	jmp	0x4003e4
<Block for 0x4003f9, 2 bytes>
0x4003f9:	leave	
0x4003fa:	ret	
<Block for 0x4003f4, 5 bytes>
0x4003f4:	call	0x500020
