<Block for 0x400280, 81 bytes>
0x400280:	endbr64	
0x400284:	push	rbp
0x400285:	mov	rbp, rsp
0x400288:	add	rsp, -0x80
0x40028c:	mov	rax, qword ptr fs:[0x28]
0x400295:	mov	qword ptr [rbp - 8], rax
0x400299:	xor	eax, eax
0x40029b:	mov	eax, 0x10
0x4002a0:	sub	rax, 1
0x4002a4:	add	rax, 0x6c
0x4002a8:	mov	esi, 0x10
0x4002ad:	mov	edx, 0
0x4002b2:	div	rsi
0x4002b5:	imul	rax, rax, 0x10
0x4002b9:	mov	rdx, rax
0x4002bc:	and	rdx, 0xfffffffffffff000
0x4002c3:	mov	rcx, rsp
0x4002c6:	sub	rcx, rdx
0x4002c9:	mov	rdx, rcx
0x4002cc:	cmp	rsp, rdx
0x4002cf:	je	0x4002e3
<Block for 0x4002e3, 26 bytes>
0x4002e3:	mov	rdx, rax
0x4002e6:	and	edx, 0xfff
0x4002ec:	sub	rsp, rdx
0x4002ef:	mov	rdx, rax
0x4002f2:	and	edx, 0xfff
0x4002f8:	test	rdx, rdx
0x4002fb:	je	0x40030d
<Block for 0x4002d1, 18 bytes>
0x4002d1:	sub	rsp, 0x1000
0x4002d8:	or	qword ptr [rsp + 0xff8], 0
0x4002e1:	jmp	0x4002cc
<Block for 0x40030d, 41 bytes>
0x40030d:	mov	rax, rsp
0x400310:	add	rax, 0xf
0x400314:	shr	rax, 4
0x400318:	shl	rax, 4
0x40031c:	mov	qword ptr [rbp - 0x78], rax
0x400320:	mov	rax, qword ptr [rbp - 0x78]
0x400324:	mov	edx, 0x63
0x400329:	mov	esi, 0x41
0x40032e:	mov	rdi, rax
0x400331:	call	0x500000
<Block for 0x4002fd, 57 bytes>
0x4002fd:	and	eax, 0xfff
0x400302:	sub	rax, 8
0x400306:	add	rax, rsp
0x400309:	or	qword ptr [rax], 0
0x40030d:	mov	rax, rsp
0x400310:	add	rax, 0xf
0x400314:	shr	rax, 4
0x400318:	shl	rax, 4
0x40031c:	mov	qword ptr [rbp - 0x78], rax
0x400320:	mov	rax, qword ptr [rbp - 0x78]
0x400324:	mov	edx, 0x63
0x400329:	mov	esi, 0x41
0x40032e:	mov	rdi, rax
0x400331:	call	0x500000
<Block for 0x4002cc, 5 bytes>
0x4002cc:	cmp	rsp, rdx
0x4002cf:	je	0x4002e3
<Block for 0x400336, 21 bytes>
0x400336:	mov	rax, qword ptr [rbp - 0x78]
0x40033a:	add	rax, 0x63
0x40033e:	mov	byte ptr [rax], 0
0x400341:	mov	eax, 0
0x400346:	call	0x500008
<Block for 0x40034b, 4 bytes>
0x40034b:	test	eax, eax
0x40034d:	je	0x400357
<Block for 0x400357, 22 bytes>
0x400357:	lea	rax, [rbp - 0x70]
0x40035b:	mov	edx, 0x63
0x400360:	mov	esi, 0x43
0x400365:	mov	rdi, rax
0x400368:	call	0x500000
<Block for 0x40034f, 30 bytes>
0x40034f:	mov	rax, qword ptr [rbp - 0x78]
0x400353:	mov	qword ptr [rbp - 0x80], rax
0x400357:	lea	rax, [rbp - 0x70]
0x40035b:	mov	edx, 0x63
0x400360:	mov	esi, 0x43
0x400365:	mov	rdi, rax
0x400368:	call	0x500000
<Block for 0x40036d, 28 bytes>
0x40036d:	mov	byte ptr [rbp - 0xd], 0
0x400371:	lea	rcx, [rbp - 0x70]
0x400375:	mov	rax, qword ptr [rbp - 0x80]
0x400379:	mov	edx, 0x63
0x40037e:	mov	rsi, rcx
0x400381:	mov	rdi, rax
0x400384:	call	0x500010
<Block for 0x400389, 23 bytes>
0x400389:	mov	rax, qword ptr [rbp - 0x80]
0x40038d:	add	rax, 0x63
0x400391:	mov	byte ptr [rax], 0
0x400394:	mov	rax, qword ptr [rbp - 0x80]
0x400398:	mov	rdi, rax
0x40039b:	call	0x500018
<Block for 0x4003a0, 16 bytes>
0x4003a0:	nop	
0x4003a1:	mov	rax, qword ptr [rbp - 8]
0x4003a5:	xor	rax, qword ptr fs:[0x28]
0x4003ae:	je	0x4003b5
<Block for 0x4003b5, 2 bytes>
0x4003b5:	leave	
0x4003b6:	ret	
<Block for 0x4003b0, 5 bytes>
0x4003b0:	call	0x500020
