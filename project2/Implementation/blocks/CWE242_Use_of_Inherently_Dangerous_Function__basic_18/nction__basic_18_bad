<Block for 0x400000, 49 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	nop	
0x40001c:	endbr64	
0x400020:	lea	rax, [rbp - 0x12]
0x400024:	mov	rdi, rax
0x400027:	mov	eax, 0
0x40002c:	call	0x500000
<Block for 0x400031, 13 bytes>
0x400031:	cdqe	
0x400033:	mov	qword ptr [rbp - 0x20], rax
0x400037:	cmp	qword ptr [rbp - 0x20], 0
0x40003c:	jne	0x400054
<Block for 0x40003e, 12 bytes>
0x40003e:	lea	rdi, [rip + 0xcb]
0x400045:	call	0x500008
<Block for 0x400054, 16 bytes>
0x400054:	mov	byte ptr [rbp - 9], 0
0x400058:	lea	rax, [rbp - 0x12]
0x40005c:	mov	rdi, rax
0x40005f:	call	0x500008
<Block for 0x40004a, 10 bytes>
0x40004a:	mov	edi, 1
0x40004f:	call	0x500010
<Block for 0x400064, 16 bytes>
0x400064:	nop	
0x400065:	mov	rax, qword ptr [rbp - 8]
0x400069:	xor	rax, qword ptr fs:[0x28]
0x400072:	je	0x400079
<Block for 0x400079, 2 bytes>
0x400079:	leave	
0x40007a:	ret	
<Block for 0x400074, 5 bytes>
0x400074:	call	0x500018
