<Block for 0x40021c, 84 bytes>
0x40021c:	endbr64	
0x400220:	push	rbp
0x400221:	mov	rbp, rsp
0x400224:	sub	rsp, 0xa0
0x40022b:	mov	rax, qword ptr fs:[0x28]
0x400234:	mov	qword ptr [rbp - 8], rax
0x400238:	xor	eax, eax
0x40023a:	mov	eax, 0x10
0x40023f:	sub	rax, 1
0x400243:	add	rax, 0x3a
0x400247:	mov	ecx, 0x10
0x40024c:	mov	edx, 0
0x400251:	div	rcx
0x400254:	imul	rax, rax, 0x10
0x400258:	mov	rdx, rax
0x40025b:	and	rdx, 0xfffffffffffff000
0x400262:	mov	rcx, rsp
0x400265:	sub	rcx, rdx
0x400268:	mov	rdx, rcx
0x40026b:	cmp	rsp, rdx
0x40026e:	je	0x400282
<Block for 0x400282, 26 bytes>
0x400282:	mov	rdx, rax
0x400285:	and	edx, 0xfff
0x40028b:	sub	rsp, rdx
0x40028e:	mov	rdx, rax
0x400291:	and	edx, 0xfff
0x400297:	test	rdx, rdx
0x40029a:	je	0x4002ac
<Block for 0x400270, 18 bytes>
0x400270:	sub	rsp, 0x1000
0x400277:	or	qword ptr [rsp + 0xff8], 0
0x400280:	jmp	0x40026b
<Block for 0x4002ac, 76 bytes>
0x4002ac:	mov	rax, rsp
0x4002af:	add	rax, 0xf
0x4002b3:	shr	rax, 4
0x4002b7:	shl	rax, 4
0x4002bb:	mov	qword ptr [rbp - 0x90], rax
0x4002c2:	mov	eax, 0x10
0x4002c7:	sub	rax, 1
0x4002cb:	add	rax, 0x6c
0x4002cf:	mov	edi, 0x10
0x4002d4:	mov	edx, 0
0x4002d9:	div	rdi
0x4002dc:	imul	rax, rax, 0x10
0x4002e0:	mov	rdx, rax
0x4002e3:	and	rdx, 0xfffffffffffff000
0x4002ea:	mov	rsi, rsp
0x4002ed:	sub	rsi, rdx
0x4002f0:	mov	rdx, rsi
0x4002f3:	cmp	rsp, rdx
0x4002f6:	je	0x40030a
<Block for 0x40029c, 92 bytes>
0x40029c:	and	eax, 0xfff
0x4002a1:	sub	rax, 8
0x4002a5:	add	rax, rsp
0x4002a8:	or	qword ptr [rax], 0
0x4002ac:	mov	rax, rsp
0x4002af:	add	rax, 0xf
0x4002b3:	shr	rax, 4
0x4002b7:	shl	rax, 4
0x4002bb:	mov	qword ptr [rbp - 0x90], rax
0x4002c2:	mov	eax, 0x10
0x4002c7:	sub	rax, 1
0x4002cb:	add	rax, 0x6c
0x4002cf:	mov	edi, 0x10
0x4002d4:	mov	edx, 0
0x4002d9:	div	rdi
0x4002dc:	imul	rax, rax, 0x10
0x4002e0:	mov	rdx, rax
0x4002e3:	and	rdx, 0xfffffffffffff000
0x4002ea:	mov	rsi, rsp
0x4002ed:	sub	rsi, rdx
0x4002f0:	mov	rdx, rsi
0x4002f3:	cmp	rsp, rdx
0x4002f6:	je	0x40030a
<Block for 0x40026b, 5 bytes>
0x40026b:	cmp	rsp, rdx
0x40026e:	je	0x400282
<Block for 0x40030a, 26 bytes>
0x40030a:	mov	rdx, rax
0x40030d:	and	edx, 0xfff
0x400313:	sub	rsp, rdx
0x400316:	mov	rdx, rax
0x400319:	and	edx, 0xfff
0x40031f:	test	rdx, rdx
0x400322:	je	0x400334
<Block for 0x4002f8, 18 bytes>
0x4002f8:	sub	rsp, 0x1000
0x4002ff:	or	qword ptr [rsp + 0xff8], 0
0x400308:	jmp	0x4002f3
<Block for 0x400334, 47 bytes>
0x400334:	mov	rax, rsp
0x400337:	add	rax, 0xf
0x40033b:	shr	rax, 4
0x40033f:	shl	rax, 4
0x400343:	mov	qword ptr [rbp - 0x88], rax
0x40034a:	mov	rax, qword ptr [rbp - 0x90]
0x400351:	mov	edx, 0x31
0x400356:	mov	esi, 0x41
0x40035b:	mov	rdi, rax
0x40035e:	call	0x500000
<Block for 0x400324, 63 bytes>
0x400324:	and	eax, 0xfff
0x400329:	sub	rax, 8
0x40032d:	add	rax, rsp
0x400330:	or	qword ptr [rax], 0
0x400334:	mov	rax, rsp
0x400337:	add	rax, 0xf
0x40033b:	shr	rax, 4
0x40033f:	shl	rax, 4
0x400343:	mov	qword ptr [rbp - 0x88], rax
0x40034a:	mov	rax, qword ptr [rbp - 0x90]
0x400351:	mov	edx, 0x31
0x400356:	mov	esi, 0x41
0x40035b:	mov	rdi, rax
0x40035e:	call	0x500000
<Block for 0x4002f3, 5 bytes>
0x4002f3:	cmp	rsp, rdx
0x4002f6:	je	0x40030a
<Block for 0x400363, 39 bytes>
0x400363:	mov	rax, qword ptr [rbp - 0x90]
0x40036a:	add	rax, 0x31
0x40036e:	mov	byte ptr [rax], 0
0x400371:	mov	rax, qword ptr [rbp - 0x88]
0x400378:	mov	edx, 0x63
0x40037d:	mov	esi, 0x41
0x400382:	mov	rdi, rax
0x400385:	call	0x500000
<Block for 0x40038a, 48 bytes>
0x40038a:	mov	rax, qword ptr [rbp - 0x88]
0x400391:	add	rax, 0x63
0x400395:	mov	byte ptr [rax], 0
0x400398:	mov	rax, qword ptr [rbp - 0x88]
0x40039f:	mov	qword ptr [rbp - 0x80], rax
0x4003a3:	nop	
0x4003a4:	lea	rax, [rbp - 0x70]
0x4003a8:	mov	edx, 0x63
0x4003ad:	mov	esi, 0x43
0x4003b2:	mov	rdi, rax
0x4003b5:	call	0x500000
<Block for 0x4003ba, 16 bytes>
0x4003ba:	mov	byte ptr [rbp - 0xd], 0
0x4003be:	lea	rax, [rbp - 0x70]
0x4003c2:	mov	rdi, rax
0x4003c5:	call	0x500008
<Block for 0x4003ca, 17 bytes>
0x4003ca:	mov	qword ptr [rbp - 0x78], rax
0x4003ce:	mov	qword ptr [rbp - 0x98], 0
0x4003d9:	jmp	0x400404
<Block for 0x400404, 13 bytes>
0x400404:	mov	rax, qword ptr [rbp - 0x98]
0x40040b:	cmp	rax, qword ptr [rbp - 0x78]
0x40040f:	jb	0x4003db
<Block for 0x4003db, 54 bytes>
0x4003db:	mov	rdx, qword ptr [rbp - 0x80]
0x4003df:	mov	rax, qword ptr [rbp - 0x98]
0x4003e6:	add	rax, rdx
0x4003e9:	movzx	eax, byte ptr [rax]
0x4003ec:	lea	rcx, [rbp - 0x70]
0x4003f0:	mov	rdx, qword ptr [rbp - 0x98]
0x4003f7:	add	rdx, rcx
0x4003fa:	mov	byte ptr [rdx], al
0x4003fc:	add	qword ptr [rbp - 0x98], 1
0x400404:	mov	rax, qword ptr [rbp - 0x98]
0x40040b:	cmp	rax, qword ptr [rbp - 0x78]
0x40040f:	jb	0x4003db
<Block for 0x400411, 16 bytes>
0x400411:	mov	byte ptr [rbp - 0xd], 0
0x400415:	lea	rax, [rbp - 0x70]
0x400419:	mov	rdi, rax
0x40041c:	call	0x500010
<Block for 0x400421, 16 bytes>
0x400421:	nop	
0x400422:	mov	rax, qword ptr [rbp - 8]
0x400426:	xor	rax, qword ptr fs:[0x28]
0x40042f:	je	0x400436
<Block for 0x400436, 2 bytes>
0x400436:	leave	
0x400437:	ret	
<Block for 0x400431, 5 bytes>
0x400431:	call	0x500018
