<Block for 0x400000, 22 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	r13
0x40000a:	push	r12
0x40000c:	push	rbx
0x40000d:	sub	rsp, 0x18
0x400011:	call	0x500000
<Block for 0x400016, 12 bytes>
0x400016:	and	eax, 1
0x400019:	test	eax, eax
0x40001b:	sete	al
0x40001e:	test	al, al
0x400020:	je	0x400057
<Block for 0x400057, 5 bytes>
0x400057:	call	0x500000
<Block for 0x400022, 10 bytes>
0x400022:	mov	edi, 0x10
0x400027:	call	0x500008
<Block for 0x40005c, 12 bytes>
0x40005c:	and	eax, 1
0x40005f:	test	eax, eax
0x400061:	sete	al
0x400064:	test	al, al
0x400066:	je	0x40009d
<Block for 0x40002c, 18 bytes>
0x40002c:	mov	rbx, rax
0x40002f:	lea	rsi, [rip + 0x43e]
0x400036:	mov	rdi, rbx
0x400039:	call	0x500010
<Block for 0x40009d, 12 bytes>
0x40009d:	lea	rdi, [rip + 0x3da]
0x4000a4:	call	0x500058
<Block for 0x400068, 10 bytes>
0x400068:	mov	edi, 0x10
0x40006d:	call	0x500008
<Block for 0x40003e, 25 bytes>
0x40003e:	mov	rax, qword ptr [rip + 0xfffdb]
0x400045:	mov	rdx, rax
0x400048:	lea	rsi, [rip + 0xfffd9]
0x40004f:	mov	rdi, rbx
0x400052:	call	0x500030
<Block for 0x4000a9, 5 bytes>
0x4000a9:	jmp	0x400167
<Block for 0x400072, 18 bytes>
0x400072:	mov	rbx, rax
0x400075:	lea	rsi, [rip + 0x3fd]
0x40007c:	mov	rdi, rbx
0x40007f:	call	0x500038
<Block for 0x400167, 11 bytes>
0x400167:	add	rsp, 0x18
0x40016b:	pop	rbx
0x40016c:	pop	r12
0x40016e:	pop	r13
0x400170:	pop	rbp
0x400171:	ret	
<Block for 0x400084, 25 bytes>
0x400084:	mov	rax, qword ptr [rip + 0xfffbd]
0x40008b:	mov	rdx, rax
0x40008e:	lea	rsi, [rip + 0xfffbb]
0x400095:	mov	rdi, rbx
0x400098:	call	0x500030
