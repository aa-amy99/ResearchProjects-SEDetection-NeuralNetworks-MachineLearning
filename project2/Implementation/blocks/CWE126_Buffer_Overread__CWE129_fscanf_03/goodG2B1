<Block for 0x4001ff, 87 bytes>
0x4001ff:	endbr64	
0x400203:	push	rbp
0x400204:	mov	rbp, rsp
0x400207:	sub	rsp, 0x40
0x40020b:	mov	rax, qword ptr fs:[0x28]
0x400214:	mov	qword ptr [rbp - 8], rax
0x400218:	xor	eax, eax
0x40021a:	mov	dword ptr [rbp - 0x34], 0xffffffff
0x400221:	mov	dword ptr [rbp - 0x34], 7
0x400228:	mov	qword ptr [rbp - 0x30], 0
0x400230:	mov	qword ptr [rbp - 0x28], 0
0x400238:	mov	qword ptr [rbp - 0x20], 0
0x400240:	mov	qword ptr [rbp - 0x18], 0
0x400248:	mov	qword ptr [rbp - 0x10], 0
0x400250:	cmp	dword ptr [rbp - 0x34], 0
0x400254:	js	0x400268
<Block for 0x400268, 12 bytes>
0x400268:	lea	rdi, [rip + 0xe9]
0x40026f:	call	0x500018
<Block for 0x400256, 16 bytes>
0x400256:	mov	eax, dword ptr [rbp - 0x34]
0x400259:	cdqe	
0x40025b:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x40025f:	mov	edi, eax
0x400261:	call	0x500010
<Block for 0x400274, 16 bytes>
0x400274:	nop	
0x400275:	mov	rax, qword ptr [rbp - 8]
0x400279:	xor	rax, qword ptr fs:[0x28]
0x400282:	je	0x400289
<Block for 0x400266, 2 bytes>
0x400266:	jmp	0x400274
<Block for 0x400289, 2 bytes>
0x400289:	leave	
0x40028a:	ret	
<Block for 0x400284, 5 bytes>
0x400284:	call	0x500020
