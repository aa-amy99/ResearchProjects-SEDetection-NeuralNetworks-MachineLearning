<Block for 0x40008a, 41 bytes>
0x40008a:	endbr64	
0x40008e:	push	rbp
0x40008f:	mov	rbp, rsp
0x400092:	sub	rsp, 0x110
0x400099:	mov	rax, qword ptr fs:[0x28]
0x4000a2:	mov	qword ptr [rbp - 8], rax
0x4000a6:	xor	eax, eax
0x4000a8:	mov	eax, dword ptr [rip + 0x12e]
0x4000ae:	cmp	eax, 5
0x4000b1:	je	0x4000c1
<Block for 0x4000c1, 25 bytes>
0x4000c1:	lea	rax, [rbp - 0xa0]
0x4000c8:	mov	edx, 0x95
0x4000cd:	mov	esi, 0x41
0x4000d2:	mov	rdi, rax
0x4000d5:	call	0x500000
<Block for 0x4000b3, 12 bytes>
0x4000b3:	lea	rdi, [rip + 0x126]
0x4000ba:	call	0x500010
<Block for 0x4000da, 34 bytes>
0x4000da:	mov	byte ptr [rbp - 0xb], 0
0x4000de:	lea	rcx, [rbp - 0xa0]
0x4000e5:	lea	rax, [rbp - 0x110]
0x4000ec:	mov	edx, 0x63
0x4000f1:	mov	rsi, rcx
0x4000f4:	mov	rdi, rax
0x4000f7:	call	0x500008
<Block for 0x4000bf, 2 bytes>
0x4000bf:	jmp	0x400112
<Block for 0x4000fc, 22 bytes>
0x4000fc:	mov	byte ptr [rbp - 0xad], 0
0x400103:	lea	rax, [rbp - 0x110]
0x40010a:	mov	rdi, rax
0x40010d:	call	0x500010
<Block for 0x400112, 16 bytes>
0x400112:	nop	
0x400113:	mov	rax, qword ptr [rbp - 8]
0x400117:	xor	rax, qword ptr fs:[0x28]
0x400120:	je	0x400127
<Block for 0x400127, 2 bytes>
0x400127:	leave	
0x400128:	ret	
<Block for 0x400122, 5 bytes>
0x400122:	call	0x500018
