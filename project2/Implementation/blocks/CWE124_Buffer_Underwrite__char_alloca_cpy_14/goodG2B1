<Block for 0x400128, 81 bytes>
0x400128:	endbr64	
0x40012c:	push	rbp
0x40012d:	mov	rbp, rsp
0x400130:	add	rsp, -0x80
0x400134:	mov	rax, qword ptr fs:[0x28]
0x40013d:	mov	qword ptr [rbp - 8], rax
0x400141:	xor	eax, eax
0x400143:	mov	eax, 0x10
0x400148:	sub	rax, 1
0x40014c:	add	rax, 0x6c
0x400150:	mov	ecx, 0x10
0x400155:	mov	edx, 0
0x40015a:	div	rcx
0x40015d:	imul	rax, rax, 0x10
0x400161:	mov	rdx, rax
0x400164:	and	rdx, 0xfffffffffffff000
0x40016b:	mov	rcx, rsp
0x40016e:	sub	rcx, rdx
0x400171:	mov	rdx, rcx
0x400174:	cmp	rsp, rdx
0x400177:	je	0x40018b
<Block for 0x40018b, 26 bytes>
0x40018b:	mov	rdx, rax
0x40018e:	and	edx, 0xfff
0x400194:	sub	rsp, rdx
0x400197:	mov	rdx, rax
0x40019a:	and	edx, 0xfff
0x4001a0:	test	rdx, rdx
0x4001a3:	je	0x4001b5
<Block for 0x400179, 18 bytes>
0x400179:	sub	rsp, 0x1000
0x400180:	or	qword ptr [rsp + 0xff8], 0
0x400189:	jmp	0x400174
<Block for 0x4001b5, 41 bytes>
0x4001b5:	mov	rax, rsp
0x4001b8:	add	rax, 0xf
0x4001bc:	shr	rax, 4
0x4001c0:	shl	rax, 4
0x4001c4:	mov	qword ptr [rbp - 0x78], rax
0x4001c8:	mov	rax, qword ptr [rbp - 0x78]
0x4001cc:	mov	edx, 0x63
0x4001d1:	mov	esi, 0x41
0x4001d6:	mov	rdi, rax
0x4001d9:	call	0x500000
<Block for 0x4001a5, 57 bytes>
0x4001a5:	and	eax, 0xfff
0x4001aa:	sub	rax, 8
0x4001ae:	add	rax, rsp
0x4001b1:	or	qword ptr [rax], 0
0x4001b5:	mov	rax, rsp
0x4001b8:	add	rax, 0xf
0x4001bc:	shr	rax, 4
0x4001c0:	shl	rax, 4
0x4001c4:	mov	qword ptr [rbp - 0x78], rax
0x4001c8:	mov	rax, qword ptr [rbp - 0x78]
0x4001cc:	mov	edx, 0x63
0x4001d1:	mov	esi, 0x41
0x4001d6:	mov	rdi, rax
0x4001d9:	call	0x500000
<Block for 0x400174, 5 bytes>
0x400174:	cmp	rsp, rdx
0x400177:	je	0x40018b
<Block for 0x4001de, 22 bytes>
0x4001de:	mov	rax, qword ptr [rbp - 0x78]
0x4001e2:	add	rax, 0x63
0x4001e6:	mov	byte ptr [rax], 0
0x4001e9:	mov	eax, dword ptr [rip + 0xffe19]
0x4001ef:	cmp	eax, 5
0x4001f2:	je	0x400202
<Block for 0x400202, 30 bytes>
0x400202:	mov	rax, qword ptr [rbp - 0x78]
0x400206:	mov	qword ptr [rbp - 0x80], rax
0x40020a:	lea	rax, [rbp - 0x70]
0x40020e:	mov	edx, 0x63
0x400213:	mov	esi, 0x43
0x400218:	mov	rdi, rax
0x40021b:	call	0x500000
<Block for 0x4001f4, 12 bytes>
0x4001f4:	lea	rdi, [rip + 0x1a2]
0x4001fb:	call	0x500018
<Block for 0x400220, 23 bytes>
0x400220:	mov	byte ptr [rbp - 0xd], 0
0x400224:	lea	rdx, [rbp - 0x70]
0x400228:	mov	rax, qword ptr [rbp - 0x80]
0x40022c:	mov	rsi, rdx
0x40022f:	mov	rdi, rax
0x400232:	call	0x500010
<Block for 0x400200, 2 bytes>
0x400200:	jmp	0x40020a
<Block for 0x400237, 12 bytes>
0x400237:	mov	rax, qword ptr [rbp - 0x80]
0x40023b:	mov	rdi, rax
0x40023e:	call	0x500018
<Block for 0x40020a, 22 bytes>
0x40020a:	lea	rax, [rbp - 0x70]
0x40020e:	mov	edx, 0x63
0x400213:	mov	esi, 0x43
0x400218:	mov	rdi, rax
0x40021b:	call	0x500000
<Block for 0x400243, 16 bytes>
0x400243:	nop	
0x400244:	mov	rax, qword ptr [rbp - 8]
0x400248:	xor	rax, qword ptr fs:[0x28]
0x400251:	je	0x400258
<Block for 0x400258, 2 bytes>
0x400258:	leave	
0x400259:	ret	
<Block for 0x400253, 5 bytes>
0x400253:	call	0x500020
