<Block for 0x40007e, 35 bytes>
0x40007e:	endbr64	
0x400082:	push	rbp
0x400083:	mov	rbp, rsp
0x400086:	sub	rsp, 0x10
0x40008a:	mov	qword ptr [rbp - 8], 0
0x400092:	nop	
0x400093:	endbr64	
0x400097:	mov	edi, 0x190
0x40009c:	call	0x500000
<Block for 0x4000a1, 19 bytes>
0x4000a1:	mov	qword ptr [rbp - 8], rax
0x4000a5:	mov	qword ptr [rbp - 0x10], 0
0x4000ad:	cmp	qword ptr [rbp - 0x10], 0x63
0x4000b2:	ja	0x4000d4
<Block for 0x4000b4, 32 bytes>
0x4000b4:	mov	rax, qword ptr [rbp - 0x10]
0x4000b8:	lea	rdx, [rax*4]
0x4000c0:	mov	rax, qword ptr [rbp - 8]
0x4000c4:	add	rax, rdx
0x4000c7:	mov	dword ptr [rax], 5
0x4000cd:	add	qword ptr [rbp - 0x10], 1
0x4000d2:	jmp	0x4000ad
<Block for 0x4000d4, 7 bytes>
0x4000d4:	cmp	qword ptr [rbp - 8], 0
0x4000d9:	je	0x4000e7
<Block for 0x4000ad, 7 bytes>
0x4000ad:	cmp	qword ptr [rbp - 0x10], 0x63
0x4000b2:	ja	0x4000d4
<Block for 0x4000e7, 8 bytes>
0x4000e7:	nop	
0x4000e8:	endbr64	
0x4000ec:	nop	
0x4000ed:	leave	
0x4000ee:	ret	
<Block for 0x4000db, 12 bytes>
0x4000db:	mov	rax, qword ptr [rbp - 8]
0x4000df:	mov	rdi, rax
0x4000e2:	call	0x500008
