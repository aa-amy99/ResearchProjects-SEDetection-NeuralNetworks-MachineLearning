<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	add	rsp, -0x80
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x78], 0
0x400023:	mov	eax, dword ptr [rip + 0xfffd7]
0x400029:	test	eax, eax
0x40002b:	je	0x40006d
<Block for 0x40006d, 22 bytes>
0x40006d:	lea	rax, [rbp - 0x70]
0x400071:	mov	edx, 0x63
0x400076:	mov	esi, 0x43
0x40007b:	mov	rdi, rax
0x40007e:	call	0x500018
<Block for 0x40002d, 10 bytes>
0x40002d:	mov	edi, 0x32
0x400032:	call	0x500008
<Block for 0x400083, 16 bytes>
0x400083:	mov	byte ptr [rbp - 0xd], 0
0x400087:	lea	rax, [rbp - 0x70]
0x40008b:	mov	rdi, rax
0x40008e:	call	0x500020
<Block for 0x400037, 11 bytes>
0x400037:	mov	qword ptr [rbp - 0x78], rax
0x40003b:	cmp	qword ptr [rbp - 0x78], 0
0x400040:	jne	0x40004c
<Block for 0x400093, 22 bytes>
0x400093:	mov	rdx, rax
0x400096:	mov	rcx, qword ptr [rbp - 0x78]
0x40009a:	lea	rax, [rbp - 0x70]
0x40009e:	mov	rsi, rcx
0x4000a1:	mov	rdi, rax
0x4000a4:	call	0x500028
<Block for 0x400042, 10 bytes>
0x400042:	mov	edi, 0xffffffff
0x400047:	call	0x500010
<Block for 0x40004c, 22 bytes>
0x40004c:	mov	rax, qword ptr [rbp - 0x78]
0x400050:	mov	edx, 0x31
0x400055:	mov	esi, 0x41
0x40005a:	mov	rdi, rax
0x40005d:	call	0x500018
<Block for 0x4000a9, 16 bytes>
0x4000a9:	mov	byte ptr [rbp - 0xd], 0
0x4000ad:	lea	rax, [rbp - 0x70]
0x4000b1:	mov	rdi, rax
0x4000b4:	call	0x500030
<Block for 0x400062, 33 bytes>
0x400062:	mov	rax, qword ptr [rbp - 0x78]
0x400066:	add	rax, 0x31
0x40006a:	mov	byte ptr [rax], 0
0x40006d:	lea	rax, [rbp - 0x70]
0x400071:	mov	edx, 0x63
0x400076:	mov	esi, 0x43
0x40007b:	mov	rdi, rax
0x40007e:	call	0x500018
<Block for 0x4000b9, 12 bytes>
0x4000b9:	mov	rax, qword ptr [rbp - 0x78]
0x4000bd:	mov	rdi, rax
0x4000c0:	call	0x500038
<Block for 0x4000c5, 16 bytes>
0x4000c5:	nop	
0x4000c6:	mov	rax, qword ptr [rbp - 8]
0x4000ca:	xor	rax, qword ptr fs:[0x28]
0x4000d3:	je	0x4000da
<Block for 0x4000da, 2 bytes>
0x4000da:	leave	
0x4000db:	ret	
<Block for 0x4000d5, 5 bytes>
0x4000d5:	call	0x500040
