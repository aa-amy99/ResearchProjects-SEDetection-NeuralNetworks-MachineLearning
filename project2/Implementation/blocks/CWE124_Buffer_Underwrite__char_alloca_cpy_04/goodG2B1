<Block for 0x400126, 81 bytes>
0x400126:	endbr64	
0x40012a:	push	rbp
0x40012b:	mov	rbp, rsp
0x40012e:	add	rsp, -0x80
0x400132:	mov	rax, qword ptr fs:[0x28]
0x40013b:	mov	qword ptr [rbp - 8], rax
0x40013f:	xor	eax, eax
0x400141:	mov	eax, 0x10
0x400146:	sub	rax, 1
0x40014a:	add	rax, 0x6c
0x40014e:	mov	ecx, 0x10
0x400153:	mov	edx, 0
0x400158:	div	rcx
0x40015b:	imul	rax, rax, 0x10
0x40015f:	mov	rdx, rax
0x400162:	and	rdx, 0xfffffffffffff000
0x400169:	mov	rcx, rsp
0x40016c:	sub	rcx, rdx
0x40016f:	mov	rdx, rcx
0x400172:	cmp	rsp, rdx
0x400175:	je	0x400189
<Block for 0x400189, 26 bytes>
0x400189:	mov	rdx, rax
0x40018c:	and	edx, 0xfff
0x400192:	sub	rsp, rdx
0x400195:	mov	rdx, rax
0x400198:	and	edx, 0xfff
0x40019e:	test	rdx, rdx
0x4001a1:	je	0x4001b3
<Block for 0x400177, 18 bytes>
0x400177:	sub	rsp, 0x1000
0x40017e:	or	qword ptr [rsp + 0xff8], 0
0x400187:	jmp	0x400172
<Block for 0x4001b3, 41 bytes>
0x4001b3:	mov	rax, rsp
0x4001b6:	add	rax, 0xf
0x4001ba:	shr	rax, 4
0x4001be:	shl	rax, 4
0x4001c2:	mov	qword ptr [rbp - 0x78], rax
0x4001c6:	mov	rax, qword ptr [rbp - 0x78]
0x4001ca:	mov	edx, 0x63
0x4001cf:	mov	esi, 0x41
0x4001d4:	mov	rdi, rax
0x4001d7:	call	0x500000
<Block for 0x4001a3, 57 bytes>
0x4001a3:	and	eax, 0xfff
0x4001a8:	sub	rax, 8
0x4001ac:	add	rax, rsp
0x4001af:	or	qword ptr [rax], 0
0x4001b3:	mov	rax, rsp
0x4001b6:	add	rax, 0xf
0x4001ba:	shr	rax, 4
0x4001be:	shl	rax, 4
0x4001c2:	mov	qword ptr [rbp - 0x78], rax
0x4001c6:	mov	rax, qword ptr [rbp - 0x78]
0x4001ca:	mov	edx, 0x63
0x4001cf:	mov	esi, 0x41
0x4001d4:	mov	rdi, rax
0x4001d7:	call	0x500000
<Block for 0x400172, 5 bytes>
0x400172:	cmp	rsp, rdx
0x400175:	je	0x400189
<Block for 0x4001dc, 20 bytes>
0x4001dc:	mov	rax, qword ptr [rbp - 0x78]
0x4001e0:	add	rax, 0x63
0x4001e4:	mov	byte ptr [rax], 0
0x4001e7:	mov	eax, 0
0x4001ec:	test	eax, eax
0x4001ee:	je	0x4001fe
<Block for 0x4001fe, 30 bytes>
0x4001fe:	mov	rax, qword ptr [rbp - 0x78]
0x400202:	mov	qword ptr [rbp - 0x80], rax
0x400206:	lea	rax, [rbp - 0x70]
0x40020a:	mov	edx, 0x63
0x40020f:	mov	esi, 0x43
0x400214:	mov	rdi, rax
0x400217:	call	0x500000
<Block for 0x4001f0, 12 bytes>
0x4001f0:	lea	rdi, [rip + 0x1a9]
0x4001f7:	call	0x500010
<Block for 0x40021c, 23 bytes>
0x40021c:	mov	byte ptr [rbp - 0xd], 0
0x400220:	lea	rdx, [rbp - 0x70]
0x400224:	mov	rax, qword ptr [rbp - 0x80]
0x400228:	mov	rsi, rdx
0x40022b:	mov	rdi, rax
0x40022e:	call	0x500008
<Block for 0x4001fc, 2 bytes>
0x4001fc:	jmp	0x400206
<Block for 0x400233, 12 bytes>
0x400233:	mov	rax, qword ptr [rbp - 0x80]
0x400237:	mov	rdi, rax
0x40023a:	call	0x500010
<Block for 0x400206, 22 bytes>
0x400206:	lea	rax, [rbp - 0x70]
0x40020a:	mov	edx, 0x63
0x40020f:	mov	esi, 0x43
0x400214:	mov	rdi, rax
0x400217:	call	0x500000
<Block for 0x40023f, 16 bytes>
0x40023f:	nop	
0x400240:	mov	rax, qword ptr [rbp - 8]
0x400244:	xor	rax, qword ptr fs:[0x28]
0x40024d:	je	0x400254
<Block for 0x400254, 2 bytes>
0x400254:	leave	
0x400255:	ret	
<Block for 0x40024f, 5 bytes>
0x40024f:	call	0x500018
