<Block for 0x4003d6, 84 bytes>
0x4003d6:	endbr64	
0x4003da:	push	rbp
0x4003db:	mov	rbp, rsp
0x4003de:	sub	rsp, 0x90
0x4003e5:	mov	rax, qword ptr fs:[0x28]
0x4003ee:	mov	qword ptr [rbp - 8], rax
0x4003f2:	xor	eax, eax
0x4003f4:	mov	eax, 0x10
0x4003f9:	sub	rax, 1
0x4003fd:	add	rax, 0x3a
0x400401:	mov	ecx, 0x10
0x400406:	mov	edx, 0
0x40040b:	div	rcx
0x40040e:	imul	rax, rax, 0x10
0x400412:	mov	rdx, rax
0x400415:	and	rdx, 0xfffffffffffff000
0x40041c:	mov	rcx, rsp
0x40041f:	sub	rcx, rdx
0x400422:	mov	rdx, rcx
0x400425:	cmp	rsp, rdx
0x400428:	je	0x40043c
<Block for 0x40043c, 26 bytes>
0x40043c:	mov	rdx, rax
0x40043f:	and	edx, 0xfff
0x400445:	sub	rsp, rdx
0x400448:	mov	rdx, rax
0x40044b:	and	edx, 0xfff
0x400451:	test	rdx, rdx
0x400454:	je	0x400466
<Block for 0x40042a, 18 bytes>
0x40042a:	sub	rsp, 0x1000
0x400431:	or	qword ptr [rsp + 0xff8], 0
0x40043a:	jmp	0x400425
<Block for 0x400466, 73 bytes>
0x400466:	mov	rax, rsp
0x400469:	add	rax, 0xf
0x40046d:	shr	rax, 4
0x400471:	shl	rax, 4
0x400475:	mov	qword ptr [rbp - 0x80], rax
0x400479:	mov	eax, 0x10
0x40047e:	sub	rax, 1
0x400482:	add	rax, 0x6c
0x400486:	mov	edi, 0x10
0x40048b:	mov	edx, 0
0x400490:	div	rdi
0x400493:	imul	rax, rax, 0x10
0x400497:	mov	rdx, rax
0x40049a:	and	rdx, 0xfffffffffffff000
0x4004a1:	mov	rsi, rsp
0x4004a4:	sub	rsi, rdx
0x4004a7:	mov	rdx, rsi
0x4004aa:	cmp	rsp, rdx
0x4004ad:	je	0x4004c1
<Block for 0x400456, 89 bytes>
0x400456:	and	eax, 0xfff
0x40045b:	sub	rax, 8
0x40045f:	add	rax, rsp
0x400462:	or	qword ptr [rax], 0
0x400466:	mov	rax, rsp
0x400469:	add	rax, 0xf
0x40046d:	shr	rax, 4
0x400471:	shl	rax, 4
0x400475:	mov	qword ptr [rbp - 0x80], rax
0x400479:	mov	eax, 0x10
0x40047e:	sub	rax, 1
0x400482:	add	rax, 0x6c
0x400486:	mov	edi, 0x10
0x40048b:	mov	edx, 0
0x400490:	div	rdi
0x400493:	imul	rax, rax, 0x10
0x400497:	mov	rdx, rax
0x40049a:	and	rdx, 0xfffffffffffff000
0x4004a1:	mov	rsi, rsp
0x4004a4:	sub	rsi, rdx
0x4004a7:	mov	rdx, rsi
0x4004aa:	cmp	rsp, rdx
0x4004ad:	je	0x4004c1
<Block for 0x400425, 5 bytes>
0x400425:	cmp	rsp, rdx
0x400428:	je	0x40043c
<Block for 0x4004c1, 26 bytes>
0x4004c1:	mov	rdx, rax
0x4004c4:	and	edx, 0xfff
0x4004ca:	sub	rsp, rdx
0x4004cd:	mov	rdx, rax
0x4004d0:	and	edx, 0xfff
0x4004d6:	test	rdx, rdx
0x4004d9:	je	0x4004eb
<Block for 0x4004af, 18 bytes>
0x4004af:	sub	rsp, 0x1000
0x4004b6:	or	qword ptr [rsp + 0xff8], 0
0x4004bf:	jmp	0x4004aa
<Block for 0x4004eb, 41 bytes>
0x4004eb:	mov	rax, rsp
0x4004ee:	add	rax, 0xf
0x4004f2:	shr	rax, 4
0x4004f6:	shl	rax, 4
0x4004fa:	mov	qword ptr [rbp - 0x78], rax
0x4004fe:	mov	rax, qword ptr [rbp - 0x80]
0x400502:	mov	edx, 0x31
0x400507:	mov	esi, 0x41
0x40050c:	mov	rdi, rax
0x40050f:	call	0x500000
<Block for 0x4004db, 57 bytes>
0x4004db:	and	eax, 0xfff
0x4004e0:	sub	rax, 8
0x4004e4:	add	rax, rsp
0x4004e7:	or	qword ptr [rax], 0
0x4004eb:	mov	rax, rsp
0x4004ee:	add	rax, 0xf
0x4004f2:	shr	rax, 4
0x4004f6:	shl	rax, 4
0x4004fa:	mov	qword ptr [rbp - 0x78], rax
0x4004fe:	mov	rax, qword ptr [rbp - 0x80]
0x400502:	mov	edx, 0x31
0x400507:	mov	esi, 0x41
0x40050c:	mov	rdi, rax
0x40050f:	call	0x500000
<Block for 0x4004aa, 5 bytes>
0x4004aa:	cmp	rsp, rdx
0x4004ad:	je	0x4004c1
<Block for 0x400514, 33 bytes>
0x400514:	mov	rax, qword ptr [rbp - 0x80]
0x400518:	add	rax, 0x31
0x40051c:	mov	byte ptr [rax], 0
0x40051f:	mov	rax, qword ptr [rbp - 0x78]
0x400523:	mov	edx, 0x63
0x400528:	mov	esi, 0x41
0x40052d:	mov	rdi, rax
0x400530:	call	0x500000
<Block for 0x400535, 20 bytes>
0x400535:	mov	rax, qword ptr [rbp - 0x78]
0x400539:	add	rax, 0x63
0x40053d:	mov	byte ptr [rax], 0
0x400540:	mov	eax, 1
0x400545:	test	eax, eax
0x400547:	je	0x400554
<Block for 0x400554, 22 bytes>
0x400554:	lea	rax, [rbp - 0x70]
0x400558:	mov	edx, 0x63
0x40055d:	mov	esi, 0x43
0x400562:	mov	rdi, rax
0x400565:	call	0x500000
<Block for 0x400549, 33 bytes>
0x400549:	mov	rax, qword ptr [rbp - 0x78]
0x40054d:	mov	qword ptr [rbp - 0x88], rax
0x400554:	lea	rax, [rbp - 0x70]
0x400558:	mov	edx, 0x63
0x40055d:	mov	esi, 0x43
0x400562:	mov	rdi, rax
0x400565:	call	0x500000
<Block for 0x40056a, 16 bytes>
0x40056a:	mov	byte ptr [rbp - 0xd], 0
0x40056e:	lea	rax, [rbp - 0x70]
0x400572:	mov	rdi, rax
0x400575:	call	0x500008
<Block for 0x40057a, 25 bytes>
0x40057a:	mov	rdx, rax
0x40057d:	mov	rcx, qword ptr [rbp - 0x88]
0x400584:	lea	rax, [rbp - 0x70]
0x400588:	mov	rsi, rcx
0x40058b:	mov	rdi, rax
0x40058e:	call	0x500010
<Block for 0x400593, 16 bytes>
0x400593:	mov	byte ptr [rbp - 0xd], 0
0x400597:	lea	rax, [rbp - 0x70]
0x40059b:	mov	rdi, rax
0x40059e:	call	0x500018
<Block for 0x4005a3, 16 bytes>
0x4005a3:	nop	
0x4005a4:	mov	rax, qword ptr [rbp - 8]
0x4005a8:	xor	rax, qword ptr fs:[0x28]
0x4005b1:	je	0x4005b8
<Block for 0x4005b8, 2 bytes>
0x4005b8:	leave	
0x4005b9:	ret	
<Block for 0x4005b3, 5 bytes>
0x4005b3:	call	0x500020
