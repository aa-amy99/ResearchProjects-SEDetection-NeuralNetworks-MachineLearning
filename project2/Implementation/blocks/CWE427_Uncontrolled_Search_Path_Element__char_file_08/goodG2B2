<Block for 0x40025f, 82 bytes>
0x40025f:	endbr64	
0x400263:	push	rbp
0x400264:	mov	rbp, rsp
0x400267:	sub	rsp, 0x120
0x40026e:	mov	rax, qword ptr fs:[0x28]
0x400277:	mov	qword ptr [rbp - 8], rax
0x40027b:	xor	eax, eax
0x40027d:	movabs	rax, 0x3d48544150
0x400287:	mov	edx, 0
0x40028c:	mov	qword ptr [rbp - 0x110], rax
0x400293:	mov	qword ptr [rbp - 0x108], rdx
0x40029a:	lea	rdx, [rbp - 0x100]
0x4002a1:	mov	eax, 0
0x4002a6:	mov	ecx, 0x1d
0x4002ab:	mov	rdi, rdx
0x4002ae:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002b1, 34 bytes>
0x4002b1:	mov	rdx, rdi
0x4002b4:	mov	word ptr [rdx], ax
0x4002b7:	add	rdx, 2
0x4002bb:	lea	rax, [rbp - 0x110]
0x4002c2:	mov	qword ptr [rbp - 0x118], rax
0x4002c9:	mov	eax, 0
0x4002ce:	call	0x400000
<Block for 0x4002ae, 3 bytes>
0x4002ae:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002d3, 4 bytes>
0x4002d3:	test	eax, eax
0x4002d5:	je	0x400310
<Block for 0x400310, 15 bytes>
0x400310:	mov	rax, qword ptr [rbp - 0x118]
0x400317:	mov	rdi, rax
0x40031a:	call	0x500028
<Block for 0x4002d7, 27 bytes>
0x4002d7:	mov	rax, qword ptr [rbp - 0x118]
0x4002de:	mov	rcx, -1
0x4002e5:	mov	rdx, rax
0x4002e8:	mov	eax, 0
0x4002ed:	mov	rdi, rdx
0x4002f0:	repne scasb	al, byte ptr [rdi]
<Block for 0x40031f, 16 bytes>
0x40031f:	nop	
0x400320:	mov	rax, qword ptr [rbp - 8]
0x400324:	xor	rax, qword ptr fs:[0x28]
0x40032d:	je	0x400334
<Block for 0x4002f2, 45 bytes>
0x4002f2:	mov	rax, rcx
0x4002f5:	not	rax
0x4002f8:	lea	rdx, [rax - 1]
0x4002fc:	mov	rax, qword ptr [rbp - 0x118]
0x400303:	add	rax, rdx
0x400306:	mov	dword ptr [rax], 0x6e69622f
0x40030c:	mov	byte ptr [rax + 4], 0
0x400310:	mov	rax, qword ptr [rbp - 0x118]
0x400317:	mov	rdi, rax
0x40031a:	call	0x500028
<Block for 0x4002f0, 2 bytes>
0x4002f0:	repne scasb	al, byte ptr [rdi]
<Block for 0x400334, 2 bytes>
0x400334:	leave	
0x400335:	ret	
<Block for 0x40032f, 5 bytes>
0x40032f:	call	0x500030
