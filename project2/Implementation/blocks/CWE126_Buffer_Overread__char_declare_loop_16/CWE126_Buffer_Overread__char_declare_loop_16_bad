<Block for 0x400000, 55 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x140
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0x120]
0x400025:	mov	edx, 0x31
0x40002a:	mov	esi, 0x41
0x40002f:	mov	rdi, rax
0x400032:	call	0x500000
<Block for 0x400037, 32 bytes>
0x400037:	mov	byte ptr [rbp - 0xef], 0
0x40003e:	lea	rax, [rbp - 0xe0]
0x400045:	mov	edx, 0x63
0x40004a:	mov	esi, 0x41
0x40004f:	mov	rdi, rax
0x400052:	call	0x500000
<Block for 0x400057, 41 bytes>
0x400057:	mov	byte ptr [rbp - 0x7d], 0
0x40005b:	lea	rax, [rbp - 0x120]
0x400062:	mov	qword ptr [rbp - 0x130], rax
0x400069:	nop	
0x40006a:	lea	rax, [rbp - 0x70]
0x40006e:	mov	edx, 0x63
0x400073:	mov	esi, 0x43
0x400078:	mov	rdi, rax
0x40007b:	call	0x500000
<Block for 0x400080, 16 bytes>
0x400080:	mov	byte ptr [rbp - 0xd], 0
0x400084:	lea	rax, [rbp - 0x70]
0x400088:	mov	rdi, rax
0x40008b:	call	0x500008
<Block for 0x400090, 20 bytes>
0x400090:	mov	qword ptr [rbp - 0x128], rax
0x400097:	mov	qword ptr [rbp - 0x138], 0
0x4000a2:	jmp	0x4000d0
<Block for 0x4000d0, 16 bytes>
0x4000d0:	mov	rax, qword ptr [rbp - 0x138]
0x4000d7:	cmp	rax, qword ptr [rbp - 0x128]
0x4000de:	jb	0x4000a4
<Block for 0x4000a4, 60 bytes>
0x4000a4:	mov	rdx, qword ptr [rbp - 0x130]
0x4000ab:	mov	rax, qword ptr [rbp - 0x138]
0x4000b2:	add	rax, rdx
0x4000b5:	movzx	eax, byte ptr [rax]
0x4000b8:	lea	rcx, [rbp - 0x70]
0x4000bc:	mov	rdx, qword ptr [rbp - 0x138]
0x4000c3:	add	rdx, rcx
0x4000c6:	mov	byte ptr [rdx], al
0x4000c8:	add	qword ptr [rbp - 0x138], 1
0x4000d0:	mov	rax, qword ptr [rbp - 0x138]
0x4000d7:	cmp	rax, qword ptr [rbp - 0x128]
0x4000de:	jb	0x4000a4
<Block for 0x4000e0, 16 bytes>
0x4000e0:	mov	byte ptr [rbp - 0xd], 0
0x4000e4:	lea	rax, [rbp - 0x70]
0x4000e8:	mov	rdi, rax
0x4000eb:	call	0x500010
<Block for 0x4000f0, 16 bytes>
0x4000f0:	nop	
0x4000f1:	mov	rax, qword ptr [rbp - 8]
0x4000f5:	xor	rax, qword ptr fs:[0x28]
0x4000fe:	je	0x400105
<Block for 0x400105, 2 bytes>
0x400105:	leave	
0x400106:	ret	
<Block for 0x400100, 5 bytes>
0x400100:	call	0x500018
