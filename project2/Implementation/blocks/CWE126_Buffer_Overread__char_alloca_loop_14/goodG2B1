<Block for 0x400223, 84 bytes>
0x400223:	endbr64	
0x400227:	push	rbp
0x400228:	mov	rbp, rsp
0x40022b:	sub	rsp, 0xa0
0x400232:	mov	rax, qword ptr fs:[0x28]
0x40023b:	mov	qword ptr [rbp - 8], rax
0x40023f:	xor	eax, eax
0x400241:	mov	eax, 0x10
0x400246:	sub	rax, 1
0x40024a:	add	rax, 0x3a
0x40024e:	mov	ecx, 0x10
0x400253:	mov	edx, 0
0x400258:	div	rcx
0x40025b:	imul	rax, rax, 0x10
0x40025f:	mov	rdx, rax
0x400262:	and	rdx, 0xfffffffffffff000
0x400269:	mov	rcx, rsp
0x40026c:	sub	rcx, rdx
0x40026f:	mov	rdx, rcx
0x400272:	cmp	rsp, rdx
0x400275:	je	0x400289
<Block for 0x400289, 26 bytes>
0x400289:	mov	rdx, rax
0x40028c:	and	edx, 0xfff
0x400292:	sub	rsp, rdx
0x400295:	mov	rdx, rax
0x400298:	and	edx, 0xfff
0x40029e:	test	rdx, rdx
0x4002a1:	je	0x4002b3
<Block for 0x400277, 18 bytes>
0x400277:	sub	rsp, 0x1000
0x40027e:	or	qword ptr [rsp + 0xff8], 0
0x400287:	jmp	0x400272
<Block for 0x4002b3, 76 bytes>
0x4002b3:	mov	rax, rsp
0x4002b6:	add	rax, 0xf
0x4002ba:	shr	rax, 4
0x4002be:	shl	rax, 4
0x4002c2:	mov	qword ptr [rbp - 0x88], rax
0x4002c9:	mov	eax, 0x10
0x4002ce:	sub	rax, 1
0x4002d2:	add	rax, 0x6c
0x4002d6:	mov	esi, 0x10
0x4002db:	mov	edx, 0
0x4002e0:	div	rsi
0x4002e3:	imul	rax, rax, 0x10
0x4002e7:	mov	rdx, rax
0x4002ea:	and	rdx, 0xfffffffffffff000
0x4002f1:	mov	rsi, rsp
0x4002f4:	sub	rsi, rdx
0x4002f7:	mov	rdx, rsi
0x4002fa:	cmp	rsp, rdx
0x4002fd:	je	0x400311
<Block for 0x4002a3, 92 bytes>
0x4002a3:	and	eax, 0xfff
0x4002a8:	sub	rax, 8
0x4002ac:	add	rax, rsp
0x4002af:	or	qword ptr [rax], 0
0x4002b3:	mov	rax, rsp
0x4002b6:	add	rax, 0xf
0x4002ba:	shr	rax, 4
0x4002be:	shl	rax, 4
0x4002c2:	mov	qword ptr [rbp - 0x88], rax
0x4002c9:	mov	eax, 0x10
0x4002ce:	sub	rax, 1
0x4002d2:	add	rax, 0x6c
0x4002d6:	mov	esi, 0x10
0x4002db:	mov	edx, 0
0x4002e0:	div	rsi
0x4002e3:	imul	rax, rax, 0x10
0x4002e7:	mov	rdx, rax
0x4002ea:	and	rdx, 0xfffffffffffff000
0x4002f1:	mov	rsi, rsp
0x4002f4:	sub	rsi, rdx
0x4002f7:	mov	rdx, rsi
0x4002fa:	cmp	rsp, rdx
0x4002fd:	je	0x400311
<Block for 0x400272, 5 bytes>
0x400272:	cmp	rsp, rdx
0x400275:	je	0x400289
<Block for 0x400311, 26 bytes>
0x400311:	mov	rdx, rax
0x400314:	and	edx, 0xfff
0x40031a:	sub	rsp, rdx
0x40031d:	mov	rdx, rax
0x400320:	and	edx, 0xfff
0x400326:	test	rdx, rdx
0x400329:	je	0x40033b
<Block for 0x4002ff, 18 bytes>
0x4002ff:	sub	rsp, 0x1000
0x400306:	or	qword ptr [rsp + 0xff8], 0
0x40030f:	jmp	0x4002fa
<Block for 0x40033b, 44 bytes>
0x40033b:	mov	rax, rsp
0x40033e:	add	rax, 0xf
0x400342:	shr	rax, 4
0x400346:	shl	rax, 4
0x40034a:	mov	qword ptr [rbp - 0x80], rax
0x40034e:	mov	rax, qword ptr [rbp - 0x88]
0x400355:	mov	edx, 0x31
0x40035a:	mov	esi, 0x41
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x40032b, 60 bytes>
0x40032b:	and	eax, 0xfff
0x400330:	sub	rax, 8
0x400334:	add	rax, rsp
0x400337:	or	qword ptr [rax], 0
0x40033b:	mov	rax, rsp
0x40033e:	add	rax, 0xf
0x400342:	shr	rax, 4
0x400346:	shl	rax, 4
0x40034a:	mov	qword ptr [rbp - 0x80], rax
0x40034e:	mov	rax, qword ptr [rbp - 0x88]
0x400355:	mov	edx, 0x31
0x40035a:	mov	esi, 0x41
0x40035f:	mov	rdi, rax
0x400362:	call	0x500000
<Block for 0x4002fa, 5 bytes>
0x4002fa:	cmp	rsp, rdx
0x4002fd:	je	0x400311
<Block for 0x400367, 36 bytes>
0x400367:	mov	rax, qword ptr [rbp - 0x88]
0x40036e:	add	rax, 0x31
0x400372:	mov	byte ptr [rax], 0
0x400375:	mov	rax, qword ptr [rbp - 0x80]
0x400379:	mov	edx, 0x63
0x40037e:	mov	esi, 0x41
0x400383:	mov	rdi, rax
0x400386:	call	0x500000
<Block for 0x40038b, 22 bytes>
0x40038b:	mov	rax, qword ptr [rbp - 0x80]
0x40038f:	add	rax, 0x63
0x400393:	mov	byte ptr [rax], 0
0x400396:	mov	eax, dword ptr [rip + 0xffc6c]
0x40039c:	cmp	eax, 5
0x40039f:	je	0x4003af
<Block for 0x4003af, 33 bytes>
0x4003af:	mov	rax, qword ptr [rbp - 0x80]
0x4003b3:	mov	qword ptr [rbp - 0x98], rax
0x4003ba:	lea	rax, [rbp - 0x70]
0x4003be:	mov	edx, 0x63
0x4003c3:	mov	esi, 0x43
0x4003c8:	mov	rdi, rax
0x4003cb:	call	0x500000
<Block for 0x4003a1, 12 bytes>
0x4003a1:	lea	rdi, [rip + 0x2e8]
0x4003a8:	call	0x500018
<Block for 0x4003d0, 16 bytes>
0x4003d0:	mov	byte ptr [rbp - 0xd], 0
0x4003d4:	lea	rax, [rbp - 0x70]
0x4003d8:	mov	rdi, rax
0x4003db:	call	0x500010
<Block for 0x4003ad, 2 bytes>
0x4003ad:	jmp	0x4003ba
<Block for 0x4003e0, 17 bytes>
0x4003e0:	mov	qword ptr [rbp - 0x78], rax
0x4003e4:	mov	qword ptr [rbp - 0x90], 0
0x4003ef:	jmp	0x40041d
<Block for 0x4003ba, 22 bytes>
0x4003ba:	lea	rax, [rbp - 0x70]
0x4003be:	mov	edx, 0x63
0x4003c3:	mov	esi, 0x43
0x4003c8:	mov	rdi, rax
0x4003cb:	call	0x500000
<Block for 0x40041d, 13 bytes>
0x40041d:	mov	rax, qword ptr [rbp - 0x90]
0x400424:	cmp	rax, qword ptr [rbp - 0x78]
0x400428:	jb	0x4003f1
<Block for 0x4003f1, 57 bytes>
0x4003f1:	mov	rdx, qword ptr [rbp - 0x98]
0x4003f8:	mov	rax, qword ptr [rbp - 0x90]
0x4003ff:	add	rax, rdx
0x400402:	movzx	eax, byte ptr [rax]
0x400405:	lea	rcx, [rbp - 0x70]
0x400409:	mov	rdx, qword ptr [rbp - 0x90]
0x400410:	add	rdx, rcx
0x400413:	mov	byte ptr [rdx], al
0x400415:	add	qword ptr [rbp - 0x90], 1
0x40041d:	mov	rax, qword ptr [rbp - 0x90]
0x400424:	cmp	rax, qword ptr [rbp - 0x78]
0x400428:	jb	0x4003f1
<Block for 0x40042a, 16 bytes>
0x40042a:	mov	byte ptr [rbp - 0xd], 0
0x40042e:	lea	rax, [rbp - 0x70]
0x400432:	mov	rdi, rax
0x400435:	call	0x500018
<Block for 0x40043a, 16 bytes>
0x40043a:	nop	
0x40043b:	mov	rax, qword ptr [rbp - 8]
0x40043f:	xor	rax, qword ptr fs:[0x28]
0x400448:	je	0x40044f
<Block for 0x40044f, 2 bytes>
0x40044f:	leave	
0x400450:	ret	
<Block for 0x40044a, 5 bytes>
0x40044a:	call	0x500020
