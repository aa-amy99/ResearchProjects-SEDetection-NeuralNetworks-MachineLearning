<Block for 0x40019a, 40 bytes>
0x40019a:	endbr64	
0x40019e:	push	rbp
0x40019f:	mov	rbp, rsp
0x4001a2:	push	rbx
0x4001a3:	sub	rsp, 0x58
0x4001a7:	mov	rax, qword ptr fs:[0x28]
0x4001b0:	mov	qword ptr [rbp - 0x18], rax
0x4001b4:	xor	eax, eax
0x4001b6:	lea	rax, [rbp - 0x50]
0x4001ba:	mov	rdi, rax
0x4001bd:	call	0x4003ee
<Block for 0x4001c2, 54 bytes>
0x4001c2:	mov	eax, 0x10
0x4001c7:	sub	rax, 1
0x4001cb:	add	rax, 0x6c
0x4001cf:	mov	ecx, 0x10
0x4001d4:	mov	edx, 0
0x4001d9:	div	rcx
0x4001dc:	imul	rax, rax, 0x10
0x4001e0:	mov	rdx, rax
0x4001e3:	and	rdx, 0xfffffffffffff000
0x4001ea:	mov	rcx, rsp
0x4001ed:	sub	rcx, rdx
0x4001f0:	mov	rdx, rcx
0x4001f3:	cmp	rsp, rdx
0x4001f6:	je	0x40020a
<Block for 0x40020a, 26 bytes>
0x40020a:	mov	rdx, rax
0x40020d:	and	edx, 0xfff
0x400213:	sub	rsp, rdx
0x400216:	mov	rdx, rax
0x400219:	and	edx, 0xfff
0x40021f:	test	rdx, rdx
0x400222:	je	0x400234
<Block for 0x4001f8, 18 bytes>
0x4001f8:	sub	rsp, 0x1000
0x4001ff:	or	qword ptr [rsp + 0xff8], 0
0x400208:	jmp	0x4001f3
<Block for 0x400234, 41 bytes>
0x400234:	mov	rax, rsp
0x400237:	add	rax, 0xf
0x40023b:	shr	rax, 4
0x40023f:	shl	rax, 4
0x400243:	mov	qword ptr [rbp - 0x58], rax
0x400247:	mov	rax, qword ptr [rbp - 0x58]
0x40024b:	mov	edx, 0x63
0x400250:	mov	esi, 0x41
0x400255:	mov	rdi, rax
0x400258:	call	0x500000
<Block for 0x400224, 57 bytes>
0x400224:	and	eax, 0xfff
0x400229:	sub	rax, 8
0x40022d:	add	rax, rsp
0x400230:	or	qword ptr [rax], 0
0x400234:	mov	rax, rsp
0x400237:	add	rax, 0xf
0x40023b:	shr	rax, 4
0x40023f:	shl	rax, 4
0x400243:	mov	qword ptr [rbp - 0x58], rax
0x400247:	mov	rax, qword ptr [rbp - 0x58]
0x40024b:	mov	edx, 0x63
0x400250:	mov	esi, 0x41
0x400255:	mov	rdi, rax
0x400258:	call	0x500000
<Block for 0x4001f3, 5 bytes>
0x4001f3:	cmp	rsp, rdx
0x4001f6:	je	0x40020a
<Block for 0x40025d, 38 bytes>
0x40025d:	mov	rax, qword ptr [rbp - 0x58]
0x400261:	add	rax, 0x63
0x400265:	mov	byte ptr [rax], 0
0x400268:	mov	rax, qword ptr [rbp - 0x58]
0x40026c:	mov	qword ptr [rbp - 0x60], rax
0x400270:	lea	rdx, [rbp - 0x60]
0x400274:	lea	rax, [rbp - 0x50]
0x400278:	mov	rsi, rdx
0x40027b:	mov	rdi, rax
0x40027e:	call	0x4004e6
<Block for 0x400283, 19 bytes>
0x400283:	lea	rdx, [rbp - 0x60]
0x400287:	lea	rax, [rbp - 0x50]
0x40028b:	mov	rsi, rdx
0x40028e:	mov	rdi, rax
0x400291:	call	0x4004e6
<Block for 0x400296, 19 bytes>
0x400296:	lea	rdx, [rbp - 0x60]
0x40029a:	lea	rax, [rbp - 0x50]
0x40029e:	mov	rsi, rdx
0x4002a1:	mov	rdi, rax
0x4002a4:	call	0x4004e6
<Block for 0x4002a9, 19 bytes>
0x4002a9:	lea	rdx, [rbp - 0x50]
0x4002ad:	lea	rax, [rbp - 0x30]
0x4002b1:	mov	rsi, rdx
0x4002b4:	mov	rdi, rax
0x4002b7:	call	0x400520
<Block for 0x4002bc, 12 bytes>
0x4002bc:	lea	rax, [rbp - 0x30]
0x4002c0:	mov	rdi, rax
0x4002c3:	call	0x500020
<Block for 0x4002c8, 12 bytes>
0x4002c8:	lea	rax, [rbp - 0x30]
0x4002cc:	mov	rdi, rax
0x4002cf:	call	0x40040e
<Block for 0x4002d4, 12 bytes>
0x4002d4:	lea	rax, [rbp - 0x50]
0x4002d8:	mov	rdi, rax
0x4002db:	call	0x40040e
<Block for 0x4002e0, 16 bytes>
0x4002e0:	nop	
0x4002e1:	mov	rax, qword ptr [rbp - 0x18]
0x4002e5:	xor	rax, qword ptr fs:[0x28]
0x4002ee:	je	0x40032a
<Block for 0x40032a, 6 bytes>
0x40032a:	mov	rbx, qword ptr [rbp - 8]
0x40032e:	leave	
0x40032f:	ret	
<Block for 0x4002f0, 2 bytes>
0x4002f0:	jmp	0x400325
<Block for 0x400325, 5 bytes>
0x400325:	call	0x500018
