<Block for 0x400000, 82 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	eax, dword ptr [rip + 0x407]
0x400021:	mov	dword ptr [rbp - 0x34], eax
0x400024:	mov	qword ptr [rbp - 0x30], 0
0x40002c:	mov	qword ptr [rbp - 0x28], 0
0x400034:	mov	qword ptr [rbp - 0x20], 0
0x40003c:	mov	qword ptr [rbp - 0x18], 0
0x400044:	mov	qword ptr [rbp - 0x10], 0
0x40004c:	cmp	dword ptr [rbp - 0x34], 0
0x400050:	js	0x400064
<Block for 0x400064, 12 bytes>
0x400064:	lea	rdi, [rip + 0x3cd]
0x40006b:	call	0x500008
<Block for 0x400052, 16 bytes>
0x400052:	mov	eax, dword ptr [rbp - 0x34]
0x400055:	cdqe	
0x400057:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x40005b:	mov	edi, eax
0x40005d:	call	0x500000
<Block for 0x400070, 16 bytes>
0x400070:	nop	
0x400071:	mov	rax, qword ptr [rbp - 8]
0x400075:	xor	rax, qword ptr fs:[0x28]
0x40007e:	je	0x400085
<Block for 0x400062, 2 bytes>
0x400062:	jmp	0x400070
<Block for 0x400085, 2 bytes>
0x400085:	leave	
0x400086:	ret	
<Block for 0x400080, 5 bytes>
0x400080:	call	0x500010
