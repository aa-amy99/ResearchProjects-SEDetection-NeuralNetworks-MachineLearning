<Block for 0x400000, 84 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	eax, 0x10
0x400023:	sub	rax, 1
0x400027:	add	rax, 0x6c
0x40002b:	mov	esi, 0x10
0x400030:	mov	edx, 0
0x400035:	div	rsi
0x400038:	imul	rax, rax, 0x10
0x40003c:	mov	rdx, rax
0x40003f:	and	rdx, 0xfffffffffffff000
0x400046:	mov	rcx, rsp
0x400049:	sub	rcx, rdx
0x40004c:	mov	rdx, rcx
0x40004f:	cmp	rsp, rdx
0x400052:	je	0x400066
<Block for 0x400066, 26 bytes>
0x400066:	mov	rdx, rax
0x400069:	and	edx, 0xfff
0x40006f:	sub	rsp, rdx
0x400072:	mov	rdx, rax
0x400075:	and	edx, 0xfff
0x40007b:	test	rdx, rdx
0x40007e:	je	0x400090
<Block for 0x400054, 18 bytes>
0x400054:	sub	rsp, 0x1000
0x40005b:	or	qword ptr [rsp + 0xff8], 0
0x400064:	jmp	0x40004f
<Block for 0x400090, 41 bytes>
0x400090:	mov	rax, rsp
0x400093:	add	rax, 0xf
0x400097:	shr	rax, 4
0x40009b:	shl	rax, 4
0x40009f:	mov	qword ptr [rbp - 0x80], rax
0x4000a3:	mov	rax, qword ptr [rbp - 0x80]
0x4000a7:	mov	edx, 0x63
0x4000ac:	mov	esi, 0x41
0x4000b1:	mov	rdi, rax
0x4000b4:	call	0x500000
<Block for 0x400080, 57 bytes>
0x400080:	and	eax, 0xfff
0x400085:	sub	rax, 8
0x400089:	add	rax, rsp
0x40008c:	or	qword ptr [rax], 0
0x400090:	mov	rax, rsp
0x400093:	add	rax, 0xf
0x400097:	shr	rax, 4
0x40009b:	shl	rax, 4
0x40009f:	mov	qword ptr [rbp - 0x80], rax
0x4000a3:	mov	rax, qword ptr [rbp - 0x80]
0x4000a7:	mov	edx, 0x63
0x4000ac:	mov	esi, 0x41
0x4000b1:	mov	rdi, rax
0x4000b4:	call	0x500000
<Block for 0x40004f, 5 bytes>
0x40004f:	cmp	rsp, rdx
0x400052:	je	0x400066
<Block for 0x4000b9, 46 bytes>
0x4000b9:	mov	rax, qword ptr [rbp - 0x80]
0x4000bd:	add	rax, 0x63
0x4000c1:	mov	byte ptr [rax], 0
0x4000c4:	mov	rax, qword ptr [rbp - 0x80]
0x4000c8:	sub	rax, 8
0x4000cc:	mov	qword ptr [rbp - 0x78], rax
0x4000d0:	nop	
0x4000d1:	lea	rax, [rbp - 0x70]
0x4000d5:	mov	edx, 0x63
0x4000da:	mov	esi, 0x43
0x4000df:	mov	rdi, rax
0x4000e2:	call	0x500000
<Block for 0x4000e7, 17 bytes>
0x4000e7:	mov	byte ptr [rbp - 0xd], 0
0x4000eb:	mov	qword ptr [rbp - 0x88], 0
0x4000f6:	jmp	0x400121
<Block for 0x400121, 10 bytes>
0x400121:	cmp	qword ptr [rbp - 0x88], 0x63
0x400129:	jbe	0x4000f8
<Block for 0x4000f8, 51 bytes>
0x4000f8:	mov	rdx, qword ptr [rbp - 0x78]
0x4000fc:	mov	rax, qword ptr [rbp - 0x88]
0x400103:	add	rdx, rax
0x400106:	lea	rcx, [rbp - 0x70]
0x40010a:	mov	rax, qword ptr [rbp - 0x88]
0x400111:	add	rax, rcx
0x400114:	movzx	eax, byte ptr [rax]
0x400117:	mov	byte ptr [rdx], al
0x400119:	add	qword ptr [rbp - 0x88], 1
0x400121:	cmp	qword ptr [rbp - 0x88], 0x63
0x400129:	jbe	0x4000f8
<Block for 0x40012b, 23 bytes>
0x40012b:	mov	rax, qword ptr [rbp - 0x78]
0x40012f:	add	rax, 0x63
0x400133:	mov	byte ptr [rax], 0
0x400136:	mov	rax, qword ptr [rbp - 0x78]
0x40013a:	mov	rdi, rax
0x40013d:	call	0x500008
<Block for 0x400142, 16 bytes>
0x400142:	nop	
0x400143:	mov	rax, qword ptr [rbp - 8]
0x400147:	xor	rax, qword ptr fs:[0x28]
0x400150:	je	0x400157
<Block for 0x400157, 2 bytes>
0x400157:	leave	
0x400158:	ret	
<Block for 0x400152, 5 bytes>
0x400152:	call	0x500010
