<Block for 0x400000, 55 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x100
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xe0]
0x400025:	mov	edx, 0x63
0x40002a:	mov	esi, 0x41
0x40002f:	mov	rdi, rax
0x400032:	call	0x500000
<Block for 0x400037, 16 bytes>
0x400037:	mov	byte ptr [rbp - 0x7d], 0
0x40003b:	mov	dword ptr [rbp - 0xf4], 0
0x400045:	jmp	0x400060
<Block for 0x400060, 9 bytes>
0x400060:	cmp	dword ptr [rbp - 0xf4], 0
0x400067:	jle	0x400047
<Block for 0x400047, 34 bytes>
0x400047:	lea	rax, [rbp - 0xe0]
0x40004e:	sub	rax, 8
0x400052:	mov	qword ptr [rbp - 0xf0], rax
0x400059:	add	dword ptr [rbp - 0xf4], 1
0x400060:	cmp	dword ptr [rbp - 0xf4], 0
0x400067:	jle	0x400047
<Block for 0x400069, 22 bytes>
0x400069:	lea	rax, [rbp - 0x70]
0x40006d:	mov	edx, 0x63
0x400072:	mov	esi, 0x43
0x400077:	mov	rdi, rax
0x40007a:	call	0x500000
<Block for 0x40007f, 17 bytes>
0x40007f:	mov	byte ptr [rbp - 0xd], 0
0x400083:	mov	qword ptr [rbp - 0xe8], 0
0x40008e:	jmp	0x4000bc
<Block for 0x4000bc, 10 bytes>
0x4000bc:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000c4:	jbe	0x400090
<Block for 0x400090, 54 bytes>
0x400090:	mov	rdx, qword ptr [rbp - 0xf0]
0x400097:	mov	rax, qword ptr [rbp - 0xe8]
0x40009e:	add	rdx, rax
0x4000a1:	lea	rcx, [rbp - 0x70]
0x4000a5:	mov	rax, qword ptr [rbp - 0xe8]
0x4000ac:	add	rax, rcx
0x4000af:	movzx	eax, byte ptr [rax]
0x4000b2:	mov	byte ptr [rdx], al
0x4000b4:	add	qword ptr [rbp - 0xe8], 1
0x4000bc:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000c4:	jbe	0x400090
<Block for 0x4000c6, 29 bytes>
0x4000c6:	mov	rax, qword ptr [rbp - 0xf0]
0x4000cd:	add	rax, 0x63
0x4000d1:	mov	byte ptr [rax], 0
0x4000d4:	mov	rax, qword ptr [rbp - 0xf0]
0x4000db:	mov	rdi, rax
0x4000de:	call	0x500008
<Block for 0x4000e3, 16 bytes>
0x4000e3:	nop	
0x4000e4:	mov	rax, qword ptr [rbp - 8]
0x4000e8:	xor	rax, qword ptr fs:[0x28]
0x4000f1:	je	0x4000f8
<Block for 0x4000f8, 2 bytes>
0x4000f8:	leave	
0x4000f9:	ret	
<Block for 0x4000f3, 5 bytes>
0x4000f3:	call	0x500010
