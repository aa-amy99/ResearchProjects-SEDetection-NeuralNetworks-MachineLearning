<Block for 0x400000, 57 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xa0
0x40000f:	mov	qword ptr [rbp - 0x98], rdi
0x400016:	mov	rax, qword ptr fs:[0x28]
0x40001f:	mov	qword ptr [rbp - 8], rax
0x400023:	xor	eax, eax
0x400025:	mov	rax, qword ptr [rbp - 0x98]
0x40002c:	mov	esi, 2
0x400031:	mov	rdi, rax
0x400034:	call	0x4001d0
<Block for 0x400039, 29 bytes>
0x400039:	mov	rax, qword ptr [rax]
0x40003c:	mov	qword ptr [rbp - 0x80], rax
0x400040:	lea	rax, [rbp - 0x70]
0x400044:	mov	edx, 0x63
0x400049:	mov	esi, 0x43
0x40004e:	mov	rdi, rax
0x400051:	call	0x500000
<Block for 0x400056, 16 bytes>
0x400056:	mov	byte ptr [rbp - 0xd], 0
0x40005a:	lea	rax, [rbp - 0x70]
0x40005e:	mov	rdi, rax
0x400061:	call	0x500008
<Block for 0x400066, 28 bytes>
0x400066:	mov	qword ptr [rbp - 0x78], rax
0x40006a:	mov	qword ptr [rbp - 0x88], 0
0x400075:	mov	rax, qword ptr [rbp - 0x88]
0x40007c:	cmp	rax, qword ptr [rbp - 0x78]
0x400080:	jae	0x4000ad
<Block for 0x400082, 43 bytes>
0x400082:	mov	rdx, qword ptr [rbp - 0x80]
0x400086:	mov	rax, qword ptr [rbp - 0x88]
0x40008d:	add	rax, rdx
0x400090:	movzx	eax, byte ptr [rax]
0x400093:	lea	rcx, [rbp - 0x70]
0x400097:	mov	rdx, qword ptr [rbp - 0x88]
0x40009e:	add	rdx, rcx
0x4000a1:	mov	byte ptr [rdx], al
0x4000a3:	add	qword ptr [rbp - 0x88], 1
0x4000ab:	jmp	0x400075
<Block for 0x4000ad, 16 bytes>
0x4000ad:	mov	byte ptr [rbp - 0xd], 0
0x4000b1:	lea	rax, [rbp - 0x70]
0x4000b5:	mov	rdi, rax
0x4000b8:	call	0x500010
<Block for 0x400075, 13 bytes>
0x400075:	mov	rax, qword ptr [rbp - 0x88]
0x40007c:	cmp	rax, qword ptr [rbp - 0x78]
0x400080:	jae	0x4000ad
<Block for 0x4000bd, 7 bytes>
0x4000bd:	cmp	qword ptr [rbp - 0x80], 0
0x4000c2:	je	0x4000d0
<Block for 0x4000d0, 16 bytes>
0x4000d0:	nop	
0x4000d1:	mov	rax, qword ptr [rbp - 8]
0x4000d5:	xor	rax, qword ptr fs:[0x28]
0x4000de:	je	0x4000e5
<Block for 0x4000c4, 12 bytes>
0x4000c4:	mov	rax, qword ptr [rbp - 0x80]
0x4000c8:	mov	rdi, rax
0x4000cb:	call	0x500018
<Block for 0x4000e5, 2 bytes>
0x4000e5:	leave	
0x4000e6:	ret	
<Block for 0x4000e0, 5 bytes>
0x4000e0:	call	0x500020
