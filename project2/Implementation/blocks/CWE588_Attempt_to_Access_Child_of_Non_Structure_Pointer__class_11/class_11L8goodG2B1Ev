<Block for 0x40006b, 53 bytes>
0x40006b:	endbr64	
0x40006f:	push	rbp
0x400070:	mov	rbp, rsp
0x400073:	sub	rsp, 0x20
0x400077:	mov	rax, qword ptr fs:[0x28]
0x400080:	mov	qword ptr [rbp - 8], rax
0x400084:	xor	eax, eax
0x400086:	mov	dword ptr [rbp - 0x1c], 0x64
0x40008d:	mov	dword ptr [rbp - 0x10], 0
0x400094:	mov	dword ptr [rbp - 0xc], 0
0x40009b:	call	0x500018
<Block for 0x4000a0, 9 bytes>
0x4000a0:	test	eax, eax
0x4000a2:	setne	al
0x4000a5:	test	al, al
0x4000a7:	je	0x4000b7
<Block for 0x4000b7, 22 bytes>
0x4000b7:	lea	rax, [rbp - 0x10]
0x4000bb:	mov	qword ptr [rbp - 0x18], rax
0x4000bf:	mov	rax, qword ptr [rbp - 0x18]
0x4000c3:	mov	eax, dword ptr [rax + 4]
0x4000c6:	mov	edi, eax
0x4000c8:	call	0x500008
<Block for 0x4000a9, 12 bytes>
0x4000a9:	lea	rdi, [rip + 0xb4]
0x4000b0:	call	0x500020
<Block for 0x4000cd, 16 bytes>
0x4000cd:	nop	
0x4000ce:	mov	rax, qword ptr [rbp - 8]
0x4000d2:	xor	rax, qword ptr fs:[0x28]
0x4000db:	je	0x4000e2
<Block for 0x4000b5, 2 bytes>
0x4000b5:	jmp	0x4000bf
<Block for 0x4000e2, 2 bytes>
0x4000e2:	leave	
0x4000e3:	ret	
<Block for 0x4000dd, 5 bytes>
0x4000dd:	call	0x500010
<Block for 0x4000bf, 14 bytes>
0x4000bf:	mov	rax, qword ptr [rbp - 0x18]
0x4000c3:	mov	eax, dword ptr [rax + 4]
0x4000c6:	mov	edi, eax
0x4000c8:	call	0x500008
