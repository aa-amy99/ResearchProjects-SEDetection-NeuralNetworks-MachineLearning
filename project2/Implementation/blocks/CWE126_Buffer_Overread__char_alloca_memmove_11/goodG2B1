<Block for 0x4001e9, 84 bytes>
0x4001e9:	endbr64	
0x4001ed:	push	rbp
0x4001ee:	mov	rbp, rsp
0x4001f1:	sub	rsp, 0x90
0x4001f8:	mov	rax, qword ptr fs:[0x28]
0x400201:	mov	qword ptr [rbp - 8], rax
0x400205:	xor	eax, eax
0x400207:	mov	eax, 0x10
0x40020c:	sub	rax, 1
0x400210:	add	rax, 0x3a
0x400214:	mov	ecx, 0x10
0x400219:	mov	edx, 0
0x40021e:	div	rcx
0x400221:	imul	rax, rax, 0x10
0x400225:	mov	rdx, rax
0x400228:	and	rdx, 0xfffffffffffff000
0x40022f:	mov	rcx, rsp
0x400232:	sub	rcx, rdx
0x400235:	mov	rdx, rcx
0x400238:	cmp	rsp, rdx
0x40023b:	je	0x40024f
<Block for 0x40024f, 26 bytes>
0x40024f:	mov	rdx, rax
0x400252:	and	edx, 0xfff
0x400258:	sub	rsp, rdx
0x40025b:	mov	rdx, rax
0x40025e:	and	edx, 0xfff
0x400264:	test	rdx, rdx
0x400267:	je	0x400279
<Block for 0x40023d, 18 bytes>
0x40023d:	sub	rsp, 0x1000
0x400244:	or	qword ptr [rsp + 0xff8], 0
0x40024d:	jmp	0x400238
<Block for 0x400279, 73 bytes>
0x400279:	mov	rax, rsp
0x40027c:	add	rax, 0xf
0x400280:	shr	rax, 4
0x400284:	shl	rax, 4
0x400288:	mov	qword ptr [rbp - 0x80], rax
0x40028c:	mov	eax, 0x10
0x400291:	sub	rax, 1
0x400295:	add	rax, 0x6c
0x400299:	mov	ecx, 0x10
0x40029e:	mov	edx, 0
0x4002a3:	div	rcx
0x4002a6:	imul	rax, rax, 0x10
0x4002aa:	mov	rdx, rax
0x4002ad:	and	rdx, 0xfffffffffffff000
0x4002b4:	mov	rsi, rsp
0x4002b7:	sub	rsi, rdx
0x4002ba:	mov	rdx, rsi
0x4002bd:	cmp	rsp, rdx
0x4002c0:	je	0x4002d4
<Block for 0x400269, 89 bytes>
0x400269:	and	eax, 0xfff
0x40026e:	sub	rax, 8
0x400272:	add	rax, rsp
0x400275:	or	qword ptr [rax], 0
0x400279:	mov	rax, rsp
0x40027c:	add	rax, 0xf
0x400280:	shr	rax, 4
0x400284:	shl	rax, 4
0x400288:	mov	qword ptr [rbp - 0x80], rax
0x40028c:	mov	eax, 0x10
0x400291:	sub	rax, 1
0x400295:	add	rax, 0x6c
0x400299:	mov	ecx, 0x10
0x40029e:	mov	edx, 0
0x4002a3:	div	rcx
0x4002a6:	imul	rax, rax, 0x10
0x4002aa:	mov	rdx, rax
0x4002ad:	and	rdx, 0xfffffffffffff000
0x4002b4:	mov	rsi, rsp
0x4002b7:	sub	rsi, rdx
0x4002ba:	mov	rdx, rsi
0x4002bd:	cmp	rsp, rdx
0x4002c0:	je	0x4002d4
<Block for 0x400238, 5 bytes>
0x400238:	cmp	rsp, rdx
0x40023b:	je	0x40024f
<Block for 0x4002d4, 26 bytes>
0x4002d4:	mov	rdx, rax
0x4002d7:	and	edx, 0xfff
0x4002dd:	sub	rsp, rdx
0x4002e0:	mov	rdx, rax
0x4002e3:	and	edx, 0xfff
0x4002e9:	test	rdx, rdx
0x4002ec:	je	0x4002fe
<Block for 0x4002c2, 18 bytes>
0x4002c2:	sub	rsp, 0x1000
0x4002c9:	or	qword ptr [rsp + 0xff8], 0
0x4002d2:	jmp	0x4002bd
<Block for 0x4002fe, 41 bytes>
0x4002fe:	mov	rax, rsp
0x400301:	add	rax, 0xf
0x400305:	shr	rax, 4
0x400309:	shl	rax, 4
0x40030d:	mov	qword ptr [rbp - 0x78], rax
0x400311:	mov	rax, qword ptr [rbp - 0x80]
0x400315:	mov	edx, 0x31
0x40031a:	mov	esi, 0x41
0x40031f:	mov	rdi, rax
0x400322:	call	0x500000
<Block for 0x4002ee, 57 bytes>
0x4002ee:	and	eax, 0xfff
0x4002f3:	sub	rax, 8
0x4002f7:	add	rax, rsp
0x4002fa:	or	qword ptr [rax], 0
0x4002fe:	mov	rax, rsp
0x400301:	add	rax, 0xf
0x400305:	shr	rax, 4
0x400309:	shl	rax, 4
0x40030d:	mov	qword ptr [rbp - 0x78], rax
0x400311:	mov	rax, qword ptr [rbp - 0x80]
0x400315:	mov	edx, 0x31
0x40031a:	mov	esi, 0x41
0x40031f:	mov	rdi, rax
0x400322:	call	0x500000
<Block for 0x4002bd, 5 bytes>
0x4002bd:	cmp	rsp, rdx
0x4002c0:	je	0x4002d4
<Block for 0x400327, 33 bytes>
0x400327:	mov	rax, qword ptr [rbp - 0x80]
0x40032b:	add	rax, 0x31
0x40032f:	mov	byte ptr [rax], 0
0x400332:	mov	rax, qword ptr [rbp - 0x78]
0x400336:	mov	edx, 0x63
0x40033b:	mov	esi, 0x41
0x400340:	mov	rdi, rax
0x400343:	call	0x500000
<Block for 0x400348, 21 bytes>
0x400348:	mov	rax, qword ptr [rbp - 0x78]
0x40034c:	add	rax, 0x63
0x400350:	mov	byte ptr [rax], 0
0x400353:	mov	eax, 0
0x400358:	call	0x500030
<Block for 0x40035d, 4 bytes>
0x40035d:	test	eax, eax
0x40035f:	je	0x40036f
<Block for 0x40036f, 33 bytes>
0x40036f:	mov	rax, qword ptr [rbp - 0x78]
0x400373:	mov	qword ptr [rbp - 0x88], rax
0x40037a:	lea	rax, [rbp - 0x70]
0x40037e:	mov	edx, 0x63
0x400383:	mov	esi, 0x43
0x400388:	mov	rdi, rax
0x40038b:	call	0x500000
<Block for 0x400361, 12 bytes>
0x400361:	lea	rdi, [rip + 0x280]
0x400368:	call	0x500020
<Block for 0x400390, 16 bytes>
0x400390:	mov	byte ptr [rbp - 0xd], 0
0x400394:	lea	rax, [rbp - 0x70]
0x400398:	mov	rdi, rax
0x40039b:	call	0x500010
<Block for 0x40036d, 2 bytes>
0x40036d:	jmp	0x40037a
<Block for 0x4003a0, 25 bytes>
0x4003a0:	mov	rdx, rax
0x4003a3:	mov	rcx, qword ptr [rbp - 0x88]
0x4003aa:	lea	rax, [rbp - 0x70]
0x4003ae:	mov	rsi, rcx
0x4003b1:	mov	rdi, rax
0x4003b4:	call	0x500018
<Block for 0x40037a, 22 bytes>
0x40037a:	lea	rax, [rbp - 0x70]
0x40037e:	mov	edx, 0x63
0x400383:	mov	esi, 0x43
0x400388:	mov	rdi, rax
0x40038b:	call	0x500000
<Block for 0x4003b9, 16 bytes>
0x4003b9:	mov	byte ptr [rbp - 0xd], 0
0x4003bd:	lea	rax, [rbp - 0x70]
0x4003c1:	mov	rdi, rax
0x4003c4:	call	0x500020
<Block for 0x4003c9, 16 bytes>
0x4003c9:	nop	
0x4003ca:	mov	rax, qword ptr [rbp - 8]
0x4003ce:	xor	rax, qword ptr fs:[0x28]
0x4003d7:	je	0x4003de
<Block for 0x4003de, 2 bytes>
0x4003de:	leave	
0x4003df:	ret	
<Block for 0x4003d9, 5 bytes>
0x4003d9:	call	0x500028
