<Block for 0x400407, 46 bytes>
0x400407:	endbr64	
0x40040b:	push	rbp
0x40040c:	mov	rbp, rsp
0x40040f:	push	rbx
0x400410:	sub	rsp, 0xc8
0x400417:	mov	rax, qword ptr fs:[0x28]
0x400420:	mov	qword ptr [rbp - 0x18], rax
0x400424:	xor	eax, eax
0x400426:	lea	rax, [rbp - 0xc0]
0x40042d:	mov	rdi, rax
0x400430:	call	0x400744
<Block for 0x400435, 129 bytes>
0x400435:	mov	qword ptr [rbp - 0x80], 0
0x40043d:	mov	qword ptr [rbp - 0x78], 0
0x400445:	mov	qword ptr [rbp - 0x70], 0
0x40044d:	mov	qword ptr [rbp - 0x68], 0
0x400455:	mov	qword ptr [rbp - 0x60], 0
0x40045d:	mov	qword ptr [rbp - 0x58], 0
0x400465:	mov	qword ptr [rbp - 0x50], 0
0x40046d:	mov	qword ptr [rbp - 0x48], 0
0x400475:	mov	qword ptr [rbp - 0x40], 0
0x40047d:	mov	qword ptr [rbp - 0x38], 0
0x400485:	mov	qword ptr [rbp - 0x30], 0
0x40048d:	mov	qword ptr [rbp - 0x28], 0
0x400495:	mov	dword ptr [rbp - 0x20], 0
0x40049c:	lea	rax, [rbp - 0x80]
0x4004a0:	mov	qword ptr [rbp - 0xd0], rax
0x4004a7:	mov	rax, qword ptr [rbp - 0xd0]
0x4004ae:	mov	rdi, rax
0x4004b1:	call	0x500000
<Block for 0x4004b6, 29 bytes>
0x4004b6:	mov	qword ptr [rbp - 0xc8], rax
0x4004bd:	mov	eax, 0x64
0x4004c2:	sub	rax, qword ptr [rbp - 0xc8]
0x4004c9:	cmp	rax, 1
0x4004cd:	jbe	0x400588
<Block for 0x400588, 25 bytes>
0x400588:	lea	rdx, [rbp - 0xd0]
0x40058f:	lea	rax, [rbp - 0xc0]
0x400596:	mov	rsi, rdx
0x400599:	mov	rdi, rax
0x40059c:	call	0x400854
<Block for 0x4004d3, 53 bytes>
0x4004d3:	mov	rax, qword ptr [rip + 0xffb2e]
0x4004da:	mov	rdx, qword ptr [rbp - 0xc8]
0x4004e1:	mov	ecx, 0x64
0x4004e6:	sub	ecx, edx
0x4004e8:	mov	edx, ecx
0x4004ea:	mov	esi, edx
0x4004ec:	mov	rcx, qword ptr [rbp - 0xd0]
0x4004f3:	mov	rdx, qword ptr [rbp - 0xc8]
0x4004fa:	add	rcx, rdx
0x4004fd:	mov	rdx, rax
0x400500:	mov	rdi, rcx
0x400503:	call	0x500010
<Block for 0x4005a1, 25 bytes>
0x4005a1:	lea	rdx, [rbp - 0xd0]
0x4005a8:	lea	rax, [rbp - 0xc0]
0x4005af:	mov	rsi, rdx
0x4005b2:	mov	rdi, rax
0x4005b5:	call	0x400854
<Block for 0x400508, 10 bytes>
0x400508:	test	rax, rax
0x40050b:	setne	al
0x40050e:	test	al, al
0x400510:	je	0x400568
<Block for 0x4005ba, 25 bytes>
0x4005ba:	lea	rdx, [rbp - 0xd0]
0x4005c1:	lea	rax, [rbp - 0xc0]
0x4005c8:	mov	rsi, rdx
0x4005cb:	mov	rdi, rax
0x4005ce:	call	0x400854
<Block for 0x400568, 12 bytes>
0x400568:	lea	rdi, [rip + 0x130]
0x40056f:	call	0x500018
<Block for 0x400512, 15 bytes>
0x400512:	mov	rax, qword ptr [rbp - 0xd0]
0x400519:	mov	rdi, rax
0x40051c:	call	0x500000
<Block for 0x4005d3, 25 bytes>
0x4005d3:	lea	rdx, [rbp - 0xc0]
0x4005da:	lea	rax, [rbp - 0xa0]
0x4005e1:	mov	rsi, rdx
0x4005e4:	mov	rdi, rax
0x4005e7:	call	0x40088e
<Block for 0x400574, 45 bytes>
0x400574:	mov	rdx, qword ptr [rbp - 0xd0]
0x40057b:	mov	rax, qword ptr [rbp - 0xc8]
0x400582:	add	rax, rdx
0x400585:	mov	byte ptr [rax], 0
0x400588:	lea	rdx, [rbp - 0xd0]
0x40058f:	lea	rax, [rbp - 0xc0]
0x400596:	mov	rsi, rdx
0x400599:	mov	rdi, rax
0x40059c:	call	0x400854
<Block for 0x400521, 17 bytes>
0x400521:	mov	qword ptr [rbp - 0xc8], rax
0x400528:	cmp	qword ptr [rbp - 0xc8], 0
0x400530:	je	0x400588
<Block for 0x4005ec, 15 bytes>
0x4005ec:	lea	rax, [rbp - 0xa0]
0x4005f3:	mov	rdi, rax
0x4005f6:	call	0x500040
<Block for 0x400532, 28 bytes>
0x400532:	mov	rax, qword ptr [rbp - 0xd0]
0x400539:	mov	rdx, qword ptr [rbp - 0xc8]
0x400540:	sub	rdx, 1
0x400544:	add	rax, rdx
0x400547:	movzx	eax, byte ptr [rax]
0x40054a:	cmp	al, 0xa
0x40054c:	jne	0x400588
<Block for 0x4005fb, 15 bytes>
0x4005fb:	lea	rax, [rbp - 0xa0]
0x400602:	mov	rdi, rax
0x400605:	call	0x400764
<Block for 0x40054e, 26 bytes>
0x40054e:	mov	rax, qword ptr [rbp - 0xd0]
0x400555:	mov	rdx, qword ptr [rbp - 0xc8]
0x40055c:	sub	rdx, 1
0x400560:	add	rax, rdx
0x400563:	mov	byte ptr [rax], 0
0x400566:	jmp	0x400588
<Block for 0x40060a, 15 bytes>
0x40060a:	lea	rax, [rbp - 0xc0]
0x400611:	mov	rdi, rax
0x400614:	call	0x400764
<Block for 0x400619, 16 bytes>
0x400619:	nop	
0x40061a:	mov	rax, qword ptr [rbp - 0x18]
0x40061e:	xor	rax, qword ptr fs:[0x28]
0x400627:	je	0x400669
<Block for 0x400669, 10 bytes>
0x400669:	add	rsp, 0xc8
0x400670:	pop	rbx
0x400671:	pop	rbp
0x400672:	ret	
<Block for 0x400629, 2 bytes>
0x400629:	jmp	0x400664
<Block for 0x400664, 5 bytes>
0x400664:	call	0x500030
