<Block for 0x400000, 83 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x138
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 0x18], rax
0x40001d:	xor	eax, eax
0x40001f:	movabs	rax, 0x3d48544150
0x400029:	mov	edx, 0
0x40002e:	mov	qword ptr [rbp - 0x120], rax
0x400035:	mov	qword ptr [rbp - 0x118], rdx
0x40003c:	lea	rdx, [rbp - 0x110]
0x400043:	mov	eax, 0
0x400048:	mov	ecx, 0x1d
0x40004d:	mov	rdi, rdx
0x400050:	rep stosq	qword ptr [rdi], rax
<Block for 0x400053, 39 bytes>
0x400053:	mov	rdx, rdi
0x400056:	mov	word ptr [rdx], ax
0x400059:	add	rdx, 2
0x40005d:	lea	rax, [rbp - 0x120]
0x400064:	mov	qword ptr [rbp - 0x140], rax
0x40006b:	mov	rax, qword ptr [rbp - 0x140]
0x400072:	mov	rdi, rax
0x400075:	call	0x500000
<Block for 0x400050, 3 bytes>
0x400050:	rep stosq	qword ptr [rdi], rax
<Block for 0x40007a, 29 bytes>
0x40007a:	mov	qword ptr [rbp - 0x138], rax
0x400081:	mov	eax, 0xfa
0x400086:	sub	rax, qword ptr [rbp - 0x138]
0x40008d:	cmp	rax, 1
0x400091:	jbe	0x40012a
<Block for 0x40012a, 10 bytes>
0x40012a:	mov	edi, 8
0x40012f:	call	0x500028
<Block for 0x400097, 19 bytes>
0x400097:	lea	rsi, [rip + 0x279]
0x40009e:	lea	rdi, [rip + 0x274]
0x4000a5:	call	0x500008
<Block for 0x400134, 11 bytes>
0x400134:	mov	rbx, rax
0x400137:	mov	rdi, rbx
0x40013a:	call	0x4002ea
<Block for 0x4000aa, 17 bytes>
0x4000aa:	mov	qword ptr [rbp - 0x130], rax
0x4000b1:	cmp	qword ptr [rbp - 0x130], 0
0x4000b9:	je	0x40012a
<Block for 0x40013f, 42 bytes>
0x40013f:	mov	qword ptr [rbp - 0x128], rbx
0x400146:	mov	rax, qword ptr [rbp - 0x128]
0x40014d:	mov	rax, qword ptr [rax]
0x400150:	mov	rcx, qword ptr [rax]
0x400153:	mov	rdx, qword ptr [rbp - 0x140]
0x40015a:	mov	rax, qword ptr [rbp - 0x128]
0x400161:	mov	rsi, rdx
0x400164:	mov	rdi, rax
0x400167:	call	rcx
<Block for 0x4000bb, 54 bytes>
0x4000bb:	mov	rax, qword ptr [rbp - 0x138]
0x4000c2:	mov	edx, 0xfa
0x4000c7:	sub	edx, eax
0x4000c9:	mov	eax, edx
0x4000cb:	mov	esi, eax
0x4000cd:	mov	rdx, qword ptr [rbp - 0x140]
0x4000d4:	mov	rax, qword ptr [rbp - 0x138]
0x4000db:	lea	rcx, [rdx + rax]
0x4000df:	mov	rax, qword ptr [rbp - 0x130]
0x4000e6:	mov	rdx, rax
0x4000e9:	mov	rdi, rcx
0x4000ec:	call	0x500010
<Block for 0x400169, 12 bytes>
0x400169:	mov	rax, qword ptr [rbp - 0x128]
0x400170:	test	rax, rax
0x400173:	je	0x400182
<Block for 0x4000f1, 10 bytes>
0x4000f1:	test	rax, rax
0x4000f4:	sete	al
0x4000f7:	test	al, al
0x4000f9:	je	0x40011b
<Block for 0x400182, 16 bytes>
0x400182:	nop	
0x400183:	mov	rax, qword ptr [rbp - 0x18]
0x400187:	xor	rax, qword ptr fs:[0x28]
0x400190:	je	0x400197
<Block for 0x400175, 13 bytes>
0x400175:	mov	esi, 8
0x40017a:	mov	rdi, rax
0x40017d:	call	0x500030
<Block for 0x40011b, 15 bytes>
0x40011b:	mov	rax, qword ptr [rbp - 0x130]
0x400122:	mov	rdi, rax
0x400125:	call	0x500020
<Block for 0x4000fb, 12 bytes>
0x4000fb:	lea	rdi, [rip + 0x225]
0x400102:	call	0x500018
<Block for 0x400197, 10 bytes>
0x400197:	add	rsp, 0x138
0x40019e:	pop	rbx
0x40019f:	pop	rbp
0x4001a0:	ret	
<Block for 0x400192, 5 bytes>
0x400192:	call	0x500038
<Block for 0x400107, 35 bytes>
0x400107:	mov	rdx, qword ptr [rbp - 0x140]
0x40010e:	mov	rax, qword ptr [rbp - 0x138]
0x400115:	add	rax, rdx
0x400118:	mov	byte ptr [rax], 0
0x40011b:	mov	rax, qword ptr [rbp - 0x130]
0x400122:	mov	rdi, rax
0x400125:	call	0x500020
