<Block for 0x400234, 84 bytes>
0x400234:	endbr64	
0x400238:	push	rbp
0x400239:	mov	rbp, rsp
0x40023c:	sub	rsp, 0xa0
0x400243:	mov	rax, qword ptr fs:[0x28]
0x40024c:	mov	qword ptr [rbp - 8], rax
0x400250:	xor	eax, eax
0x400252:	mov	eax, 0x10
0x400257:	sub	rax, 1
0x40025b:	add	rax, 0x3a
0x40025f:	mov	ecx, 0x10
0x400264:	mov	edx, 0
0x400269:	div	rcx
0x40026c:	imul	rax, rax, 0x10
0x400270:	mov	rdx, rax
0x400273:	and	rdx, 0xfffffffffffff000
0x40027a:	mov	rcx, rsp
0x40027d:	sub	rcx, rdx
0x400280:	mov	rdx, rcx
0x400283:	cmp	rsp, rdx
0x400286:	je	0x40029a
<Block for 0x40029a, 26 bytes>
0x40029a:	mov	rdx, rax
0x40029d:	and	edx, 0xfff
0x4002a3:	sub	rsp, rdx
0x4002a6:	mov	rdx, rax
0x4002a9:	and	edx, 0xfff
0x4002af:	test	rdx, rdx
0x4002b2:	je	0x4002c4
<Block for 0x400288, 18 bytes>
0x400288:	sub	rsp, 0x1000
0x40028f:	or	qword ptr [rsp + 0xff8], 0
0x400298:	jmp	0x400283
<Block for 0x4002c4, 76 bytes>
0x4002c4:	mov	rax, rsp
0x4002c7:	add	rax, 0xf
0x4002cb:	shr	rax, 4
0x4002cf:	shl	rax, 4
0x4002d3:	mov	qword ptr [rbp - 0x88], rax
0x4002da:	mov	eax, 0x10
0x4002df:	sub	rax, 1
0x4002e3:	add	rax, 0x6c
0x4002e7:	mov	edi, 0x10
0x4002ec:	mov	edx, 0
0x4002f1:	div	rdi
0x4002f4:	imul	rax, rax, 0x10
0x4002f8:	mov	rdx, rax
0x4002fb:	and	rdx, 0xfffffffffffff000
0x400302:	mov	rsi, rsp
0x400305:	sub	rsi, rdx
0x400308:	mov	rdx, rsi
0x40030b:	cmp	rsp, rdx
0x40030e:	je	0x400322
<Block for 0x4002b4, 92 bytes>
0x4002b4:	and	eax, 0xfff
0x4002b9:	sub	rax, 8
0x4002bd:	add	rax, rsp
0x4002c0:	or	qword ptr [rax], 0
0x4002c4:	mov	rax, rsp
0x4002c7:	add	rax, 0xf
0x4002cb:	shr	rax, 4
0x4002cf:	shl	rax, 4
0x4002d3:	mov	qword ptr [rbp - 0x88], rax
0x4002da:	mov	eax, 0x10
0x4002df:	sub	rax, 1
0x4002e3:	add	rax, 0x6c
0x4002e7:	mov	edi, 0x10
0x4002ec:	mov	edx, 0
0x4002f1:	div	rdi
0x4002f4:	imul	rax, rax, 0x10
0x4002f8:	mov	rdx, rax
0x4002fb:	and	rdx, 0xfffffffffffff000
0x400302:	mov	rsi, rsp
0x400305:	sub	rsi, rdx
0x400308:	mov	rdx, rsi
0x40030b:	cmp	rsp, rdx
0x40030e:	je	0x400322
<Block for 0x400283, 5 bytes>
0x400283:	cmp	rsp, rdx
0x400286:	je	0x40029a
<Block for 0x400322, 26 bytes>
0x400322:	mov	rdx, rax
0x400325:	and	edx, 0xfff
0x40032b:	sub	rsp, rdx
0x40032e:	mov	rdx, rax
0x400331:	and	edx, 0xfff
0x400337:	test	rdx, rdx
0x40033a:	je	0x40034c
<Block for 0x400310, 18 bytes>
0x400310:	sub	rsp, 0x1000
0x400317:	or	qword ptr [rsp + 0xff8], 0
0x400320:	jmp	0x40030b
<Block for 0x40034c, 44 bytes>
0x40034c:	mov	rax, rsp
0x40034f:	add	rax, 0xf
0x400353:	shr	rax, 4
0x400357:	shl	rax, 4
0x40035b:	mov	qword ptr [rbp - 0x80], rax
0x40035f:	mov	rax, qword ptr [rbp - 0x88]
0x400366:	mov	edx, 0x31
0x40036b:	mov	esi, 0x41
0x400370:	mov	rdi, rax
0x400373:	call	0x500000
<Block for 0x40033c, 60 bytes>
0x40033c:	and	eax, 0xfff
0x400341:	sub	rax, 8
0x400345:	add	rax, rsp
0x400348:	or	qword ptr [rax], 0
0x40034c:	mov	rax, rsp
0x40034f:	add	rax, 0xf
0x400353:	shr	rax, 4
0x400357:	shl	rax, 4
0x40035b:	mov	qword ptr [rbp - 0x80], rax
0x40035f:	mov	rax, qword ptr [rbp - 0x88]
0x400366:	mov	edx, 0x31
0x40036b:	mov	esi, 0x41
0x400370:	mov	rdi, rax
0x400373:	call	0x500000
<Block for 0x40030b, 5 bytes>
0x40030b:	cmp	rsp, rdx
0x40030e:	je	0x400322
<Block for 0x400378, 36 bytes>
0x400378:	mov	rax, qword ptr [rbp - 0x88]
0x40037f:	add	rax, 0x31
0x400383:	mov	byte ptr [rax], 0
0x400386:	mov	rax, qword ptr [rbp - 0x80]
0x40038a:	mov	edx, 0x63
0x40038f:	mov	esi, 0x41
0x400394:	mov	rdi, rax
0x400397:	call	0x500000
<Block for 0x40039c, 23 bytes>
0x40039c:	mov	rax, qword ptr [rbp - 0x80]
0x4003a0:	add	rax, 0x63
0x4003a4:	mov	byte ptr [rax], 0
0x4003a7:	mov	dword ptr [rbp - 0x9c], 0
0x4003b1:	jmp	0x4003c5
<Block for 0x4003c5, 9 bytes>
0x4003c5:	cmp	dword ptr [rbp - 0x9c], 0
0x4003cc:	jle	0x4003b3
<Block for 0x4003b3, 27 bytes>
0x4003b3:	mov	rax, qword ptr [rbp - 0x80]
0x4003b7:	mov	qword ptr [rbp - 0x98], rax
0x4003be:	add	dword ptr [rbp - 0x9c], 1
0x4003c5:	cmp	dword ptr [rbp - 0x9c], 0
0x4003cc:	jle	0x4003b3
<Block for 0x4003ce, 22 bytes>
0x4003ce:	lea	rax, [rbp - 0x70]
0x4003d2:	mov	edx, 0x63
0x4003d7:	mov	esi, 0x43
0x4003dc:	mov	rdi, rax
0x4003df:	call	0x500000
<Block for 0x4003e4, 16 bytes>
0x4003e4:	mov	byte ptr [rbp - 0xd], 0
0x4003e8:	lea	rax, [rbp - 0x70]
0x4003ec:	mov	rdi, rax
0x4003ef:	call	0x500008
<Block for 0x4003f4, 17 bytes>
0x4003f4:	mov	qword ptr [rbp - 0x78], rax
0x4003f8:	mov	qword ptr [rbp - 0x90], 0
0x400403:	jmp	0x400431
<Block for 0x400431, 13 bytes>
0x400431:	mov	rax, qword ptr [rbp - 0x90]
0x400438:	cmp	rax, qword ptr [rbp - 0x78]
0x40043c:	jb	0x400405
<Block for 0x400405, 57 bytes>
0x400405:	mov	rdx, qword ptr [rbp - 0x98]
0x40040c:	mov	rax, qword ptr [rbp - 0x90]
0x400413:	add	rax, rdx
0x400416:	movzx	eax, byte ptr [rax]
0x400419:	lea	rcx, [rbp - 0x70]
0x40041d:	mov	rdx, qword ptr [rbp - 0x90]
0x400424:	add	rdx, rcx
0x400427:	mov	byte ptr [rdx], al
0x400429:	add	qword ptr [rbp - 0x90], 1
0x400431:	mov	rax, qword ptr [rbp - 0x90]
0x400438:	cmp	rax, qword ptr [rbp - 0x78]
0x40043c:	jb	0x400405
<Block for 0x40043e, 16 bytes>
0x40043e:	mov	byte ptr [rbp - 0xd], 0
0x400442:	lea	rax, [rbp - 0x70]
0x400446:	mov	rdi, rax
0x400449:	call	0x500010
<Block for 0x40044e, 16 bytes>
0x40044e:	nop	
0x40044f:	mov	rax, qword ptr [rbp - 8]
0x400453:	xor	rax, qword ptr fs:[0x28]
0x40045c:	je	0x400463
<Block for 0x400463, 2 bytes>
0x400463:	leave	
0x400464:	ret	
<Block for 0x40045e, 5 bytes>
0x40045e:	call	0x500018
