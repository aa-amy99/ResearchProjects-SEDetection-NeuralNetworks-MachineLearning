<Block for 0x40019a, 81 bytes>
0x40019a:	endbr64	
0x40019e:	push	rbp
0x40019f:	mov	rbp, rsp
0x4001a2:	sub	rsp, 0x30
0x4001a6:	mov	rax, qword ptr fs:[0x28]
0x4001af:	mov	qword ptr [rbp - 8], rax
0x4001b3:	xor	eax, eax
0x4001b5:	mov	eax, 0x10
0x4001ba:	sub	rax, 1
0x4001be:	add	rax, 0x3a
0x4001c2:	mov	ecx, 0x10
0x4001c7:	mov	edx, 0
0x4001cc:	div	rcx
0x4001cf:	imul	rax, rax, 0x10
0x4001d3:	mov	rdx, rax
0x4001d6:	and	rdx, 0xfffffffffffff000
0x4001dd:	mov	rcx, rsp
0x4001e0:	sub	rcx, rdx
0x4001e3:	mov	rdx, rcx
0x4001e6:	cmp	rsp, rdx
0x4001e9:	je	0x4001fd
<Block for 0x4001fd, 26 bytes>
0x4001fd:	mov	rdx, rax
0x400200:	and	edx, 0xfff
0x400206:	sub	rsp, rdx
0x400209:	mov	rdx, rax
0x40020c:	and	edx, 0xfff
0x400212:	test	rdx, rdx
0x400215:	je	0x400227
<Block for 0x4001eb, 18 bytes>
0x4001eb:	sub	rsp, 0x1000
0x4001f2:	or	qword ptr [rsp + 0xff8], 0
0x4001fb:	jmp	0x4001e6
<Block for 0x400227, 73 bytes>
0x400227:	mov	rax, rsp
0x40022a:	add	rax, 0xf
0x40022e:	shr	rax, 4
0x400232:	shl	rax, 4
0x400236:	mov	qword ptr [rbp - 0x20], rax
0x40023a:	mov	eax, 0x10
0x40023f:	sub	rax, 1
0x400243:	add	rax, 0x6c
0x400247:	mov	edi, 0x10
0x40024c:	mov	edx, 0
0x400251:	div	rdi
0x400254:	imul	rax, rax, 0x10
0x400258:	mov	rdx, rax
0x40025b:	and	rdx, 0xfffffffffffff000
0x400262:	mov	rsi, rsp
0x400265:	sub	rsi, rdx
0x400268:	mov	rdx, rsi
0x40026b:	cmp	rsp, rdx
0x40026e:	je	0x400282
<Block for 0x400217, 89 bytes>
0x400217:	and	eax, 0xfff
0x40021c:	sub	rax, 8
0x400220:	add	rax, rsp
0x400223:	or	qword ptr [rax], 0
0x400227:	mov	rax, rsp
0x40022a:	add	rax, 0xf
0x40022e:	shr	rax, 4
0x400232:	shl	rax, 4
0x400236:	mov	qword ptr [rbp - 0x20], rax
0x40023a:	mov	eax, 0x10
0x40023f:	sub	rax, 1
0x400243:	add	rax, 0x6c
0x400247:	mov	edi, 0x10
0x40024c:	mov	edx, 0
0x400251:	div	rdi
0x400254:	imul	rax, rax, 0x10
0x400258:	mov	rdx, rax
0x40025b:	and	rdx, 0xfffffffffffff000
0x400262:	mov	rsi, rsp
0x400265:	sub	rsi, rdx
0x400268:	mov	rdx, rsi
0x40026b:	cmp	rsp, rdx
0x40026e:	je	0x400282
<Block for 0x4001e6, 5 bytes>
0x4001e6:	cmp	rsp, rdx
0x4001e9:	je	0x4001fd
<Block for 0x400282, 26 bytes>
0x400282:	mov	rdx, rax
0x400285:	and	edx, 0xfff
0x40028b:	sub	rsp, rdx
0x40028e:	mov	rdx, rax
0x400291:	and	edx, 0xfff
0x400297:	test	rdx, rdx
0x40029a:	je	0x4002ac
<Block for 0x400270, 18 bytes>
0x400270:	sub	rsp, 0x1000
0x400277:	or	qword ptr [rsp + 0xff8], 0
0x400280:	jmp	0x40026b
<Block for 0x4002ac, 41 bytes>
0x4002ac:	mov	rax, rsp
0x4002af:	add	rax, 0xf
0x4002b3:	shr	rax, 4
0x4002b7:	shl	rax, 4
0x4002bb:	mov	qword ptr [rbp - 0x18], rax
0x4002bf:	mov	rax, qword ptr [rbp - 0x20]
0x4002c3:	mov	edx, 0x31
0x4002c8:	mov	esi, 0x41
0x4002cd:	mov	rdi, rax
0x4002d0:	call	0x500000
<Block for 0x40029c, 57 bytes>
0x40029c:	and	eax, 0xfff
0x4002a1:	sub	rax, 8
0x4002a5:	add	rax, rsp
0x4002a8:	or	qword ptr [rax], 0
0x4002ac:	mov	rax, rsp
0x4002af:	add	rax, 0xf
0x4002b3:	shr	rax, 4
0x4002b7:	shl	rax, 4
0x4002bb:	mov	qword ptr [rbp - 0x18], rax
0x4002bf:	mov	rax, qword ptr [rbp - 0x20]
0x4002c3:	mov	edx, 0x31
0x4002c8:	mov	esi, 0x41
0x4002cd:	mov	rdi, rax
0x4002d0:	call	0x500000
<Block for 0x40026b, 5 bytes>
0x40026b:	cmp	rsp, rdx
0x40026e:	je	0x400282
<Block for 0x4002d5, 33 bytes>
0x4002d5:	mov	rax, qword ptr [rbp - 0x20]
0x4002d9:	add	rax, 0x31
0x4002dd:	mov	byte ptr [rax], 0
0x4002e0:	mov	rax, qword ptr [rbp - 0x18]
0x4002e4:	mov	edx, 0x63
0x4002e9:	mov	esi, 0x41
0x4002ee:	mov	rdi, rax
0x4002f1:	call	0x500000
<Block for 0x4002f6, 39 bytes>
0x4002f6:	mov	rax, qword ptr [rbp - 0x18]
0x4002fa:	add	rax, 0x63
0x4002fe:	mov	byte ptr [rax], 0
0x400301:	mov	rax, qword ptr [rbp - 0x18]
0x400305:	mov	qword ptr [rbp - 0x10], rax
0x400309:	mov	rax, qword ptr [rbp - 0x10]
0x40030d:	mov	qword ptr [rbp - 0x28], rax
0x400311:	mov	rax, qword ptr [rbp - 0x28]
0x400315:	mov	rdi, rax
0x400318:	call	0x500018
<Block for 0x40031d, 16 bytes>
0x40031d:	nop	
0x40031e:	mov	rax, qword ptr [rbp - 8]
0x400322:	xor	rax, qword ptr fs:[0x28]
0x40032b:	je	0x400332
<Block for 0x400332, 2 bytes>
0x400332:	leave	
0x400333:	ret	
<Block for 0x40032d, 5 bytes>
0x40032d:	call	0x500010
