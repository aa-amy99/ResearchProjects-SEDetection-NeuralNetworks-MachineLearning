<Block for 0x400000, 80 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	qword ptr [rbp - 0x38], rdi
0x400010:	mov	dword ptr [rbp - 0x3c], esi
0x400013:	mov	rax, qword ptr fs:[0x28]
0x40001c:	mov	qword ptr [rbp - 8], rax
0x400020:	xor	eax, eax
0x400022:	mov	qword ptr [rbp - 0x30], 0
0x40002a:	mov	qword ptr [rbp - 0x28], 0
0x400032:	mov	qword ptr [rbp - 0x20], 0
0x40003a:	mov	qword ptr [rbp - 0x18], 0
0x400042:	mov	qword ptr [rbp - 0x10], 0
0x40004a:	cmp	dword ptr [rbp - 0x3c], 0
0x40004e:	js	0x400068
<Block for 0x400068, 12 bytes>
0x400068:	lea	rdi, [rip + 0x21]
0x40006f:	call	0x500008
<Block for 0x400050, 6 bytes>
0x400050:	cmp	dword ptr [rbp - 0x3c], 9
0x400054:	jg	0x400068
<Block for 0x400074, 16 bytes>
0x400074:	nop	
0x400075:	mov	rax, qword ptr [rbp - 8]
0x400079:	xor	rax, qword ptr fs:[0x28]
0x400082:	je	0x400089
<Block for 0x400056, 16 bytes>
0x400056:	mov	eax, dword ptr [rbp - 0x3c]
0x400059:	cdqe	
0x40005b:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x40005f:	mov	edi, eax
0x400061:	call	0x500000
<Block for 0x400089, 2 bytes>
0x400089:	leave	
0x40008a:	ret	
<Block for 0x400084, 5 bytes>
0x400084:	call	0x500010
<Block for 0x400066, 2 bytes>
0x400066:	jmp	0x400074
