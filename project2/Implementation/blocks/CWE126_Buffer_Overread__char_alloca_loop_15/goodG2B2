<Block for 0x400438, 84 bytes>
0x400438:	endbr64	
0x40043c:	push	rbp
0x40043d:	mov	rbp, rsp
0x400440:	sub	rsp, 0xa0
0x400447:	mov	rax, qword ptr fs:[0x28]
0x400450:	mov	qword ptr [rbp - 8], rax
0x400454:	xor	eax, eax
0x400456:	mov	eax, 0x10
0x40045b:	sub	rax, 1
0x40045f:	add	rax, 0x3a
0x400463:	mov	ecx, 0x10
0x400468:	mov	edx, 0
0x40046d:	div	rcx
0x400470:	imul	rax, rax, 0x10
0x400474:	mov	rdx, rax
0x400477:	and	rdx, 0xfffffffffffff000
0x40047e:	mov	rcx, rsp
0x400481:	sub	rcx, rdx
0x400484:	mov	rdx, rcx
0x400487:	cmp	rsp, rdx
0x40048a:	je	0x40049e
<Block for 0x40049e, 26 bytes>
0x40049e:	mov	rdx, rax
0x4004a1:	and	edx, 0xfff
0x4004a7:	sub	rsp, rdx
0x4004aa:	mov	rdx, rax
0x4004ad:	and	edx, 0xfff
0x4004b3:	test	rdx, rdx
0x4004b6:	je	0x4004c8
<Block for 0x40048c, 18 bytes>
0x40048c:	sub	rsp, 0x1000
0x400493:	or	qword ptr [rsp + 0xff8], 0
0x40049c:	jmp	0x400487
<Block for 0x4004c8, 76 bytes>
0x4004c8:	mov	rax, rsp
0x4004cb:	add	rax, 0xf
0x4004cf:	shr	rax, 4
0x4004d3:	shl	rax, 4
0x4004d7:	mov	qword ptr [rbp - 0x90], rax
0x4004de:	mov	eax, 0x10
0x4004e3:	sub	rax, 1
0x4004e7:	add	rax, 0x6c
0x4004eb:	mov	edi, 0x10
0x4004f0:	mov	edx, 0
0x4004f5:	div	rdi
0x4004f8:	imul	rax, rax, 0x10
0x4004fc:	mov	rdx, rax
0x4004ff:	and	rdx, 0xfffffffffffff000
0x400506:	mov	rsi, rsp
0x400509:	sub	rsi, rdx
0x40050c:	mov	rdx, rsi
0x40050f:	cmp	rsp, rdx
0x400512:	je	0x400526
<Block for 0x4004b8, 92 bytes>
0x4004b8:	and	eax, 0xfff
0x4004bd:	sub	rax, 8
0x4004c1:	add	rax, rsp
0x4004c4:	or	qword ptr [rax], 0
0x4004c8:	mov	rax, rsp
0x4004cb:	add	rax, 0xf
0x4004cf:	shr	rax, 4
0x4004d3:	shl	rax, 4
0x4004d7:	mov	qword ptr [rbp - 0x90], rax
0x4004de:	mov	eax, 0x10
0x4004e3:	sub	rax, 1
0x4004e7:	add	rax, 0x6c
0x4004eb:	mov	edi, 0x10
0x4004f0:	mov	edx, 0
0x4004f5:	div	rdi
0x4004f8:	imul	rax, rax, 0x10
0x4004fc:	mov	rdx, rax
0x4004ff:	and	rdx, 0xfffffffffffff000
0x400506:	mov	rsi, rsp
0x400509:	sub	rsi, rdx
0x40050c:	mov	rdx, rsi
0x40050f:	cmp	rsp, rdx
0x400512:	je	0x400526
<Block for 0x400487, 5 bytes>
0x400487:	cmp	rsp, rdx
0x40048a:	je	0x40049e
<Block for 0x400526, 26 bytes>
0x400526:	mov	rdx, rax
0x400529:	and	edx, 0xfff
0x40052f:	sub	rsp, rdx
0x400532:	mov	rdx, rax
0x400535:	and	edx, 0xfff
0x40053b:	test	rdx, rdx
0x40053e:	je	0x400550
<Block for 0x400514, 18 bytes>
0x400514:	sub	rsp, 0x1000
0x40051b:	or	qword ptr [rsp + 0xff8], 0
0x400524:	jmp	0x40050f
<Block for 0x400550, 47 bytes>
0x400550:	mov	rax, rsp
0x400553:	add	rax, 0xf
0x400557:	shr	rax, 4
0x40055b:	shl	rax, 4
0x40055f:	mov	qword ptr [rbp - 0x88], rax
0x400566:	mov	rax, qword ptr [rbp - 0x90]
0x40056d:	mov	edx, 0x31
0x400572:	mov	esi, 0x41
0x400577:	mov	rdi, rax
0x40057a:	call	0x500000
<Block for 0x400540, 63 bytes>
0x400540:	and	eax, 0xfff
0x400545:	sub	rax, 8
0x400549:	add	rax, rsp
0x40054c:	or	qword ptr [rax], 0
0x400550:	mov	rax, rsp
0x400553:	add	rax, 0xf
0x400557:	shr	rax, 4
0x40055b:	shl	rax, 4
0x40055f:	mov	qword ptr [rbp - 0x88], rax
0x400566:	mov	rax, qword ptr [rbp - 0x90]
0x40056d:	mov	edx, 0x31
0x400572:	mov	esi, 0x41
0x400577:	mov	rdi, rax
0x40057a:	call	0x500000
<Block for 0x40050f, 5 bytes>
0x40050f:	cmp	rsp, rdx
0x400512:	je	0x400526
<Block for 0x40057f, 39 bytes>
0x40057f:	mov	rax, qword ptr [rbp - 0x90]
0x400586:	add	rax, 0x31
0x40058a:	mov	byte ptr [rax], 0
0x40058d:	mov	rax, qword ptr [rbp - 0x88]
0x400594:	mov	edx, 0x63
0x400599:	mov	esi, 0x41
0x40059e:	mov	rdi, rax
0x4005a1:	call	0x500000
<Block for 0x4005a6, 48 bytes>
0x4005a6:	mov	rax, qword ptr [rbp - 0x88]
0x4005ad:	add	rax, 0x63
0x4005b1:	mov	byte ptr [rax], 0
0x4005b4:	mov	rax, qword ptr [rbp - 0x88]
0x4005bb:	mov	qword ptr [rbp - 0x80], rax
0x4005bf:	nop	
0x4005c0:	lea	rax, [rbp - 0x70]
0x4005c4:	mov	edx, 0x63
0x4005c9:	mov	esi, 0x43
0x4005ce:	mov	rdi, rax
0x4005d1:	call	0x500000
<Block for 0x4005d6, 16 bytes>
0x4005d6:	mov	byte ptr [rbp - 0xd], 0
0x4005da:	lea	rax, [rbp - 0x70]
0x4005de:	mov	rdi, rax
0x4005e1:	call	0x500008
<Block for 0x4005e6, 17 bytes>
0x4005e6:	mov	qword ptr [rbp - 0x78], rax
0x4005ea:	mov	qword ptr [rbp - 0x98], 0
0x4005f5:	jmp	0x400620
<Block for 0x400620, 13 bytes>
0x400620:	mov	rax, qword ptr [rbp - 0x98]
0x400627:	cmp	rax, qword ptr [rbp - 0x78]
0x40062b:	jb	0x4005f7
<Block for 0x4005f7, 54 bytes>
0x4005f7:	mov	rdx, qword ptr [rbp - 0x80]
0x4005fb:	mov	rax, qword ptr [rbp - 0x98]
0x400602:	add	rax, rdx
0x400605:	movzx	eax, byte ptr [rax]
0x400608:	lea	rcx, [rbp - 0x70]
0x40060c:	mov	rdx, qword ptr [rbp - 0x98]
0x400613:	add	rdx, rcx
0x400616:	mov	byte ptr [rdx], al
0x400618:	add	qword ptr [rbp - 0x98], 1
0x400620:	mov	rax, qword ptr [rbp - 0x98]
0x400627:	cmp	rax, qword ptr [rbp - 0x78]
0x40062b:	jb	0x4005f7
<Block for 0x40062d, 16 bytes>
0x40062d:	mov	byte ptr [rbp - 0xd], 0
0x400631:	lea	rax, [rbp - 0x70]
0x400635:	mov	rdi, rax
0x400638:	call	0x500010
<Block for 0x40063d, 16 bytes>
0x40063d:	nop	
0x40063e:	mov	rax, qword ptr [rbp - 8]
0x400642:	xor	rax, qword ptr fs:[0x28]
0x40064b:	je	0x400652
<Block for 0x400652, 2 bytes>
0x400652:	leave	
0x400653:	ret	
<Block for 0x40064d, 5 bytes>
0x40064d:	call	0x500018
