<Block for 0x400156, 84 bytes>
0x400156:	endbr64	
0x40015a:	push	rbp
0x40015b:	mov	rbp, rsp
0x40015e:	sub	rsp, 0x90
0x400165:	mov	rax, qword ptr fs:[0x28]
0x40016e:	mov	qword ptr [rbp - 8], rax
0x400172:	xor	eax, eax
0x400174:	mov	eax, 0x10
0x400179:	sub	rax, 1
0x40017d:	add	rax, 0x6c
0x400181:	mov	esi, 0x10
0x400186:	mov	edx, 0
0x40018b:	div	rsi
0x40018e:	imul	rax, rax, 0x10
0x400192:	mov	rdx, rax
0x400195:	and	rdx, 0xfffffffffffff000
0x40019c:	mov	rcx, rsp
0x40019f:	sub	rcx, rdx
0x4001a2:	mov	rdx, rcx
0x4001a5:	cmp	rsp, rdx
0x4001a8:	je	0x4001bc
<Block for 0x4001bc, 26 bytes>
0x4001bc:	mov	rdx, rax
0x4001bf:	and	edx, 0xfff
0x4001c5:	sub	rsp, rdx
0x4001c8:	mov	rdx, rax
0x4001cb:	and	edx, 0xfff
0x4001d1:	test	rdx, rdx
0x4001d4:	je	0x4001e6
<Block for 0x4001aa, 18 bytes>
0x4001aa:	sub	rsp, 0x1000
0x4001b1:	or	qword ptr [rsp + 0xff8], 0
0x4001ba:	jmp	0x4001a5
<Block for 0x4001e6, 41 bytes>
0x4001e6:	mov	rax, rsp
0x4001e9:	add	rax, 0xf
0x4001ed:	shr	rax, 4
0x4001f1:	shl	rax, 4
0x4001f5:	mov	qword ptr [rbp - 0x80], rax
0x4001f9:	mov	rax, qword ptr [rbp - 0x80]
0x4001fd:	mov	edx, 0x63
0x400202:	mov	esi, 0x41
0x400207:	mov	rdi, rax
0x40020a:	call	0x500000
<Block for 0x4001d6, 57 bytes>
0x4001d6:	and	eax, 0xfff
0x4001db:	sub	rax, 8
0x4001df:	add	rax, rsp
0x4001e2:	or	qword ptr [rax], 0
0x4001e6:	mov	rax, rsp
0x4001e9:	add	rax, 0xf
0x4001ed:	shr	rax, 4
0x4001f1:	shl	rax, 4
0x4001f5:	mov	qword ptr [rbp - 0x80], rax
0x4001f9:	mov	rax, qword ptr [rbp - 0x80]
0x4001fd:	mov	edx, 0x63
0x400202:	mov	esi, 0x41
0x400207:	mov	rdi, rax
0x40020a:	call	0x500000
<Block for 0x4001a5, 5 bytes>
0x4001a5:	cmp	rsp, rdx
0x4001a8:	je	0x4001bc
<Block for 0x40020f, 46 bytes>
0x40020f:	mov	rax, qword ptr [rbp - 0x80]
0x400213:	add	rax, 0x63
0x400217:	mov	byte ptr [rax], 0
0x40021a:	nop	
0x40021b:	endbr64	
0x40021f:	mov	rax, qword ptr [rbp - 0x80]
0x400223:	mov	qword ptr [rbp - 0x78], rax
0x400227:	lea	rax, [rbp - 0x70]
0x40022b:	mov	edx, 0x63
0x400230:	mov	esi, 0x43
0x400235:	mov	rdi, rax
0x400238:	call	0x500000
<Block for 0x40023d, 17 bytes>
0x40023d:	mov	byte ptr [rbp - 0xd], 0
0x400241:	mov	qword ptr [rbp - 0x88], 0
0x40024c:	jmp	0x400277
<Block for 0x400277, 10 bytes>
0x400277:	cmp	qword ptr [rbp - 0x88], 0x63
0x40027f:	jbe	0x40024e
<Block for 0x40024e, 51 bytes>
0x40024e:	mov	rdx, qword ptr [rbp - 0x78]
0x400252:	mov	rax, qword ptr [rbp - 0x88]
0x400259:	add	rax, rdx
0x40025c:	movzx	eax, byte ptr [rax]
0x40025f:	lea	rcx, [rbp - 0x70]
0x400263:	mov	rdx, qword ptr [rbp - 0x88]
0x40026a:	add	rdx, rcx
0x40026d:	mov	byte ptr [rdx], al
0x40026f:	add	qword ptr [rbp - 0x88], 1
0x400277:	cmp	qword ptr [rbp - 0x88], 0x63
0x40027f:	jbe	0x40024e
<Block for 0x400281, 16 bytes>
0x400281:	mov	byte ptr [rbp - 0xd], 0
0x400285:	lea	rax, [rbp - 0x70]
0x400289:	mov	rdi, rax
0x40028c:	call	0x500008
<Block for 0x400291, 16 bytes>
0x400291:	nop	
0x400292:	mov	rax, qword ptr [rbp - 8]
0x400296:	xor	rax, qword ptr fs:[0x28]
0x40029f:	je	0x4002a6
<Block for 0x4002a6, 2 bytes>
0x4002a6:	leave	
0x4002a7:	ret	
<Block for 0x4002a1, 5 bytes>
0x4002a1:	call	0x500010
