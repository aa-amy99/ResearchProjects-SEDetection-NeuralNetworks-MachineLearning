<Block for 0x400068, 38 bytes>
0x400068:	endbr64	
0x40006c:	push	rbp
0x40006d:	mov	rbp, rsp
0x400070:	sub	rsp, 0x70
0x400074:	mov	rax, qword ptr fs:[0x28]
0x40007d:	mov	qword ptr [rbp - 8], rax
0x400081:	xor	eax, eax
0x400083:	mov	eax, dword ptr [rip + 0xeb]
0x400089:	cmp	eax, 5
0x40008c:	je	0x40009c
<Block for 0x40009c, 38 bytes>
0x40009c:	lea	rax, [rbp - 0x70]
0x4000a0:	lea	rcx, [rip + 0xd1]
0x4000a7:	lea	rdx, [rip + 0xca]
0x4000ae:	lea	rsi, [rip + 0xc7]
0x4000b5:	mov	rdi, rax
0x4000b8:	mov	eax, 0
0x4000bd:	call	0x500000
<Block for 0x40008e, 12 bytes>
0x40008e:	lea	rdi, [rip + 0xed]
0x400095:	call	0x500008
<Block for 0x4000c2, 12 bytes>
0x4000c2:	lea	rax, [rbp - 0x70]
0x4000c6:	mov	rdi, rax
0x4000c9:	call	0x500008
<Block for 0x40009a, 2 bytes>
0x40009a:	jmp	0x4000ce
<Block for 0x4000ce, 16 bytes>
0x4000ce:	nop	
0x4000cf:	mov	rax, qword ptr [rbp - 8]
0x4000d3:	xor	rax, qword ptr fs:[0x28]
0x4000dc:	je	0x4000e3
<Block for 0x4000e3, 2 bytes>
0x4000e3:	leave	
0x4000e4:	ret	
<Block for 0x4000de, 5 bytes>
0x4000de:	call	0x500010
