<Block for 0x40008d, 46 bytes>
0x40008d:	endbr64	
0x400091:	push	rbp
0x400092:	mov	rbp, rsp
0x400095:	sub	rsp, 0x40
0x400099:	mov	rax, qword ptr fs:[0x28]
0x4000a2:	mov	qword ptr [rbp - 8], rax
0x4000a6:	xor	eax, eax
0x4000a8:	mov	dword ptr [rbp - 0x34], 0xffffffff
0x4000af:	lea	rax, [rbp - 0x34]
0x4000b3:	mov	rdi, rax
0x4000b6:	call	0x400000
<Block for 0x4000bb, 47 bytes>
0x4000bb:	mov	qword ptr [rbp - 0x30], 0
0x4000c3:	mov	qword ptr [rbp - 0x28], 0
0x4000cb:	mov	qword ptr [rbp - 0x20], 0
0x4000d3:	mov	qword ptr [rbp - 0x18], 0
0x4000db:	mov	qword ptr [rbp - 0x10], 0
0x4000e3:	mov	eax, dword ptr [rbp - 0x34]
0x4000e6:	test	eax, eax
0x4000e8:	js	0x4000fc
<Block for 0x4000fc, 12 bytes>
0x4000fc:	lea	rdi, [rip + 0x225]
0x400103:	call	0x500018
<Block for 0x4000ea, 16 bytes>
0x4000ea:	mov	eax, dword ptr [rbp - 0x34]
0x4000ed:	cdqe	
0x4000ef:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x4000f3:	mov	edi, eax
0x4000f5:	call	0x500028
<Block for 0x400108, 16 bytes>
0x400108:	nop	
0x400109:	mov	rax, qword ptr [rbp - 8]
0x40010d:	xor	rax, qword ptr fs:[0x28]
0x400116:	je	0x40011d
<Block for 0x4000fa, 2 bytes>
0x4000fa:	jmp	0x400108
<Block for 0x40011d, 2 bytes>
0x40011d:	leave	
0x40011e:	ret	
<Block for 0x400118, 5 bytes>
0x400118:	call	0x500020
