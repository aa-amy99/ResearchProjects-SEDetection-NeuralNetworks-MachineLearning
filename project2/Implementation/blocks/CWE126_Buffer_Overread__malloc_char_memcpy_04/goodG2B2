<Block for 0x4001c4, 44 bytes>
0x4001c4:	endbr64	
0x4001c8:	push	rbp
0x4001c9:	mov	rbp, rsp
0x4001cc:	add	rsp, -0x80
0x4001d0:	mov	rax, qword ptr fs:[0x28]
0x4001d9:	mov	qword ptr [rbp - 8], rax
0x4001dd:	xor	eax, eax
0x4001df:	mov	qword ptr [rbp - 0x78], 0
0x4001e7:	mov	eax, 1
0x4001ec:	test	eax, eax
0x4001ee:	je	0x400230
<Block for 0x400230, 22 bytes>
0x400230:	lea	rax, [rbp - 0x70]
0x400234:	mov	edx, 0x63
0x400239:	mov	esi, 0x43
0x40023e:	mov	rdi, rax
0x400241:	call	0x500010
<Block for 0x4001f0, 10 bytes>
0x4001f0:	mov	edi, 0x64
0x4001f5:	call	0x500000
<Block for 0x400246, 16 bytes>
0x400246:	mov	byte ptr [rbp - 0xd], 0
0x40024a:	lea	rax, [rbp - 0x70]
0x40024e:	mov	rdi, rax
0x400251:	call	0x500018
<Block for 0x4001fa, 11 bytes>
0x4001fa:	mov	qword ptr [rbp - 0x78], rax
0x4001fe:	cmp	qword ptr [rbp - 0x78], 0
0x400203:	jne	0x40020f
<Block for 0x400256, 22 bytes>
0x400256:	mov	rdx, rax
0x400259:	mov	rcx, qword ptr [rbp - 0x78]
0x40025d:	lea	rax, [rbp - 0x70]
0x400261:	mov	rsi, rcx
0x400264:	mov	rdi, rax
0x400267:	call	0x500020
<Block for 0x400205, 10 bytes>
0x400205:	mov	edi, 0xffffffff
0x40020a:	call	0x500008
<Block for 0x40020f, 22 bytes>
0x40020f:	mov	rax, qword ptr [rbp - 0x78]
0x400213:	mov	edx, 0x63
0x400218:	mov	esi, 0x41
0x40021d:	mov	rdi, rax
0x400220:	call	0x500010
<Block for 0x40026c, 16 bytes>
0x40026c:	mov	byte ptr [rbp - 0xd], 0
0x400270:	lea	rax, [rbp - 0x70]
0x400274:	mov	rdi, rax
0x400277:	call	0x500028
<Block for 0x400225, 33 bytes>
0x400225:	mov	rax, qword ptr [rbp - 0x78]
0x400229:	add	rax, 0x63
0x40022d:	mov	byte ptr [rax], 0
0x400230:	lea	rax, [rbp - 0x70]
0x400234:	mov	edx, 0x63
0x400239:	mov	esi, 0x43
0x40023e:	mov	rdi, rax
0x400241:	call	0x500010
<Block for 0x40027c, 12 bytes>
0x40027c:	mov	rax, qword ptr [rbp - 0x78]
0x400280:	mov	rdi, rax
0x400283:	call	0x500030
<Block for 0x400288, 16 bytes>
0x400288:	nop	
0x400289:	mov	rax, qword ptr [rbp - 8]
0x40028d:	xor	rax, qword ptr fs:[0x28]
0x400296:	je	0x40029d
<Block for 0x40029d, 2 bytes>
0x40029d:	leave	
0x40029e:	ret	
<Block for 0x400298, 5 bytes>
0x400298:	call	0x500038
