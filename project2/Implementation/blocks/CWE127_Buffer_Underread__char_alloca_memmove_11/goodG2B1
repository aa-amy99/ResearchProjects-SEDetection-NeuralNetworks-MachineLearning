<Block for 0x400134, 81 bytes>
0x400134:	endbr64	
0x400138:	push	rbp
0x400139:	mov	rbp, rsp
0x40013c:	add	rsp, -0x80
0x400140:	mov	rax, qword ptr fs:[0x28]
0x400149:	mov	qword ptr [rbp - 8], rax
0x40014d:	xor	eax, eax
0x40014f:	mov	eax, 0x10
0x400154:	sub	rax, 1
0x400158:	add	rax, 0x6c
0x40015c:	mov	esi, 0x10
0x400161:	mov	edx, 0
0x400166:	div	rsi
0x400169:	imul	rax, rax, 0x10
0x40016d:	mov	rdx, rax
0x400170:	and	rdx, 0xfffffffffffff000
0x400177:	mov	rcx, rsp
0x40017a:	sub	rcx, rdx
0x40017d:	mov	rdx, rcx
0x400180:	cmp	rsp, rdx
0x400183:	je	0x400197
<Block for 0x400197, 26 bytes>
0x400197:	mov	rdx, rax
0x40019a:	and	edx, 0xfff
0x4001a0:	sub	rsp, rdx
0x4001a3:	mov	rdx, rax
0x4001a6:	and	edx, 0xfff
0x4001ac:	test	rdx, rdx
0x4001af:	je	0x4001c1
<Block for 0x400185, 18 bytes>
0x400185:	sub	rsp, 0x1000
0x40018c:	or	qword ptr [rsp + 0xff8], 0
0x400195:	jmp	0x400180
<Block for 0x4001c1, 41 bytes>
0x4001c1:	mov	rax, rsp
0x4001c4:	add	rax, 0xf
0x4001c8:	shr	rax, 4
0x4001cc:	shl	rax, 4
0x4001d0:	mov	qword ptr [rbp - 0x78], rax
0x4001d4:	mov	rax, qword ptr [rbp - 0x78]
0x4001d8:	mov	edx, 0x63
0x4001dd:	mov	esi, 0x41
0x4001e2:	mov	rdi, rax
0x4001e5:	call	0x500000
<Block for 0x4001b1, 57 bytes>
0x4001b1:	and	eax, 0xfff
0x4001b6:	sub	rax, 8
0x4001ba:	add	rax, rsp
0x4001bd:	or	qword ptr [rax], 0
0x4001c1:	mov	rax, rsp
0x4001c4:	add	rax, 0xf
0x4001c8:	shr	rax, 4
0x4001cc:	shl	rax, 4
0x4001d0:	mov	qword ptr [rbp - 0x78], rax
0x4001d4:	mov	rax, qword ptr [rbp - 0x78]
0x4001d8:	mov	edx, 0x63
0x4001dd:	mov	esi, 0x41
0x4001e2:	mov	rdi, rax
0x4001e5:	call	0x500000
<Block for 0x400180, 5 bytes>
0x400180:	cmp	rsp, rdx
0x400183:	je	0x400197
<Block for 0x4001ea, 21 bytes>
0x4001ea:	mov	rax, qword ptr [rbp - 0x78]
0x4001ee:	add	rax, 0x63
0x4001f2:	mov	byte ptr [rax], 0
0x4001f5:	mov	eax, 0
0x4001fa:	call	0x500028
<Block for 0x4001ff, 4 bytes>
0x4001ff:	test	eax, eax
0x400201:	je	0x400211
<Block for 0x400211, 30 bytes>
0x400211:	mov	rax, qword ptr [rbp - 0x78]
0x400215:	mov	qword ptr [rbp - 0x80], rax
0x400219:	lea	rax, [rbp - 0x70]
0x40021d:	mov	edx, 0x63
0x400222:	mov	esi, 0x43
0x400227:	mov	rdi, rax
0x40022a:	call	0x500000
<Block for 0x400203, 12 bytes>
0x400203:	lea	rdi, [rip + 0x1b7]
0x40020a:	call	0x500018
<Block for 0x40022f, 28 bytes>
0x40022f:	mov	byte ptr [rbp - 0xd], 0
0x400233:	mov	rcx, qword ptr [rbp - 0x80]
0x400237:	lea	rax, [rbp - 0x70]
0x40023b:	mov	edx, 0x64
0x400240:	mov	rsi, rcx
0x400243:	mov	rdi, rax
0x400246:	call	0x500010
<Block for 0x40020f, 2 bytes>
0x40020f:	jmp	0x400219
<Block for 0x40024b, 16 bytes>
0x40024b:	mov	byte ptr [rbp - 0xd], 0
0x40024f:	lea	rax, [rbp - 0x70]
0x400253:	mov	rdi, rax
0x400256:	call	0x500018
<Block for 0x400219, 22 bytes>
0x400219:	lea	rax, [rbp - 0x70]
0x40021d:	mov	edx, 0x63
0x400222:	mov	esi, 0x43
0x400227:	mov	rdi, rax
0x40022a:	call	0x500000
<Block for 0x40025b, 16 bytes>
0x40025b:	nop	
0x40025c:	mov	rax, qword ptr [rbp - 8]
0x400260:	xor	rax, qword ptr fs:[0x28]
0x400269:	je	0x400270
<Block for 0x400270, 2 bytes>
0x400270:	leave	
0x400271:	ret	
<Block for 0x40026b, 5 bytes>
0x40026b:	call	0x500020
