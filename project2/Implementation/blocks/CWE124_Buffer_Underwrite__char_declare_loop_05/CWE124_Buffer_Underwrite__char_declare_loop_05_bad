<Block for 0x400000, 55 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0xf0
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	lea	rax, [rbp - 0xe0]
0x400025:	mov	edx, 0x63
0x40002a:	mov	esi, 0x41
0x40002f:	mov	rdi, rax
0x400032:	call	0x500000
<Block for 0x400037, 14 bytes>
0x400037:	mov	byte ptr [rbp - 0x7d], 0
0x40003b:	mov	eax, dword ptr [rip + 0x29f]
0x400041:	test	eax, eax
0x400043:	je	0x400057
<Block for 0x400057, 22 bytes>
0x400057:	lea	rax, [rbp - 0x70]
0x40005b:	mov	edx, 0x63
0x400060:	mov	esi, 0x43
0x400065:	mov	rdi, rax
0x400068:	call	0x500000
<Block for 0x400045, 40 bytes>
0x400045:	lea	rax, [rbp - 0xe0]
0x40004c:	sub	rax, 8
0x400050:	mov	qword ptr [rbp - 0xf0], rax
0x400057:	lea	rax, [rbp - 0x70]
0x40005b:	mov	edx, 0x63
0x400060:	mov	esi, 0x43
0x400065:	mov	rdi, rax
0x400068:	call	0x500000
<Block for 0x40006d, 17 bytes>
0x40006d:	mov	byte ptr [rbp - 0xd], 0
0x400071:	mov	qword ptr [rbp - 0xe8], 0
0x40007c:	jmp	0x4000aa
<Block for 0x4000aa, 10 bytes>
0x4000aa:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000b2:	jbe	0x40007e
<Block for 0x40007e, 54 bytes>
0x40007e:	mov	rdx, qword ptr [rbp - 0xf0]
0x400085:	mov	rax, qword ptr [rbp - 0xe8]
0x40008c:	add	rdx, rax
0x40008f:	lea	rcx, [rbp - 0x70]
0x400093:	mov	rax, qword ptr [rbp - 0xe8]
0x40009a:	add	rax, rcx
0x40009d:	movzx	eax, byte ptr [rax]
0x4000a0:	mov	byte ptr [rdx], al
0x4000a2:	add	qword ptr [rbp - 0xe8], 1
0x4000aa:	cmp	qword ptr [rbp - 0xe8], 0x63
0x4000b2:	jbe	0x40007e
<Block for 0x4000b4, 29 bytes>
0x4000b4:	mov	rax, qword ptr [rbp - 0xf0]
0x4000bb:	add	rax, 0x63
0x4000bf:	mov	byte ptr [rax], 0
0x4000c2:	mov	rax, qword ptr [rbp - 0xf0]
0x4000c9:	mov	rdi, rax
0x4000cc:	call	0x500008
<Block for 0x4000d1, 16 bytes>
0x4000d1:	nop	
0x4000d2:	mov	rax, qword ptr [rbp - 8]
0x4000d6:	xor	rax, qword ptr fs:[0x28]
0x4000df:	je	0x4000e6
<Block for 0x4000e6, 2 bytes>
0x4000e6:	leave	
0x4000e7:	ret	
<Block for 0x4000e1, 5 bytes>
0x4000e1:	call	0x500010
