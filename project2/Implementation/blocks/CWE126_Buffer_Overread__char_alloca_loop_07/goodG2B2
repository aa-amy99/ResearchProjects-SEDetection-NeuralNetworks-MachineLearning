<Block for 0x400451, 84 bytes>
0x400451:	endbr64	
0x400455:	push	rbp
0x400456:	mov	rbp, rsp
0x400459:	sub	rsp, 0xa0
0x400460:	mov	rax, qword ptr fs:[0x28]
0x400469:	mov	qword ptr [rbp - 8], rax
0x40046d:	xor	eax, eax
0x40046f:	mov	eax, 0x10
0x400474:	sub	rax, 1
0x400478:	add	rax, 0x3a
0x40047c:	mov	ecx, 0x10
0x400481:	mov	edx, 0
0x400486:	div	rcx
0x400489:	imul	rax, rax, 0x10
0x40048d:	mov	rdx, rax
0x400490:	and	rdx, 0xfffffffffffff000
0x400497:	mov	rcx, rsp
0x40049a:	sub	rcx, rdx
0x40049d:	mov	rdx, rcx
0x4004a0:	cmp	rsp, rdx
0x4004a3:	je	0x4004b7
<Block for 0x4004b7, 26 bytes>
0x4004b7:	mov	rdx, rax
0x4004ba:	and	edx, 0xfff
0x4004c0:	sub	rsp, rdx
0x4004c3:	mov	rdx, rax
0x4004c6:	and	edx, 0xfff
0x4004cc:	test	rdx, rdx
0x4004cf:	je	0x4004e1
<Block for 0x4004a5, 18 bytes>
0x4004a5:	sub	rsp, 0x1000
0x4004ac:	or	qword ptr [rsp + 0xff8], 0
0x4004b5:	jmp	0x4004a0
<Block for 0x4004e1, 76 bytes>
0x4004e1:	mov	rax, rsp
0x4004e4:	add	rax, 0xf
0x4004e8:	shr	rax, 4
0x4004ec:	shl	rax, 4
0x4004f0:	mov	qword ptr [rbp - 0x88], rax
0x4004f7:	mov	eax, 0x10
0x4004fc:	sub	rax, 1
0x400500:	add	rax, 0x6c
0x400504:	mov	edi, 0x10
0x400509:	mov	edx, 0
0x40050e:	div	rdi
0x400511:	imul	rax, rax, 0x10
0x400515:	mov	rdx, rax
0x400518:	and	rdx, 0xfffffffffffff000
0x40051f:	mov	rsi, rsp
0x400522:	sub	rsi, rdx
0x400525:	mov	rdx, rsi
0x400528:	cmp	rsp, rdx
0x40052b:	je	0x40053f
<Block for 0x4004d1, 92 bytes>
0x4004d1:	and	eax, 0xfff
0x4004d6:	sub	rax, 8
0x4004da:	add	rax, rsp
0x4004dd:	or	qword ptr [rax], 0
0x4004e1:	mov	rax, rsp
0x4004e4:	add	rax, 0xf
0x4004e8:	shr	rax, 4
0x4004ec:	shl	rax, 4
0x4004f0:	mov	qword ptr [rbp - 0x88], rax
0x4004f7:	mov	eax, 0x10
0x4004fc:	sub	rax, 1
0x400500:	add	rax, 0x6c
0x400504:	mov	edi, 0x10
0x400509:	mov	edx, 0
0x40050e:	div	rdi
0x400511:	imul	rax, rax, 0x10
0x400515:	mov	rdx, rax
0x400518:	and	rdx, 0xfffffffffffff000
0x40051f:	mov	rsi, rsp
0x400522:	sub	rsi, rdx
0x400525:	mov	rdx, rsi
0x400528:	cmp	rsp, rdx
0x40052b:	je	0x40053f
<Block for 0x4004a0, 5 bytes>
0x4004a0:	cmp	rsp, rdx
0x4004a3:	je	0x4004b7
<Block for 0x40053f, 26 bytes>
0x40053f:	mov	rdx, rax
0x400542:	and	edx, 0xfff
0x400548:	sub	rsp, rdx
0x40054b:	mov	rdx, rax
0x40054e:	and	edx, 0xfff
0x400554:	test	rdx, rdx
0x400557:	je	0x400569
<Block for 0x40052d, 18 bytes>
0x40052d:	sub	rsp, 0x1000
0x400534:	or	qword ptr [rsp + 0xff8], 0
0x40053d:	jmp	0x400528
<Block for 0x400569, 44 bytes>
0x400569:	mov	rax, rsp
0x40056c:	add	rax, 0xf
0x400570:	shr	rax, 4
0x400574:	shl	rax, 4
0x400578:	mov	qword ptr [rbp - 0x80], rax
0x40057c:	mov	rax, qword ptr [rbp - 0x88]
0x400583:	mov	edx, 0x31
0x400588:	mov	esi, 0x41
0x40058d:	mov	rdi, rax
0x400590:	call	0x500000
<Block for 0x400559, 60 bytes>
0x400559:	and	eax, 0xfff
0x40055e:	sub	rax, 8
0x400562:	add	rax, rsp
0x400565:	or	qword ptr [rax], 0
0x400569:	mov	rax, rsp
0x40056c:	add	rax, 0xf
0x400570:	shr	rax, 4
0x400574:	shl	rax, 4
0x400578:	mov	qword ptr [rbp - 0x80], rax
0x40057c:	mov	rax, qword ptr [rbp - 0x88]
0x400583:	mov	edx, 0x31
0x400588:	mov	esi, 0x41
0x40058d:	mov	rdi, rax
0x400590:	call	0x500000
<Block for 0x400528, 5 bytes>
0x400528:	cmp	rsp, rdx
0x40052b:	je	0x40053f
<Block for 0x400595, 36 bytes>
0x400595:	mov	rax, qword ptr [rbp - 0x88]
0x40059c:	add	rax, 0x31
0x4005a0:	mov	byte ptr [rax], 0
0x4005a3:	mov	rax, qword ptr [rbp - 0x80]
0x4005a7:	mov	edx, 0x63
0x4005ac:	mov	esi, 0x41
0x4005b1:	mov	rdi, rax
0x4005b4:	call	0x500000
<Block for 0x4005b9, 22 bytes>
0x4005b9:	mov	rax, qword ptr [rbp - 0x80]
0x4005bd:	add	rax, 0x63
0x4005c1:	mov	byte ptr [rax], 0
0x4005c4:	mov	eax, dword ptr [rip + 0xc6]
0x4005ca:	cmp	eax, 5
0x4005cd:	jne	0x4005da
<Block for 0x4005cf, 33 bytes>
0x4005cf:	mov	rax, qword ptr [rbp - 0x80]
0x4005d3:	mov	qword ptr [rbp - 0x98], rax
0x4005da:	lea	rax, [rbp - 0x70]
0x4005de:	mov	edx, 0x63
0x4005e3:	mov	esi, 0x43
0x4005e8:	mov	rdi, rax
0x4005eb:	call	0x500000
<Block for 0x4005da, 22 bytes>
0x4005da:	lea	rax, [rbp - 0x70]
0x4005de:	mov	edx, 0x63
0x4005e3:	mov	esi, 0x43
0x4005e8:	mov	rdi, rax
0x4005eb:	call	0x500000
<Block for 0x4005f0, 16 bytes>
0x4005f0:	mov	byte ptr [rbp - 0xd], 0
0x4005f4:	lea	rax, [rbp - 0x70]
0x4005f8:	mov	rdi, rax
0x4005fb:	call	0x500008
<Block for 0x400600, 17 bytes>
0x400600:	mov	qword ptr [rbp - 0x78], rax
0x400604:	mov	qword ptr [rbp - 0x90], 0
0x40060f:	jmp	0x40063d
<Block for 0x40063d, 13 bytes>
0x40063d:	mov	rax, qword ptr [rbp - 0x90]
0x400644:	cmp	rax, qword ptr [rbp - 0x78]
0x400648:	jb	0x400611
<Block for 0x400611, 57 bytes>
0x400611:	mov	rdx, qword ptr [rbp - 0x98]
0x400618:	mov	rax, qword ptr [rbp - 0x90]
0x40061f:	add	rax, rdx
0x400622:	movzx	eax, byte ptr [rax]
0x400625:	lea	rcx, [rbp - 0x70]
0x400629:	mov	rdx, qword ptr [rbp - 0x90]
0x400630:	add	rdx, rcx
0x400633:	mov	byte ptr [rdx], al
0x400635:	add	qword ptr [rbp - 0x90], 1
0x40063d:	mov	rax, qword ptr [rbp - 0x90]
0x400644:	cmp	rax, qword ptr [rbp - 0x78]
0x400648:	jb	0x400611
<Block for 0x40064a, 16 bytes>
0x40064a:	mov	byte ptr [rbp - 0xd], 0
0x40064e:	lea	rax, [rbp - 0x70]
0x400652:	mov	rdi, rax
0x400655:	call	0x500010
<Block for 0x40065a, 16 bytes>
0x40065a:	nop	
0x40065b:	mov	rax, qword ptr [rbp - 8]
0x40065f:	xor	rax, qword ptr fs:[0x28]
0x400668:	je	0x40066f
<Block for 0x40066f, 2 bytes>
0x40066f:	leave	
0x400670:	ret	
<Block for 0x40066a, 5 bytes>
0x40066a:	call	0x500018
