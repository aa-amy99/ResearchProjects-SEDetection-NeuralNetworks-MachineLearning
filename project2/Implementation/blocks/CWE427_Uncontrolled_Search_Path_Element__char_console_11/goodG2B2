<Block for 0x400263, 82 bytes>
0x400263:	endbr64	
0x400267:	push	rbp
0x400268:	mov	rbp, rsp
0x40026b:	sub	rsp, 0x120
0x400272:	mov	rax, qword ptr fs:[0x28]
0x40027b:	mov	qword ptr [rbp - 8], rax
0x40027f:	xor	eax, eax
0x400281:	movabs	rax, 0x3d48544150
0x40028b:	mov	edx, 0
0x400290:	mov	qword ptr [rbp - 0x110], rax
0x400297:	mov	qword ptr [rbp - 0x108], rdx
0x40029e:	lea	rdx, [rbp - 0x100]
0x4002a5:	mov	eax, 0
0x4002aa:	mov	ecx, 0x1d
0x4002af:	mov	rdi, rdx
0x4002b2:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002b5, 34 bytes>
0x4002b5:	mov	rdx, rdi
0x4002b8:	mov	word ptr [rdx], ax
0x4002bb:	add	rdx, 2
0x4002bf:	lea	rax, [rbp - 0x110]
0x4002c6:	mov	qword ptr [rbp - 0x118], rax
0x4002cd:	mov	eax, 0
0x4002d2:	call	0x500000
<Block for 0x4002b2, 3 bytes>
0x4002b2:	rep stosq	qword ptr [rdi], rax
<Block for 0x4002d7, 4 bytes>
0x4002d7:	test	eax, eax
0x4002d9:	je	0x400314
<Block for 0x400314, 15 bytes>
0x400314:	mov	rax, qword ptr [rbp - 0x118]
0x40031b:	mov	rdi, rax
0x40031e:	call	0x500028
<Block for 0x4002db, 27 bytes>
0x4002db:	mov	rax, qword ptr [rbp - 0x118]
0x4002e2:	mov	rcx, -1
0x4002e9:	mov	rdx, rax
0x4002ec:	mov	eax, 0
0x4002f1:	mov	rdi, rdx
0x4002f4:	repne scasb	al, byte ptr [rdi]
<Block for 0x400323, 16 bytes>
0x400323:	nop	
0x400324:	mov	rax, qword ptr [rbp - 8]
0x400328:	xor	rax, qword ptr fs:[0x28]
0x400331:	je	0x400338
<Block for 0x4002f6, 45 bytes>
0x4002f6:	mov	rax, rcx
0x4002f9:	not	rax
0x4002fc:	lea	rdx, [rax - 1]
0x400300:	mov	rax, qword ptr [rbp - 0x118]
0x400307:	add	rax, rdx
0x40030a:	mov	dword ptr [rax], 0x6e69622f
0x400310:	mov	byte ptr [rax + 4], 0
0x400314:	mov	rax, qword ptr [rbp - 0x118]
0x40031b:	mov	rdi, rax
0x40031e:	call	0x500028
<Block for 0x4002f4, 2 bytes>
0x4002f4:	repne scasb	al, byte ptr [rdi]
<Block for 0x400338, 2 bytes>
0x400338:	leave	
0x400339:	ret	
<Block for 0x400333, 5 bytes>
0x400333:	call	0x500030
