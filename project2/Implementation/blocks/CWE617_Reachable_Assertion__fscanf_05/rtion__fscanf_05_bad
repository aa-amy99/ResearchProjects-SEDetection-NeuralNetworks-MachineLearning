<Block for 0x400000, 44 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0xc], 0xffffffff
0x400022:	mov	eax, dword ptr [rip + 0x128]
0x400028:	test	eax, eax
0x40002a:	je	0x40004b
<Block for 0x40004b, 8 bytes>
0x40004b:	mov	eax, dword ptr [rbp - 0xc]
0x40004e:	cmp	eax, 5
0x400051:	jg	0x400072
<Block for 0x40002c, 31 bytes>
0x40002c:	mov	rax, qword ptr [rip + 0xfffcd]
0x400033:	lea	rdx, [rbp - 0xc]
0x400037:	lea	rsi, [rip + 0x122]
0x40003e:	mov	rdi, rax
0x400041:	mov	eax, 0
0x400046:	call	0x500008
<Block for 0x400053, 31 bytes>
0x400053:	lea	rcx, [rip + 0x166]
0x40005a:	mov	edx, 0x2b
0x40005f:	lea	rsi, [rip + 0x102]
0x400066:	lea	rdi, [rip + 0x123]
0x40006d:	call	0x500010
<Block for 0x400072, 16 bytes>
0x400072:	nop	
0x400073:	mov	rax, qword ptr [rbp - 8]
0x400077:	xor	rax, qword ptr fs:[0x28]
0x400080:	je	0x400087
<Block for 0x400087, 2 bytes>
0x400087:	leave	
0x400088:	ret	
<Block for 0x400082, 5 bytes>
0x400082:	call	0x500018
