<Block for 0x400000, 38 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	eax, dword ptr [rip + 0xfffdf]
0x400021:	cmp	eax, 5
0x400024:	jne	0x400058
<Block for 0x400026, 40 bytes>
0x400026:	mov	byte ptr [rbp - 0x10], 1
0x40002a:	lea	rax, [rbp - 0x10]
0x40002e:	mov	qword ptr [rbp - 0x18], rax
0x400032:	mov	rax, qword ptr [rbp - 0x18]
0x400036:	add	rax, 4
0x40003a:	mov	dword ptr [rax], 5
0x400040:	movzx	eax, byte ptr [rbp - 0x10]
0x400044:	movsx	eax, al
0x400047:	mov	edi, eax
0x400049:	call	0x500008
<Block for 0x400058, 16 bytes>
0x400058:	nop	
0x400059:	mov	rax, qword ptr [rbp - 8]
0x40005d:	xor	rax, qword ptr fs:[0x28]
0x400066:	je	0x40006d
<Block for 0x40004e, 10 bytes>
0x40004e:	mov	eax, dword ptr [rbp - 0xc]
0x400051:	mov	edi, eax
0x400053:	call	0x500008
<Block for 0x40006d, 2 bytes>
0x40006d:	leave	
0x40006e:	ret	
<Block for 0x400068, 5 bytes>
0x400068:	call	0x500010
