<Block for 0x400000, 88 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x40
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	dword ptr [rbp - 0x34], 0xffffffff
0x400022:	mov	dword ptr [rbp - 0x34], 0xa
0x400029:	nop	
0x40002a:	mov	qword ptr [rbp - 0x30], 0
0x400032:	mov	qword ptr [rbp - 0x28], 0
0x40003a:	mov	qword ptr [rbp - 0x20], 0
0x400042:	mov	qword ptr [rbp - 0x18], 0
0x40004a:	mov	qword ptr [rbp - 0x10], 0
0x400052:	cmp	dword ptr [rbp - 0x34], 0
0x400056:	js	0x40006a
<Block for 0x40006a, 12 bytes>
0x40006a:	lea	rdi, [rip + 0x297]
0x400071:	call	0x500008
<Block for 0x400058, 16 bytes>
0x400058:	mov	eax, dword ptr [rbp - 0x34]
0x40005b:	cdqe	
0x40005d:	mov	eax, dword ptr [rbp + rax*4 - 0x30]
0x400061:	mov	edi, eax
0x400063:	call	0x500000
<Block for 0x400076, 17 bytes>
0x400076:	nop	
0x400077:	nop	
0x400078:	mov	rax, qword ptr [rbp - 8]
0x40007c:	xor	rax, qword ptr fs:[0x28]
0x400085:	je	0x40008c
<Block for 0x400068, 2 bytes>
0x400068:	jmp	0x400076
<Block for 0x40008c, 2 bytes>
0x40008c:	leave	
0x40008d:	ret	
<Block for 0x400087, 5 bytes>
0x400087:	call	0x500010
