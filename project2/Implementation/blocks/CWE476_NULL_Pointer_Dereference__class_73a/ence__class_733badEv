<Block for 0x400000, 40 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x58
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x50]
0x400020:	mov	rdi, rax
0x400023:	call	0x4003b8
<Block for 0x400028, 27 bytes>
0x400028:	mov	qword ptr [rbp - 0x58], 0
0x400030:	lea	rdx, [rbp - 0x58]
0x400034:	lea	rax, [rbp - 0x50]
0x400038:	mov	rsi, rdx
0x40003b:	mov	rdi, rax
0x40003e:	call	0x4004c2
<Block for 0x400043, 19 bytes>
0x400043:	lea	rdx, [rbp - 0x58]
0x400047:	lea	rax, [rbp - 0x50]
0x40004b:	mov	rsi, rdx
0x40004e:	mov	rdi, rax
0x400051:	call	0x4004c2
<Block for 0x400056, 19 bytes>
0x400056:	lea	rdx, [rbp - 0x58]
0x40005a:	lea	rax, [rbp - 0x50]
0x40005e:	mov	rsi, rdx
0x400061:	mov	rdi, rax
0x400064:	call	0x4004c2
<Block for 0x400069, 19 bytes>
0x400069:	lea	rdx, [rbp - 0x50]
0x40006d:	lea	rax, [rbp - 0x30]
0x400071:	mov	rsi, rdx
0x400074:	mov	rdi, rax
0x400077:	call	0x4004fc
<Block for 0x40007c, 12 bytes>
0x40007c:	lea	rax, [rbp - 0x30]
0x400080:	mov	rdi, rax
0x400083:	call	0x500000
<Block for 0x400088, 12 bytes>
0x400088:	lea	rax, [rbp - 0x30]
0x40008c:	mov	rdi, rax
0x40008f:	call	0x4003d8
<Block for 0x400094, 12 bytes>
0x400094:	lea	rax, [rbp - 0x50]
0x400098:	mov	rdi, rax
0x40009b:	call	0x4003d8
<Block for 0x4000a0, 16 bytes>
0x4000a0:	nop	
0x4000a1:	mov	rax, qword ptr [rbp - 0x18]
0x4000a5:	xor	rax, qword ptr fs:[0x28]
0x4000ae:	je	0x4000ea
<Block for 0x4000ea, 7 bytes>
0x4000ea:	add	rsp, 0x58
0x4000ee:	pop	rbx
0x4000ef:	pop	rbp
0x4000f0:	ret	
<Block for 0x4000b0, 2 bytes>
0x4000b0:	jmp	0x4000e5
<Block for 0x4000e5, 5 bytes>
0x4000e5:	call	0x500010
