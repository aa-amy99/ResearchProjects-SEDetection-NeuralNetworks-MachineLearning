<Block for 0x400000, 65 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	push	rbx
0x400009:	sub	rsp, 0x58
0x40000d:	mov	rax, qword ptr fs:[0x28]
0x400016:	mov	qword ptr [rbp - 0x18], rax
0x40001a:	xor	eax, eax
0x40001c:	lea	rax, [rbp - 0x5c]
0x400020:	mov	qword ptr [rbp - 0x50], rax
0x400024:	lea	rax, [rbp - 0x5c]
0x400028:	mov	qword ptr [rbp - 0x48], rax
0x40002c:	mov	dword ptr [rbp - 0x5c], 0xffffffff
0x400033:	mov	rax, qword ptr [rbp - 0x50]
0x400037:	mov	eax, dword ptr [rax]
0x400039:	mov	dword ptr [rbp - 0x58], eax
0x40003c:	call	0x500000
<Block for 0x400041, 7 bytes>
0x400041:	and	eax, 1
0x400044:	test	eax, eax
0x400046:	je	0x400065
<Block for 0x400065, 5 bytes>
0x400065:	call	0x500000
<Block for 0x400048, 5 bytes>
0x400048:	call	0x500000
<Block for 0x40006a, 10 bytes>
0x40006a:	shl	eax, 0x1e
0x40006d:	mov	ebx, eax
0x40006f:	call	0x500000
<Block for 0x40004d, 10 bytes>
0x40004d:	shl	eax, 0x1e
0x400050:	mov	ebx, eax
0x400052:	call	0x500000
<Block for 0x400074, 10 bytes>
0x400074:	shl	eax, 0xf
0x400077:	xor	ebx, eax
0x400079:	call	0x500000
<Block for 0x400057, 10 bytes>
0x400057:	shl	eax, 0xf
0x40005a:	xor	ebx, eax
0x40005c:	call	0x500000
<Block for 0x40007e, 71 bytes>
0x40007e:	xor	eax, ebx
0x400080:	not	eax
0x400082:	mov	dword ptr [rbp - 0x58], eax
0x400085:	mov	rax, qword ptr [rbp - 0x50]
0x400089:	mov	edx, dword ptr [rbp - 0x58]
0x40008c:	mov	dword ptr [rax], edx
0x40008e:	mov	rax, qword ptr [rbp - 0x48]
0x400092:	mov	eax, dword ptr [rax]
0x400094:	mov	dword ptr [rbp - 0x54], eax
0x400097:	mov	qword ptr [rbp - 0x40], 0
0x40009f:	mov	qword ptr [rbp - 0x38], 0
0x4000a7:	mov	qword ptr [rbp - 0x30], 0
0x4000af:	mov	qword ptr [rbp - 0x28], 0
0x4000b7:	mov	qword ptr [rbp - 0x20], 0
0x4000bf:	cmp	dword ptr [rbp - 0x54], 9
0x4000c3:	jg	0x4000d7
<Block for 0x400061, 4 bytes>
0x400061:	xor	eax, ebx
0x400063:	jmp	0x400082
<Block for 0x4000c5, 16 bytes>
0x4000c5:	mov	eax, dword ptr [rbp - 0x54]
0x4000c8:	cdqe	
0x4000ca:	mov	eax, dword ptr [rbp + rax*4 - 0x40]
0x4000ce:	mov	edi, eax
0x4000d0:	call	0x500008
<Block for 0x4000d7, 12 bytes>
0x4000d7:	lea	rdi, [rip + 0x202]
0x4000de:	call	0x500010
<Block for 0x400082, 67 bytes>
0x400082:	mov	dword ptr [rbp - 0x58], eax
0x400085:	mov	rax, qword ptr [rbp - 0x50]
0x400089:	mov	edx, dword ptr [rbp - 0x58]
0x40008c:	mov	dword ptr [rax], edx
0x40008e:	mov	rax, qword ptr [rbp - 0x48]
0x400092:	mov	eax, dword ptr [rax]
0x400094:	mov	dword ptr [rbp - 0x54], eax
0x400097:	mov	qword ptr [rbp - 0x40], 0
0x40009f:	mov	qword ptr [rbp - 0x38], 0
0x4000a7:	mov	qword ptr [rbp - 0x30], 0
0x4000af:	mov	qword ptr [rbp - 0x28], 0
0x4000b7:	mov	qword ptr [rbp - 0x20], 0
0x4000bf:	cmp	dword ptr [rbp - 0x54], 9
0x4000c3:	jg	0x4000d7
<Block for 0x4000d5, 2 bytes>
0x4000d5:	jmp	0x4000e3
<Block for 0x4000e3, 16 bytes>
0x4000e3:	nop	
0x4000e4:	mov	rax, qword ptr [rbp - 0x18]
0x4000e8:	xor	rax, qword ptr fs:[0x28]
0x4000f1:	je	0x4000f8
<Block for 0x4000f8, 7 bytes>
0x4000f8:	add	rsp, 0x58
0x4000fc:	pop	rbx
0x4000fd:	pop	rbp
0x4000fe:	ret	
<Block for 0x4000f3, 5 bytes>
0x4000f3:	call	0x500018
