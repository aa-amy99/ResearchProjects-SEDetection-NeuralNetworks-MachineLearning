<Block for 0x400000, 71 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x30
0x40000c:	mov	qword ptr [rbp - 0x28], rdi
0x400010:	mov	rax, qword ptr fs:[0x28]
0x400019:	mov	qword ptr [rbp - 8], rax
0x40001d:	xor	eax, eax
0x40001f:	mov	rax, qword ptr [rbp - 0x28]
0x400023:	mov	rax, qword ptr [rax + 0x10]
0x400027:	mov	qword ptr [rbp - 0x10], rax
0x40002b:	lea	rdx, [rbp - 0x1c]
0x40002f:	mov	rax, qword ptr [rbp - 0x10]
0x400033:	lea	rsi, [rip + 0x177]
0x40003a:	mov	rdi, rax
0x40003d:	mov	eax, 0
0x400042:	call	0x500000
<Block for 0x400047, 5 bytes>
0x400047:	cmp	eax, 1
0x40004a:	jne	0x400076
<Block for 0x40004c, 16 bytes>
0x40004c:	mov	dword ptr [rbp - 0x14], 0
0x400053:	mov	dword ptr [rbp - 0x18], 0
0x40005a:	jmp	0x400064
<Block for 0x400076, 16 bytes>
0x400076:	nop	
0x400077:	mov	rax, qword ptr [rbp - 8]
0x40007b:	xor	rax, qword ptr fs:[0x28]
0x400084:	je	0x40008b
<Block for 0x400064, 8 bytes>
0x400064:	mov	eax, dword ptr [rbp - 0x1c]
0x400067:	cmp	dword ptr [rbp - 0x18], eax
0x40006a:	jl	0x40005c
<Block for 0x40008b, 2 bytes>
0x40008b:	leave	
0x40008c:	ret	
<Block for 0x400086, 5 bytes>
0x400086:	call	0x500010
<Block for 0x40005c, 16 bytes>
0x40005c:	add	dword ptr [rbp - 0x14], 1
0x400060:	add	dword ptr [rbp - 0x18], 1
0x400064:	mov	eax, dword ptr [rbp - 0x1c]
0x400067:	cmp	dword ptr [rbp - 0x18], eax
0x40006a:	jl	0x40005c
<Block for 0x40006c, 10 bytes>
0x40006c:	mov	eax, dword ptr [rbp - 0x14]
0x40006f:	mov	edi, eax
0x400071:	call	0x500008
