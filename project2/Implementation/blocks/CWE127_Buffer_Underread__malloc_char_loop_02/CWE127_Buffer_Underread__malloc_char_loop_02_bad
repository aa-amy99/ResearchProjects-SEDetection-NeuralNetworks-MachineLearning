<Block for 0x400000, 48 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x90
0x40000f:	mov	rax, qword ptr fs:[0x28]
0x400018:	mov	qword ptr [rbp - 8], rax
0x40001c:	xor	eax, eax
0x40001e:	mov	qword ptr [rbp - 0x80], 0
0x400026:	mov	edi, 0x64
0x40002b:	call	0x500000
<Block for 0x400030, 11 bytes>
0x400030:	mov	qword ptr [rbp - 0x78], rax
0x400034:	cmp	qword ptr [rbp - 0x78], 0
0x400039:	jne	0x400045
<Block for 0x40003b, 10 bytes>
0x40003b:	mov	edi, 0xffffffff
0x400040:	call	0x500008
<Block for 0x400045, 22 bytes>
0x400045:	mov	rax, qword ptr [rbp - 0x78]
0x400049:	mov	edx, 0x63
0x40004e:	mov	esi, 0x41
0x400053:	mov	rdi, rax
0x400056:	call	0x500010
<Block for 0x40005b, 45 bytes>
0x40005b:	mov	rax, qword ptr [rbp - 0x78]
0x40005f:	add	rax, 0x63
0x400063:	mov	byte ptr [rax], 0
0x400066:	mov	rax, qword ptr [rbp - 0x78]
0x40006a:	sub	rax, 8
0x40006e:	mov	qword ptr [rbp - 0x80], rax
0x400072:	lea	rax, [rbp - 0x70]
0x400076:	mov	edx, 0x63
0x40007b:	mov	esi, 0x43
0x400080:	mov	rdi, rax
0x400083:	call	0x500010
<Block for 0x400088, 17 bytes>
0x400088:	mov	byte ptr [rbp - 0xd], 0
0x40008c:	mov	qword ptr [rbp - 0x88], 0
0x400097:	jmp	0x4000c2
<Block for 0x4000c2, 10 bytes>
0x4000c2:	cmp	qword ptr [rbp - 0x88], 0x63
0x4000ca:	jbe	0x400099
<Block for 0x400099, 51 bytes>
0x400099:	mov	rdx, qword ptr [rbp - 0x80]
0x40009d:	mov	rax, qword ptr [rbp - 0x88]
0x4000a4:	add	rax, rdx
0x4000a7:	movzx	eax, byte ptr [rax]
0x4000aa:	lea	rcx, [rbp - 0x70]
0x4000ae:	mov	rdx, qword ptr [rbp - 0x88]
0x4000b5:	add	rdx, rcx
0x4000b8:	mov	byte ptr [rdx], al
0x4000ba:	add	qword ptr [rbp - 0x88], 1
0x4000c2:	cmp	qword ptr [rbp - 0x88], 0x63
0x4000ca:	jbe	0x400099
<Block for 0x4000cc, 16 bytes>
0x4000cc:	mov	byte ptr [rbp - 0xd], 0
0x4000d0:	lea	rax, [rbp - 0x70]
0x4000d4:	mov	rdi, rax
0x4000d7:	call	0x500018
<Block for 0x4000dc, 16 bytes>
0x4000dc:	nop	
0x4000dd:	mov	rax, qword ptr [rbp - 8]
0x4000e1:	xor	rax, qword ptr fs:[0x28]
0x4000ea:	je	0x4000f1
<Block for 0x4000f1, 2 bytes>
0x4000f1:	leave	
0x4000f2:	ret	
<Block for 0x4000ec, 5 bytes>
0x4000ec:	call	0x500020
