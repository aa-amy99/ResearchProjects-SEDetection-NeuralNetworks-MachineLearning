<Block for 0x40023c, 40 bytes>
0x40023c:	endbr64	
0x400240:	push	rbp
0x400241:	mov	rbp, rsp
0x400244:	push	rbx
0x400245:	sub	rsp, 0x68
0x400249:	mov	rax, qword ptr fs:[0x28]
0x400252:	mov	qword ptr [rbp - 0x18], rax
0x400256:	xor	eax, eax
0x400258:	lea	rax, [rbp - 0x50]
0x40025c:	mov	rdi, rax
0x40025f:	call	0x400536
<Block for 0x400264, 54 bytes>
0x400264:	mov	eax, 0x10
0x400269:	sub	rax, 1
0x40026d:	add	rax, 0x3a
0x400271:	mov	ebx, 0x10
0x400276:	mov	edx, 0
0x40027b:	div	rbx
0x40027e:	imul	rax, rax, 0x10
0x400282:	mov	rdx, rax
0x400285:	and	rdx, 0xfffffffffffff000
0x40028c:	mov	rcx, rsp
0x40028f:	sub	rcx, rdx
0x400292:	mov	rdx, rcx
0x400295:	cmp	rsp, rdx
0x400298:	je	0x4002ac
<Block for 0x4002ac, 26 bytes>
0x4002ac:	mov	rdx, rax
0x4002af:	and	edx, 0xfff
0x4002b5:	sub	rsp, rdx
0x4002b8:	mov	rdx, rax
0x4002bb:	and	edx, 0xfff
0x4002c1:	test	rdx, rdx
0x4002c4:	je	0x4002d6
<Block for 0x40029a, 18 bytes>
0x40029a:	sub	rsp, 0x1000
0x4002a1:	or	qword ptr [rsp + 0xff8], 0
0x4002aa:	jmp	0x400295
<Block for 0x4002d6, 73 bytes>
0x4002d6:	mov	rax, rsp
0x4002d9:	add	rax, 0xf
0x4002dd:	shr	rax, 4
0x4002e1:	shl	rax, 4
0x4002e5:	mov	qword ptr [rbp - 0x60], rax
0x4002e9:	mov	eax, 0x10
0x4002ee:	sub	rax, 1
0x4002f2:	add	rax, 0x6c
0x4002f6:	mov	ecx, 0x10
0x4002fb:	mov	edx, 0
0x400300:	div	rcx
0x400303:	imul	rax, rax, 0x10
0x400307:	mov	rdx, rax
0x40030a:	and	rdx, 0xfffffffffffff000
0x400311:	mov	rcx, rsp
0x400314:	sub	rcx, rdx
0x400317:	mov	rdx, rcx
0x40031a:	cmp	rsp, rdx
0x40031d:	je	0x400331
<Block for 0x4002c6, 89 bytes>
0x4002c6:	and	eax, 0xfff
0x4002cb:	sub	rax, 8
0x4002cf:	add	rax, rsp
0x4002d2:	or	qword ptr [rax], 0
0x4002d6:	mov	rax, rsp
0x4002d9:	add	rax, 0xf
0x4002dd:	shr	rax, 4
0x4002e1:	shl	rax, 4
0x4002e5:	mov	qword ptr [rbp - 0x60], rax
0x4002e9:	mov	eax, 0x10
0x4002ee:	sub	rax, 1
0x4002f2:	add	rax, 0x6c
0x4002f6:	mov	ecx, 0x10
0x4002fb:	mov	edx, 0
0x400300:	div	rcx
0x400303:	imul	rax, rax, 0x10
0x400307:	mov	rdx, rax
0x40030a:	and	rdx, 0xfffffffffffff000
0x400311:	mov	rcx, rsp
0x400314:	sub	rcx, rdx
0x400317:	mov	rdx, rcx
0x40031a:	cmp	rsp, rdx
0x40031d:	je	0x400331
<Block for 0x400295, 5 bytes>
0x400295:	cmp	rsp, rdx
0x400298:	je	0x4002ac
<Block for 0x400331, 26 bytes>
0x400331:	mov	rdx, rax
0x400334:	and	edx, 0xfff
0x40033a:	sub	rsp, rdx
0x40033d:	mov	rdx, rax
0x400340:	and	edx, 0xfff
0x400346:	test	rdx, rdx
0x400349:	je	0x40035b
<Block for 0x40031f, 18 bytes>
0x40031f:	sub	rsp, 0x1000
0x400326:	or	qword ptr [rsp + 0xff8], 0
0x40032f:	jmp	0x40031a
<Block for 0x40035b, 41 bytes>
0x40035b:	mov	rax, rsp
0x40035e:	add	rax, 0xf
0x400362:	shr	rax, 4
0x400366:	shl	rax, 4
0x40036a:	mov	qword ptr [rbp - 0x58], rax
0x40036e:	mov	rax, qword ptr [rbp - 0x60]
0x400372:	mov	edx, 0x31
0x400377:	mov	esi, 0x41
0x40037c:	mov	rdi, rax
0x40037f:	call	0x500000
<Block for 0x40034b, 57 bytes>
0x40034b:	and	eax, 0xfff
0x400350:	sub	rax, 8
0x400354:	add	rax, rsp
0x400357:	or	qword ptr [rax], 0
0x40035b:	mov	rax, rsp
0x40035e:	add	rax, 0xf
0x400362:	shr	rax, 4
0x400366:	shl	rax, 4
0x40036a:	mov	qword ptr [rbp - 0x58], rax
0x40036e:	mov	rax, qword ptr [rbp - 0x60]
0x400372:	mov	edx, 0x31
0x400377:	mov	esi, 0x41
0x40037c:	mov	rdi, rax
0x40037f:	call	0x500000
<Block for 0x40031a, 5 bytes>
0x40031a:	cmp	rsp, rdx
0x40031d:	je	0x400331
<Block for 0x400384, 33 bytes>
0x400384:	mov	rax, qword ptr [rbp - 0x60]
0x400388:	add	rax, 0x31
0x40038c:	mov	byte ptr [rax], 0
0x40038f:	mov	rax, qword ptr [rbp - 0x58]
0x400393:	mov	edx, 0x63
0x400398:	mov	esi, 0x41
0x40039d:	mov	rdi, rax
0x4003a0:	call	0x500000
<Block for 0x4003a5, 38 bytes>
0x4003a5:	mov	rax, qword ptr [rbp - 0x58]
0x4003a9:	add	rax, 0x63
0x4003ad:	mov	byte ptr [rax], 0
0x4003b0:	mov	rax, qword ptr [rbp - 0x58]
0x4003b4:	mov	qword ptr [rbp - 0x68], rax
0x4003b8:	lea	rdx, [rbp - 0x68]
0x4003bc:	lea	rax, [rbp - 0x50]
0x4003c0:	mov	rsi, rdx
0x4003c3:	mov	rdi, rax
0x4003c6:	call	0x40062e
<Block for 0x4003cb, 19 bytes>
0x4003cb:	lea	rdx, [rbp - 0x68]
0x4003cf:	lea	rax, [rbp - 0x50]
0x4003d3:	mov	rsi, rdx
0x4003d6:	mov	rdi, rax
0x4003d9:	call	0x40062e
<Block for 0x4003de, 19 bytes>
0x4003de:	lea	rdx, [rbp - 0x68]
0x4003e2:	lea	rax, [rbp - 0x50]
0x4003e6:	mov	rsi, rdx
0x4003e9:	mov	rdi, rax
0x4003ec:	call	0x40062e
<Block for 0x4003f1, 19 bytes>
0x4003f1:	lea	rdx, [rbp - 0x50]
0x4003f5:	lea	rax, [rbp - 0x30]
0x4003f9:	mov	rsi, rdx
0x4003fc:	mov	rdi, rax
0x4003ff:	call	0x400668
<Block for 0x400404, 12 bytes>
0x400404:	lea	rax, [rbp - 0x30]
0x400408:	mov	rdi, rax
0x40040b:	call	0x500020
<Block for 0x400410, 12 bytes>
0x400410:	lea	rax, [rbp - 0x30]
0x400414:	mov	rdi, rax
0x400417:	call	0x400556
<Block for 0x40041c, 12 bytes>
0x40041c:	lea	rax, [rbp - 0x50]
0x400420:	mov	rdi, rax
0x400423:	call	0x400556
<Block for 0x400428, 16 bytes>
0x400428:	nop	
0x400429:	mov	rax, qword ptr [rbp - 0x18]
0x40042d:	xor	rax, qword ptr fs:[0x28]
0x400436:	je	0x400472
<Block for 0x400472, 6 bytes>
0x400472:	mov	rbx, qword ptr [rbp - 8]
0x400476:	leave	
0x400477:	ret	
<Block for 0x400438, 2 bytes>
0x400438:	jmp	0x40046d
<Block for 0x40046d, 5 bytes>
0x40046d:	call	0x500018
