<Block for 0x400060, 38 bytes>
0x400060:	endbr64	
0x400064:	push	rbp
0x400065:	mov	rbp, rsp
0x400068:	sub	rsp, 0x20
0x40006c:	mov	rax, qword ptr fs:[0x28]
0x400075:	mov	qword ptr [rbp - 8], rax
0x400079:	xor	eax, eax
0x40007b:	mov	eax, dword ptr [rip + 0xfff7f]
0x400081:	cmp	eax, 5
0x400084:	je	0x400094
<Block for 0x400094, 17 bytes>
0x400094:	mov	esi, 0xa
0x400099:	lea	rdi, [rip + 0xfff78]
0x4000a0:	call	0x4001e2
<Block for 0x400086, 12 bytes>
0x400086:	lea	rdi, [rip + 0x140]
0x40008d:	call	0x500018
<Block for 0x4000a5, 19 bytes>
0x4000a5:	lea	rax, [rbp - 0x12]
0x4000a9:	mov	rsi, rax
0x4000ac:	lea	rdi, [rip + 0xfff55]
0x4000b3:	call	0x500010
<Block for 0x400092, 2 bytes>
0x400092:	jmp	0x4000c8
<Block for 0x4000b8, 16 bytes>
0x4000b8:	mov	byte ptr [rbp - 9], 0
0x4000bc:	lea	rax, [rbp - 0x12]
0x4000c0:	mov	rdi, rax
0x4000c3:	call	0x500018
<Block for 0x4000c8, 16 bytes>
0x4000c8:	nop	
0x4000c9:	mov	rax, qword ptr [rbp - 8]
0x4000cd:	xor	rax, qword ptr fs:[0x28]
0x4000d6:	je	0x4000dd
<Block for 0x4000dd, 2 bytes>
0x4000dd:	leave	
0x4000de:	ret	
<Block for 0x4000d8, 5 bytes>
0x4000d8:	call	0x500020
