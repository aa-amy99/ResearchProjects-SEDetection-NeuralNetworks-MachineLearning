<Block for 0x400000, 86 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x20
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	nop	
0x40001c:	endbr64	
0x400020:	mov	eax, 0x10
0x400025:	sub	rax, 1
0x400029:	add	rax, 0x10
0x40002d:	mov	esi, 0x10
0x400032:	mov	edx, 0
0x400037:	div	rsi
0x40003a:	imul	rax, rax, 0x10
0x40003e:	mov	rdx, rax
0x400041:	and	rdx, 0xfffffffffffff000
0x400048:	mov	rcx, rsp
0x40004b:	sub	rcx, rdx
0x40004e:	mov	rdx, rcx
0x400051:	cmp	rsp, rdx
0x400054:	je	0x400068
<Block for 0x400068, 26 bytes>
0x400068:	mov	rdx, rax
0x40006b:	and	edx, 0xfff
0x400071:	sub	rsp, rdx
0x400074:	mov	rdx, rax
0x400077:	and	edx, 0xfff
0x40007d:	test	rdx, rdx
0x400080:	je	0x400092
<Block for 0x400056, 18 bytes>
0x400056:	sub	rsp, 0x1000
0x40005d:	or	qword ptr [rsp + 0xff8], 0
0x400066:	jmp	0x400051
<Block for 0x400092, 42 bytes>
0x400092:	mov	rax, rsp
0x400095:	add	rax, 0xf
0x400099:	shr	rax, 4
0x40009d:	shl	rax, 4
0x4000a1:	mov	qword ptr [rbp - 0x18], rax
0x4000a5:	mov	rax, qword ptr [rbp - 0x18]
0x4000a9:	mov	rax, qword ptr [rax]
0x4000ac:	mov	qword ptr [rbp - 0x10], rax
0x4000b0:	mov	rax, qword ptr [rbp - 0x10]
0x4000b4:	mov	rdi, rax
0x4000b7:	call	0x500000
<Block for 0x400082, 58 bytes>
0x400082:	and	eax, 0xfff
0x400087:	sub	rax, 8
0x40008b:	add	rax, rsp
0x40008e:	or	qword ptr [rax], 0
0x400092:	mov	rax, rsp
0x400095:	add	rax, 0xf
0x400099:	shr	rax, 4
0x40009d:	shl	rax, 4
0x4000a1:	mov	qword ptr [rbp - 0x18], rax
0x4000a5:	mov	rax, qword ptr [rbp - 0x18]
0x4000a9:	mov	rax, qword ptr [rax]
0x4000ac:	mov	qword ptr [rbp - 0x10], rax
0x4000b0:	mov	rax, qword ptr [rbp - 0x10]
0x4000b4:	mov	rdi, rax
0x4000b7:	call	0x500000
<Block for 0x400051, 5 bytes>
0x400051:	cmp	rsp, rdx
0x400054:	je	0x400068
<Block for 0x4000bc, 16 bytes>
0x4000bc:	nop	
0x4000bd:	mov	rax, qword ptr [rbp - 8]
0x4000c1:	xor	rax, qword ptr fs:[0x28]
0x4000ca:	je	0x4000d1
<Block for 0x4000d1, 2 bytes>
0x4000d1:	leave	
0x4000d2:	ret	
<Block for 0x4000cc, 5 bytes>
0x4000cc:	call	0x500008
