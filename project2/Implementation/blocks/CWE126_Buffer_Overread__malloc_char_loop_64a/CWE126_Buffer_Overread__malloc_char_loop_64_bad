<Block for 0x400000, 45 bytes>
0x400000:	endbr64	
0x400004:	push	rbp
0x400005:	mov	rbp, rsp
0x400008:	sub	rsp, 0x10
0x40000c:	mov	rax, qword ptr fs:[0x28]
0x400015:	mov	qword ptr [rbp - 8], rax
0x400019:	xor	eax, eax
0x40001b:	mov	qword ptr [rbp - 0x10], 0
0x400023:	mov	edi, 0x32
0x400028:	call	0x500000
<Block for 0x40002d, 13 bytes>
0x40002d:	mov	qword ptr [rbp - 0x10], rax
0x400031:	mov	rax, qword ptr [rbp - 0x10]
0x400035:	test	rax, rax
0x400038:	jne	0x400044
<Block for 0x40003a, 10 bytes>
0x40003a:	mov	edi, 0xffffffff
0x40003f:	call	0x500008
<Block for 0x400044, 22 bytes>
0x400044:	mov	rax, qword ptr [rbp - 0x10]
0x400048:	mov	edx, 0x31
0x40004d:	mov	esi, 0x41
0x400052:	mov	rdi, rax
0x400055:	call	0x500010
<Block for 0x40005a, 23 bytes>
0x40005a:	mov	rax, qword ptr [rbp - 0x10]
0x40005e:	add	rax, 0x31
0x400062:	mov	byte ptr [rax], 0
0x400065:	lea	rax, [rbp - 0x10]
0x400069:	mov	rdi, rax
0x40006c:	call	0x500018
<Block for 0x400071, 16 bytes>
0x400071:	nop	
0x400072:	mov	rax, qword ptr [rbp - 8]
0x400076:	xor	rax, qword ptr fs:[0x28]
0x40007f:	je	0x400086
<Block for 0x400086, 2 bytes>
0x400086:	leave	
0x400087:	ret	
<Block for 0x400081, 5 bytes>
0x400081:	call	0x500020
