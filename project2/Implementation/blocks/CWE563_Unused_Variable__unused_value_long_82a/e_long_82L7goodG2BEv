<Block for 0x400066, 33 bytes>
0x400066:	endbr64	
0x40006a:	push	rbp
0x40006b:	mov	rbp, rsp
0x40006e:	push	rbx
0x40006f:	sub	rsp, 0x18
0x400073:	mov	qword ptr [rbp - 0x20], 5
0x40007b:	mov	rax, qword ptr [rbp - 0x20]
0x40007f:	mov	rdi, rax
0x400082:	call	0x500010
<Block for 0x400087, 10 bytes>
0x400087:	mov	edi, 8
0x40008c:	call	0x500000
<Block for 0x400091, 11 bytes>
0x400091:	mov	rbx, rax
0x400094:	mov	rdi, rbx
0x400097:	call	0x4001a0
<Block for 0x40009c, 30 bytes>
0x40009c:	mov	qword ptr [rbp - 0x18], rbx
0x4000a0:	mov	rax, qword ptr [rbp - 0x18]
0x4000a4:	mov	rax, qword ptr [rax]
0x4000a7:	mov	rcx, qword ptr [rax]
0x4000aa:	mov	rdx, qword ptr [rbp - 0x20]
0x4000ae:	mov	rax, qword ptr [rbp - 0x18]
0x4000b2:	mov	rsi, rdx
0x4000b5:	mov	rdi, rax
0x4000b8:	call	rcx
<Block for 0x4000ba, 9 bytes>
0x4000ba:	mov	rax, qword ptr [rbp - 0x18]
0x4000be:	test	rax, rax
0x4000c1:	je	0x4000d0
<Block for 0x4000d0, 8 bytes>
0x4000d0:	nop	
0x4000d1:	add	rsp, 0x18
0x4000d5:	pop	rbx
0x4000d6:	pop	rbp
0x4000d7:	ret	
<Block for 0x4000c3, 13 bytes>
0x4000c3:	mov	esi, 8
0x4000c8:	mov	rdi, rax
0x4000cb:	call	0x500008
