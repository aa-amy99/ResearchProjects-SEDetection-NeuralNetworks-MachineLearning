<Block for 0x40001e, 37 bytes>
0x40001e:	endbr64	
0x400022:	push	rbp
0x400023:	mov	rbp, rsp
0x400026:	sub	rsp, 0x20
0x40002a:	mov	rax, qword ptr fs:[0x28]
0x400033:	mov	qword ptr [rbp - 8], rax
0x400037:	xor	eax, eax
0x400039:	mov	eax, 0
0x40003e:	call	0x400000
<Block for 0x400043, 4 bytes>
0x400043:	test	eax, eax
0x400045:	je	0x40008b
<Block for 0x40008b, 16 bytes>
0x40008b:	nop	
0x40008c:	mov	rax, qword ptr [rbp - 8]
0x400090:	xor	rax, qword ptr fs:[0x28]
0x400099:	je	0x4000a0
<Block for 0x400047, 17 bytes>
0x400047:	lea	rax, [rbp - 0x12]
0x40004b:	mov	rdi, rax
0x40004e:	mov	eax, 0
0x400053:	call	0x500000
<Block for 0x4000a0, 2 bytes>
0x4000a0:	leave	
0x4000a1:	ret	
<Block for 0x40009b, 5 bytes>
0x40009b:	call	0x500018
<Block for 0x400058, 13 bytes>
0x400058:	cdqe	
0x40005a:	mov	qword ptr [rbp - 0x20], rax
0x40005e:	cmp	qword ptr [rbp - 0x20], 0
0x400063:	jne	0x40007b
<Block for 0x400065, 12 bytes>
0x400065:	lea	rdi, [rip + 0x17c]
0x40006c:	call	0x500008
<Block for 0x40007b, 16 bytes>
0x40007b:	mov	byte ptr [rbp - 9], 0
0x40007f:	lea	rax, [rbp - 0x12]
0x400083:	mov	rdi, rax
0x400086:	call	0x500008
<Block for 0x400071, 10 bytes>
0x400071:	mov	edi, 1
0x400076:	call	0x500010
